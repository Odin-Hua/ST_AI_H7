
H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4b4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ad4  0800e784  0800e784  0001e784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013258  08013258  00023258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013260  08013260  00023260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013264  08013264  00023264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  20000000  08013268  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000418  24000000  24000000  00040000  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000a0  200000a0  000300a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040601  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000661a  00000000  00000000  000706cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001bc8  00000000  00000000  00076cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001990  00000000  00000000  000788b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038736  00000000  00000000  0007a248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029d0d  00000000  00000000  000b297e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001590d2  00000000  00000000  000dc68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0023575d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000078a8  00000000  00000000  002357b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000000 	.word	0x24000000
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e76c 	.word	0x0800e76c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000004 	.word	0x24000004
 800030c:	0800e76c 	.word	0x0800e76c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi_pssi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_DCMI_Init+0x60>)
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <MX_DCMI_Init+0x64>)
 80006c0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_DCMI_Init+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_DCMI_Init+0x60>)
 80006ca:	2220      	movs	r2, #32
 80006cc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_DCMI_Init+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_DCMI_Init+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_DCMI_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_DCMI_Init+0x60>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_DCMI_Init+0x60>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_DCMI_Init+0x60>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_DCMI_Init+0x60>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_DCMI_Init+0x60>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_DCMI_Init+0x60>)
 8000700:	2200      	movs	r2, #0
 8000702:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_DCMI_Init+0x60>)
 8000706:	f001 ff17 	bl	8002538 <HAL_DCMI_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000710:	f000 ffde 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	24000034 	.word	0x24000034
 800071c:	48020000 	.word	0x48020000

08000720 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08e      	sub	sp, #56	; 0x38
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a78      	ldr	r2, [pc, #480]	; (8000920 <HAL_DCMI_MspInit+0x200>)
 800073e:	4293      	cmp	r3, r2
 8000740:	f040 80e9 	bne.w	8000916 <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000744:	4b77      	ldr	r3, [pc, #476]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 8000746:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800074a:	4a76      	ldr	r2, [pc, #472]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000754:	4b73      	ldr	r3, [pc, #460]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 8000756:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	623b      	str	r3, [r7, #32]
 8000760:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000762:	4b70      	ldr	r3, [pc, #448]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	4a6e      	ldr	r2, [pc, #440]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000772:	4b6c      	ldr	r3, [pc, #432]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	f003 0310 	and.w	r3, r3, #16
 800077c:	61fb      	str	r3, [r7, #28]
 800077e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000780:	4b68      	ldr	r3, [pc, #416]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000786:	4a67      	ldr	r2, [pc, #412]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 8000788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000790:	4b64      	ldr	r3, [pc, #400]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	4b61      	ldr	r3, [pc, #388]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	4a5f      	ldr	r2, [pc, #380]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 80007a6:	f043 0308 	orr.w	r3, r3, #8
 80007aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ae:	4b5d      	ldr	r3, [pc, #372]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b59      	ldr	r3, [pc, #356]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c2:	4a58      	ldr	r2, [pc, #352]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007cc:	4b55      	ldr	r3, [pc, #340]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	4b52      	ldr	r3, [pc, #328]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e0:	4a50      	ldr	r2, [pc, #320]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 80007e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ea:	4b4e      	ldr	r3, [pc, #312]	; (8000924 <HAL_DCMI_MspInit+0x204>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_1
 80007f8:	2373      	movs	r3, #115	; 0x73
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000808:	230d      	movs	r3, #13
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	4845      	ldr	r0, [pc, #276]	; (8000928 <HAL_DCMI_MspInit+0x208>)
 8000814:	f005 f9fe 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800082a:	230d      	movs	r3, #13
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000832:	4619      	mov	r1, r3
 8000834:	483d      	ldr	r0, [pc, #244]	; (800092c <HAL_DCMI_MspInit+0x20c>)
 8000836:	f005 f9ed 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800083a:	2308      	movs	r3, #8
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800084a:	230d      	movs	r3, #13
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	4836      	ldr	r0, [pc, #216]	; (8000930 <HAL_DCMI_MspInit+0x210>)
 8000856:	f005 f9dd 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_6;
 800085a:	f44f 7314 	mov.w	r3, #592	; 0x250
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800086c:	230d      	movs	r3, #13
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000874:	4619      	mov	r1, r3
 8000876:	482f      	ldr	r0, [pc, #188]	; (8000934 <HAL_DCMI_MspInit+0x214>)
 8000878:	f005 f9cc 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800087c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800088e:	230d      	movs	r3, #13
 8000890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	4619      	mov	r1, r3
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <HAL_DCMI_MspInit+0x218>)
 800089a:	f005 f9bb 	bl	8005c14 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI_PSSI Init */
    hdma_dcmi_pssi.Instance = DMA2_Stream1;
 800089e:	4b27      	ldr	r3, [pc, #156]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008a0:	4a27      	ldr	r2, [pc, #156]	; (8000940 <HAL_DCMI_MspInit+0x220>)
 80008a2:	601a      	str	r2, [r3, #0]
    hdma_dcmi_pssi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008a6:	224b      	movs	r2, #75	; 0x4b
 80008a8:	605a      	str	r2, [r3, #4]
    hdma_dcmi_pssi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008aa:	4b24      	ldr	r3, [pc, #144]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
    hdma_dcmi_pssi.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
    hdma_dcmi_pssi.Init.MemInc = DMA_MINC_ENABLE;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008bc:	611a      	str	r2, [r3, #16]
    hdma_dcmi_pssi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008c4:	615a      	str	r2, [r3, #20]
    hdma_dcmi_pssi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008cc:	619a      	str	r2, [r3, #24]
    hdma_dcmi_pssi.Init.Mode = DMA_CIRCULAR;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008d4:	61da      	str	r2, [r3, #28]
    hdma_dcmi_pssi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008dc:	621a      	str	r2, [r3, #32]
    hdma_dcmi_pssi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008e0:	2204      	movs	r2, #4
 80008e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi_pssi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008e6:	2203      	movs	r2, #3
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi_pssi.Init.MemBurst = DMA_MBURST_SINGLE;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi_pssi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi_pssi) != HAL_OK)
 80008f6:	4811      	ldr	r0, [pc, #68]	; (800093c <HAL_DCMI_MspInit+0x21c>)
 80008f8:	f002 f8aa 	bl	8002a50 <HAL_DMA_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_DCMI_MspInit+0x1e6>
    {
      Error_Handler();
 8000902:	f000 fee5 	bl	80016d0 <Error_Handler>
    }

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 5, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2105      	movs	r1, #5
 800090a:	204e      	movs	r0, #78	; 0x4e
 800090c:	f001 fd63 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8000910:	204e      	movs	r0, #78	; 0x4e
 8000912:	f001 fd7a 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	3738      	adds	r7, #56	; 0x38
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	48020000 	.word	0x48020000
 8000924:	58024400 	.word	0x58024400
 8000928:	58021000 	.word	0x58021000
 800092c:	58021800 	.word	0x58021800
 8000930:	58020c00 	.word	0x58020c00
 8000934:	58020000 	.word	0x58020000
 8000938:	58021c00 	.word	0x58021c00
 800093c:	24000084 	.word	0x24000084
 8000940:	40020428 	.word	0x40020428

08000944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <MX_DMA_Init+0x3c>)
 800094c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000950:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <MX_DMA_Init+0x3c>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_DMA_Init+0x3c>)
 800095c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2039      	movs	r0, #57	; 0x39
 800096e:	f001 fd32 	bl	80023d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000972:	2039      	movs	r0, #57	; 0x39
 8000974:	f001 fd49 	bl	800240a <HAL_NVIC_EnableIRQ>

}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	58024400 	.word	0x58024400

08000984 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_DMA2D_Init+0x6c>)
 800098a:	4a1a      	ldr	r2, [pc, #104]	; (80009f4 <MX_DMA2D_Init+0x70>)
 800098c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_DMA2D_Init+0x6c>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_DMA2D_Init+0x6c>)
 8000996:	2202      	movs	r2, #2
 8000998:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_DMA2D_Init+0x6c>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_DMA2D_Init+0x6c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_DMA2D_Init+0x6c>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_DMA2D_Init+0x6c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_DMA2D_Init+0x6c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_DMA2D_Init+0x6c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_DMA2D_Init+0x6c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_DMA2D_Init+0x6c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009ca:	4809      	ldr	r0, [pc, #36]	; (80009f0 <MX_DMA2D_Init+0x6c>)
 80009cc:	f004 fb5a 	bl	8005084 <HAL_DMA2D_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009d6:	f000 fe7b 	bl	80016d0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009da:	2101      	movs	r1, #1
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_DMA2D_Init+0x6c>)
 80009de:	f004 fbb5 	bl	800514c <HAL_DMA2D_ConfigLayer>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80009e8:	f000 fe72 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	240000fc 	.word	0x240000fc
 80009f4:	52001000 	.word	0x52001000

080009f8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <HAL_DMA2D_MspInit+0x3c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d10e      	bne.n	8000a28 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_DMA2D_MspInit+0x40>)
 8000a0c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a10:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <HAL_DMA2D_MspInit+0x40>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <HAL_DMA2D_MspInit+0x40>)
 8000a1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a20:	f003 0310 	and.w	r3, r3, #16
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	52001000 	.word	0x52001000
 8000a38:	58024400 	.word	0x58024400

08000a3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	; 0x38
 8000a40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a52:	4bb2      	ldr	r3, [pc, #712]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	4ab0      	ldr	r2, [pc, #704]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a62:	4bae      	ldr	r3, [pc, #696]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	f003 0310 	and.w	r3, r3, #16
 8000a6c:	623b      	str	r3, [r7, #32]
 8000a6e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a70:	4baa      	ldr	r3, [pc, #680]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a76:	4aa9      	ldr	r2, [pc, #676]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a80:	4ba6      	ldr	r3, [pc, #664]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	4ba3      	ldr	r3, [pc, #652]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	4aa1      	ldr	r2, [pc, #644]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000a96:	f043 0308 	orr.w	r3, r3, #8
 8000a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9e:	4b9f      	ldr	r3, [pc, #636]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	f003 0308 	and.w	r3, r3, #8
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aac:	4b9b      	ldr	r3, [pc, #620]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	4a9a      	ldr	r2, [pc, #616]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abc:	4b97      	ldr	r3, [pc, #604]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b94      	ldr	r3, [pc, #592]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	4a92      	ldr	r2, [pc, #584]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ada:	4b90      	ldr	r3, [pc, #576]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	4b8c      	ldr	r3, [pc, #560]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	4a8b      	ldr	r2, [pc, #556]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af8:	4b88      	ldr	r3, [pc, #544]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b85      	ldr	r3, [pc, #532]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	4a83      	ldr	r2, [pc, #524]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b16:	4b81      	ldr	r3, [pc, #516]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b24:	4b7d      	ldr	r3, [pc, #500]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	4a7c      	ldr	r2, [pc, #496]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000b2c:	f043 0320 	orr.w	r3, r3, #32
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b34:	4b79      	ldr	r3, [pc, #484]	; (8000d1c <MX_GPIO_Init+0x2e0>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3a:	f003 0320 	and.w	r3, r3, #32
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_14|GPIO_PIN_12, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000b48:	4875      	ldr	r0, [pc, #468]	; (8000d20 <MX_GPIO_Init+0x2e4>)
 8000b4a:	f005 fb0d 	bl	8006168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2130      	movs	r1, #48	; 0x30
 8000b52:	4874      	ldr	r0, [pc, #464]	; (8000d24 <MX_GPIO_Init+0x2e8>)
 8000b54:	f005 fb08 	bl	8006168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	4872      	ldr	r0, [pc, #456]	; (8000d28 <MX_GPIO_Init+0x2ec>)
 8000b5e:	f005 fb03 	bl	8006168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f242 0111 	movw	r1, #8209	; 0x2011
 8000b68:	4870      	ldr	r0, [pc, #448]	; (8000d2c <MX_GPIO_Init+0x2f0>)
 8000b6a:	f005 fafd 	bl	8006168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f242 0128 	movw	r1, #8232	; 0x2028
 8000b74:	486e      	ldr	r0, [pc, #440]	; (8000d30 <MX_GPIO_Init+0x2f4>)
 8000b76:	f005 faf7 	bl	8006168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_13
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f643 0129 	movw	r1, #14377	; 0x3829
 8000b80:	486c      	ldr	r0, [pc, #432]	; (8000d34 <MX_GPIO_Init+0x2f8>)
 8000b82:	f005 faf1 	bl	8006168 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000b8c:	486a      	ldr	r0, [pc, #424]	; (8000d38 <MX_GPIO_Init+0x2fc>)
 8000b8e:	f005 faeb 	bl	8006168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2101      	movs	r1, #1
 8000b96:	4869      	ldr	r0, [pc, #420]	; (8000d3c <MX_GPIO_Init+0x300>)
 8000b98:	f005 fae6 	bl	8006168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	485a      	ldr	r0, [pc, #360]	; (8000d20 <MX_GPIO_Init+0x2e4>)
 8000bb6:	f005 f82d 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bba:	2330      	movs	r3, #48	; 0x30
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4854      	ldr	r0, [pc, #336]	; (8000d24 <MX_GPIO_Init+0x2e8>)
 8000bd2:	f005 f81f 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	484e      	ldr	r0, [pc, #312]	; (8000d28 <MX_GPIO_Init+0x2ec>)
 8000bee:	f005 f811 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4848      	ldr	r0, [pc, #288]	; (8000d2c <MX_GPIO_Init+0x2f0>)
 8000c0c:	f005 f802 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000c10:	f242 0320 	movw	r3, #8224	; 0x2020
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4841      	ldr	r0, [pc, #260]	; (8000d30 <MX_GPIO_Init+0x2f4>)
 8000c2a:	f004 fff3 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF5 PF13 PF11
                           PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_11
 8000c2e:	f643 0328 	movw	r3, #14376	; 0x3828
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	483b      	ldr	r0, [pc, #236]	; (8000d34 <MX_GPIO_Init+0x2f8>)
 8000c48:	f004 ffe4 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4834      	ldr	r0, [pc, #208]	; (8000d34 <MX_GPIO_Init+0x2f8>)
 8000c64:	f004 ffd6 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	482e      	ldr	r0, [pc, #184]	; (8000d38 <MX_GPIO_Init+0x2fc>)
 8000c80:	f004 ffc8 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4826      	ldr	r0, [pc, #152]	; (8000d38 <MX_GPIO_Init+0x2fc>)
 8000c9e:	f004 ffb9 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481d      	ldr	r0, [pc, #116]	; (8000d30 <MX_GPIO_Init+0x2f4>)
 8000cba:	f004 ffab 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000cbe:	2311      	movs	r3, #17
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4815      	ldr	r0, [pc, #84]	; (8000d2c <MX_GPIO_Init+0x2f0>)
 8000cd6:	f004 ff9d 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4812      	ldr	r0, [pc, #72]	; (8000d3c <MX_GPIO_Init+0x300>)
 8000cf2:	f004 ff8f 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_GPIO_Init+0x2e4>)
 8000d10:	f004 ff80 	bl	8005c14 <HAL_GPIO_Init>

}
 8000d14:	bf00      	nop
 8000d16:	3738      	adds	r7, #56	; 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58024400 	.word	0x58024400
 8000d20:	58021c00 	.word	0x58021c00
 8000d24:	58020400 	.word	0x58020400
 8000d28:	58020c00 	.word	0x58020c00
 8000d2c:	58020800 	.word	0x58020800
 8000d30:	58021800 	.word	0x58021800
 8000d34:	58021400 	.word	0x58021400
 8000d38:	58021000 	.word	0x58021000
 8000d3c:	58020000 	.word	0x58020000

08000d40 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_I2C4_Init+0x74>)
 8000d46:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <MX_I2C4_Init+0x78>)
 8000d48:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_I2C4_Init+0x74>)
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <MX_I2C4_Init+0x7c>)
 8000d4e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_I2C4_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_I2C4_Init+0x74>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_I2C4_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_I2C4_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_I2C4_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_I2C4_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_I2C4_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <MX_I2C4_Init+0x74>)
 8000d7c:	f005 fa0e 	bl	800619c <HAL_I2C_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d86:	f000 fca3 	bl	80016d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <MX_I2C4_Init+0x74>)
 8000d8e:	f005 ff1d 	bl	8006bcc <HAL_I2CEx_ConfigAnalogFilter>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d98:	f000 fc9a 	bl	80016d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_I2C4_Init+0x74>)
 8000da0:	f005 ff5f 	bl	8006c62 <HAL_I2CEx_ConfigDigitalFilter>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000daa:	f000 fc91 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	24000164 	.word	0x24000164
 8000db8:	58001c00 	.word	0x58001c00
 8000dbc:	60404e72 	.word	0x60404e72

08000dc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0b6      	sub	sp, #216	; 0xd8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	22b4      	movs	r2, #180	; 0xb4
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f00d f881 	bl	800dee8 <memset>
  if(i2cHandle->Instance==I2C4)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a25      	ldr	r2, [pc, #148]	; (8000e80 <HAL_I2C_MspInit+0xc0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d142      	bne.n	8000e76 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000df0:	2310      	movs	r3, #16
 8000df2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f008 fcf2 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e0a:	f000 fc61 	bl	80016d0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <HAL_I2C_MspInit+0xc4>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <HAL_I2C_MspInit+0xc4>)
 8000e16:	f043 0320 	orr.w	r3, r3, #32
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_I2C_MspInit+0xc4>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	f003 0320 	and.w	r3, r3, #32
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e2c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e34:	2312      	movs	r3, #18
 8000e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e46:	2304      	movs	r3, #4
 8000e48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e50:	4619      	mov	r1, r3
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <HAL_I2C_MspInit+0xc8>)
 8000e54:	f004 fede 	bl	8005c14 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_I2C_MspInit+0xc4>)
 8000e5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <HAL_I2C_MspInit+0xc4>)
 8000e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_I2C_MspInit+0xc4>)
 8000e6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000e76:	bf00      	nop
 8000e78:	37d8      	adds	r7, #216	; 0xd8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	58001c00 	.word	0x58001c00
 8000e84:	58024400 	.word	0x58024400
 8000e88:	58021400 	.word	0x58021400

08000e8c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C4)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <HAL_I2C_MspDeInit+0x40>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d111      	bne.n	8000ec2 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_I2C_MspDeInit+0x44>)
 8000ea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_I2C_MspDeInit+0x44>)
 8000ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000eaa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4

    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_14);
 8000eae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb2:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <HAL_I2C_MspDeInit+0x48>)
 8000eb4:	f005 f856 	bl	8005f64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 8000eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_I2C_MspDeInit+0x48>)
 8000ebe:	f005 f851 	bl	8005f64 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	58001c00 	.word	0x58001c00
 8000ed0:	58024400 	.word	0x58024400
 8000ed4:	58021400 	.word	0x58021400

08000ed8 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_IWDG1_Init+0x34>)
 8000ede:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <MX_IWDG1_Init+0x38>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_32;
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <MX_IWDG1_Init+0x34>)
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_IWDG1_Init+0x34>)
 8000eea:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000eee:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 500;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_IWDG1_Init+0x34>)
 8000ef2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ef6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_IWDG1_Init+0x34>)
 8000efa:	f005 fefe 	bl	8006cfa <HAL_IWDG_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8000f04:	f000 fbe4 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	240001b0 	.word	0x240001b0
 8000f10:	58004800 	.word	0x58004800

08000f14 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	; 0x38
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
	/*复位操作*/
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	4847      	ldr	r0, [pc, #284]	; (800103c <MX_LTDC_Init+0x128>)
 8000f20:	f005 f922 	bl	8006168 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f24:	200a      	movs	r0, #10
 8000f26:	f001 f957 	bl	80021d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	4843      	ldr	r0, [pc, #268]	; (800103c <MX_LTDC_Init+0x128>)
 8000f30:	f005 f91a 	bl	8006168 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f34:	200a      	movs	r0, #10
 8000f36:	f001 f94f 	bl	80021d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET); //使能的LCD背光
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	4840      	ldr	r0, [pc, #256]	; (8001040 <MX_LTDC_Init+0x12c>)
 8000f40:	f005 f912 	bl	8006168 <HAL_GPIO_WritePin>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2234      	movs	r2, #52	; 0x34
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f00c ffcc 	bl	800dee8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f50:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <MX_LTDC_Init+0x130>)
 8000f52:	4a3d      	ldr	r2, [pc, #244]	; (8001048 <MX_LTDC_Init+0x134>)
 8000f54:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f56:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <MX_LTDC_Init+0x130>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f5c:	4b39      	ldr	r3, [pc, #228]	; (8001044 <MX_LTDC_Init+0x130>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f62:	4b38      	ldr	r3, [pc, #224]	; (8001044 <MX_LTDC_Init+0x130>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f68:	4b36      	ldr	r3, [pc, #216]	; (8001044 <MX_LTDC_Init+0x130>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000f6e:	4b35      	ldr	r3, [pc, #212]	; (8001044 <MX_LTDC_Init+0x130>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000f74:	4b33      	ldr	r3, [pc, #204]	; (8001044 <MX_LTDC_Init+0x130>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 46;
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <MX_LTDC_Init+0x130>)
 8000f7c:	222e      	movs	r2, #46	; 0x2e
 8000f7e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 23;
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <MX_LTDC_Init+0x130>)
 8000f82:	2217      	movs	r2, #23
 8000f84:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 846;
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <MX_LTDC_Init+0x130>)
 8000f88:	f240 324e 	movw	r2, #846	; 0x34e
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 503;
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <MX_LTDC_Init+0x130>)
 8000f90:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 868;
 8000f96:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <MX_LTDC_Init+0x130>)
 8000f98:	f44f 7259 	mov.w	r2, #868	; 0x364
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 525;
 8000f9e:	4b29      	ldr	r3, [pc, #164]	; (8001044 <MX_LTDC_Init+0x130>)
 8000fa0:	f240 220d 	movw	r2, #525	; 0x20d
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <MX_LTDC_Init+0x130>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <MX_LTDC_Init+0x130>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <MX_LTDC_Init+0x130>)
 8000fb8:	22ff      	movs	r2, #255	; 0xff
 8000fba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fbe:	4821      	ldr	r0, [pc, #132]	; (8001044 <MX_LTDC_Init+0x130>)
 8000fc0:	f005 fefa 	bl	8006db8 <HAL_LTDC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_LTDC_Init+0xba>
  {
    Error_Handler();
 8000fca:	f000 fb81 	bl	80016d0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000fd2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000fd6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000fdc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fe0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000fe6:	23ff      	movs	r3, #255	; 0xff
 8000fe8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ff2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x90000000;
 8000ff8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8000ffe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001004:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2200      	movs	r2, #0
 8001020:	4619      	mov	r1, r3
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <MX_LTDC_Init+0x130>)
 8001024:	f006 f850 	bl	80070c8 <HAL_LTDC_ConfigLayer>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_LTDC_Init+0x11e>
  {
    Error_Handler();
 800102e:	f000 fb4f 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3738      	adds	r7, #56	; 0x38
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	58021800 	.word	0x58021800
 8001040:	58021400 	.word	0x58021400
 8001044:	240001c0 	.word	0x240001c0
 8001048:	50001000 	.word	0x50001000

0800104c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0bc      	sub	sp, #240	; 0xf0
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001064:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001068:	22b4      	movs	r2, #180	; 0xb4
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00c ff3b 	bl	800dee8 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4aaa      	ldr	r2, [pc, #680]	; (8001320 <HAL_LTDC_MspInit+0x2d4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	f040 814d 	bne.w	8001318 <HAL_LTDC_MspInit+0x2cc>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800107e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001084:	2319      	movs	r3, #25
 8001086:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3N = 55;
 8001088:	2337      	movs	r3, #55	; 0x37
 800108a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800108c:	2302      	movs	r3, #2
 800108e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001090:	2302      	movs	r3, #2
 8001092:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001094:	2302      	movs	r3, #2
 8001096:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001098:	2300      	movs	r3, #0
 800109a:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800109c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a0:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010aa:	4618      	mov	r0, r3
 80010ac:	f008 fb9c 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 80010b6:	f000 fb0b 	bl	80016d0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010ba:	4b9a      	ldr	r3, [pc, #616]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 80010bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80010c0:	4a98      	ldr	r2, [pc, #608]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80010ca:	4b96      	ldr	r3, [pc, #600]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 80010cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b92      	ldr	r3, [pc, #584]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	4a91      	ldr	r2, [pc, #580]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e8:	4b8e      	ldr	r3, [pc, #568]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	623b      	str	r3, [r7, #32]
 80010f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	4b8b      	ldr	r3, [pc, #556]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	4a89      	ldr	r2, [pc, #548]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001106:	4b87      	ldr	r3, [pc, #540]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001114:	4b83      	ldr	r3, [pc, #524]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111a:	4a82      	ldr	r2, [pc, #520]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001120:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001124:	4b7f      	ldr	r3, [pc, #508]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001132:	4b7c      	ldr	r3, [pc, #496]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001138:	4a7a      	ldr	r2, [pc, #488]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 800113a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001142:	4b78      	ldr	r3, [pc, #480]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b74      	ldr	r3, [pc, #464]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001156:	4a73      	ldr	r2, [pc, #460]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001160:	4b70      	ldr	r3, [pc, #448]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4b6d      	ldr	r3, [pc, #436]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001174:	4a6b      	ldr	r2, [pc, #428]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117e:	4b69      	ldr	r3, [pc, #420]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800118c:	4b65      	ldr	r3, [pc, #404]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001192:	4a64      	ldr	r2, [pc, #400]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800119c:	4b61      	ldr	r3, [pc, #388]	; (8001324 <HAL_LTDC_MspInit+0x2d8>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> LTDC_B5
    PC5     ------> LTDC_DE
    PE11     ------> LTDC_G3
    PE15     ------> LTDC_R7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_10
 80011aa:	f648 7303 	movw	r3, #36611	; 0x8f03
 80011ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c4:	230e      	movs	r3, #14
 80011c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011ce:	4619      	mov	r1, r3
 80011d0:	4855      	ldr	r0, [pc, #340]	; (8001328 <HAL_LTDC_MspInit+0x2dc>)
 80011d2:	f004 fd1f 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_10;
 80011d6:	f240 4341 	movw	r3, #1089	; 0x441
 80011da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f0:	230e      	movs	r3, #14
 80011f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011fa:	4619      	mov	r1, r3
 80011fc:	484b      	ldr	r0, [pc, #300]	; (800132c <HAL_LTDC_MspInit+0x2e0>)
 80011fe:	f004 fd09 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_2;
 8001202:	f642 030c 	movw	r3, #10252	; 0x280c
 8001206:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800121c:	230e      	movs	r3, #14
 800121e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001222:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001226:	4619      	mov	r1, r3
 8001228:	4841      	ldr	r0, [pc, #260]	; (8001330 <HAL_LTDC_MspInit+0x2e4>)
 800122a:	f004 fcf3 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800122e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001248:	230e      	movs	r3, #14
 800124a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800124e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001252:	4619      	mov	r1, r3
 8001254:	4837      	ldr	r0, [pc, #220]	; (8001334 <HAL_LTDC_MspInit+0x2e8>)
 8001256:	f004 fcdd 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800125a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800125e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001274:	2309      	movs	r3, #9
 8001276:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800127e:	4619      	mov	r1, r3
 8001280:	482d      	ldr	r0, [pc, #180]	; (8001338 <HAL_LTDC_MspInit+0x2ec>)
 8001282:	f004 fcc7 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_5
 8001286:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800128a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012a0:	230e      	movs	r3, #14
 80012a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012aa:	4619      	mov	r1, r3
 80012ac:	4822      	ldr	r0, [pc, #136]	; (8001338 <HAL_LTDC_MspInit+0x2ec>)
 80012ae:	f004 fcb1 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5;
 80012b2:	23e0      	movs	r3, #224	; 0xe0
 80012b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012ca:	230e      	movs	r3, #14
 80012cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012d4:	4619      	mov	r1, r3
 80012d6:	4819      	ldr	r0, [pc, #100]	; (800133c <HAL_LTDC_MspInit+0x2f0>)
 80012d8:	f004 fc9c 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_15;
 80012dc:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80012e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012f6:	230e      	movs	r3, #14
 80012f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001300:	4619      	mov	r1, r3
 8001302:	480f      	ldr	r0, [pc, #60]	; (8001340 <HAL_LTDC_MspInit+0x2f4>)
 8001304:	f004 fc86 	bl	8005c14 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	2058      	movs	r0, #88	; 0x58
 800130e:	f001 f862 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001312:	2058      	movs	r0, #88	; 0x58
 8001314:	f001 f879 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001318:	bf00      	nop
 800131a:	37f0      	adds	r7, #240	; 0xf0
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	50001000 	.word	0x50001000
 8001324:	58024400 	.word	0x58024400
 8001328:	58020400 	.word	0x58020400
 800132c:	58020c00 	.word	0x58020c00
 8001330:	58021c00 	.word	0x58021c00
 8001334:	58021800 	.word	0x58021800
 8001338:	58020000 	.word	0x58020000
 800133c:	58020800 	.word	0x58020800
 8001340:	58021000 	.word	0x58021000

08001344 <HAL_LTDC_ReloadEventCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	LOG("HAL_LTDC_LineEventCallback\r\n");
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <HAL_LTDC_ReloadEventCallback+0x18>)
 800134e:	f00c f9cf 	bl	800d6f0 <LOG>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	0800e784 	.word	0x0800e784

08001360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001366:	f000 f985 	bl	8001674 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800136a:	4b67      	ldr	r3, [pc, #412]	; (8001508 <main+0x1a8>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d11b      	bne.n	80013ae <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001376:	f3bf 8f4f 	dsb	sy
}
 800137a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800137c:	f3bf 8f6f 	isb	sy
}
 8001380:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001382:	4b61      	ldr	r3, [pc, #388]	; (8001508 <main+0x1a8>)
 8001384:	2200      	movs	r2, #0
 8001386:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800138a:	f3bf 8f4f 	dsb	sy
}
 800138e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001390:	f3bf 8f6f 	isb	sy
}
 8001394:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001396:	4b5c      	ldr	r3, [pc, #368]	; (8001508 <main+0x1a8>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	4a5b      	ldr	r2, [pc, #364]	; (8001508 <main+0x1a8>)
 800139c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013a2:	f3bf 8f4f 	dsb	sy
}
 80013a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013a8:	f3bf 8f6f 	isb	sy
}
 80013ac:	e000      	b.n	80013b0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80013ae:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80013b0:	4b55      	ldr	r3, [pc, #340]	; (8001508 <main+0x1a8>)
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d138      	bne.n	800142e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80013bc:	4b52      	ldr	r3, [pc, #328]	; (8001508 <main+0x1a8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80013c4:	f3bf 8f4f 	dsb	sy
}
 80013c8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80013ca:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <main+0x1a8>)
 80013cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013d0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	0b5b      	lsrs	r3, r3, #13
 80013d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013da:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	08db      	lsrs	r3, r3, #3
 80013e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013e4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80013ee:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80013f4:	4944      	ldr	r1, [pc, #272]	; (8001508 <main+0x1a8>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1e5a      	subs	r2, r3, #1
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1ef      	bne.n	80013e6 <main+0x86>
    } while(sets-- != 0U);
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1e5a      	subs	r2, r3, #1
 800140a:	60ba      	str	r2, [r7, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1e5      	bne.n	80013dc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001410:	f3bf 8f4f 	dsb	sy
}
 8001414:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001416:	4b3c      	ldr	r3, [pc, #240]	; (8001508 <main+0x1a8>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	4a3b      	ldr	r2, [pc, #236]	; (8001508 <main+0x1a8>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001420:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001422:	f3bf 8f4f 	dsb	sy
}
 8001426:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001428:	f3bf 8f6f 	isb	sy
}
 800142c:	e000      	b.n	8001430 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800142e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001430:	f000 fe40 	bl	80020b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001434:	f000 f878 	bl	8001528 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001438:	f000 f8f0 	bl	800161c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143c:	f7ff fafe 	bl	8000a3c <MX_GPIO_Init>
  MX_DMA_Init();
 8001440:	f7ff fa80 	bl	8000944 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001444:	f000 fd5a 	bl	8001efc <MX_USART3_UART_Init>
  MX_OCTOSPI1_Init();
 8001448:	f000 f950 	bl	80016ec <MX_OCTOSPI1_Init>
  MX_LTDC_Init();
 800144c:	f7ff fd62 	bl	8000f14 <MX_LTDC_Init>
  MX_OCTOSPI2_Init();
 8001450:	f000 f9bc 	bl	80017cc <MX_OCTOSPI2_Init>
  MX_DMA2D_Init();
 8001454:	f7ff fa96 	bl	8000984 <MX_DMA2D_Init>
  MX_DCMI_Init();
 8001458:	f7ff f92e 	bl	80006b8 <MX_DCMI_Init>
  MX_I2C4_Init();
 800145c:	f7ff fc70 	bl	8000d40 <MX_I2C4_Init>
  MX_IWDG1_Init();
 8001460:	f7ff fd3a 	bl	8000ed8 <MX_IWDG1_Init>
  MX_TIM2_Init();
 8001464:	f000 fc7c 	bl	8001d60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001468:	2108      	movs	r1, #8
 800146a:	4828      	ldr	r0, [pc, #160]	; (800150c <main+0x1ac>)
 800146c:	f009 fd90 	bl	800af90 <HAL_TIM_PWM_Start>
  HAL_IWDG_Refresh(&hiwdg1);
 8001470:	4827      	ldr	r0, [pc, #156]	; (8001510 <main+0x1b0>)
 8001472:	f005 fc91 	bl	8006d98 <HAL_IWDG_Refresh>
  DLYB_OCTOSPI1_Calibration(1);		/*校验延迟模块*/
 8001476:	2001      	movs	r0, #1
 8001478:	f00b ff32 	bl	800d2e0 <DLYB_OCTOSPI1_Calibration>
  HAL_IWDG_Refresh(&hiwdg1);
 800147c:	4824      	ldr	r0, [pc, #144]	; (8001510 <main+0x1b0>)
 800147e:	f005 fc8b 	bl	8006d98 <HAL_IWDG_Refresh>
  Psram_Set_DQS(Half);				/*设置PSRAM的DQS信号参数*/
 8001482:	2000      	movs	r0, #0
 8001484:	f00c f8f6 	bl	800d674 <Psram_Set_DQS>
  HAL_Delay(100);
 8001488:	2064      	movs	r0, #100	; 0x64
 800148a:	f000 fea5 	bl	80021d8 <HAL_Delay>

  HAL_IWDG_Refresh(&hiwdg1);
 800148e:	4820      	ldr	r0, [pc, #128]	; (8001510 <main+0x1b0>)
 8001490:	f005 fc82 	bl	8006d98 <HAL_IWDG_Refresh>
  EnableMemMapped();
 8001494:	f00c f890 	bl	800d5b8 <EnableMemMapped>
  HAL_Delay(200);
 8001498:	20c8      	movs	r0, #200	; 0xc8
 800149a:	f000 fe9d 	bl	80021d8 <HAL_Delay>
  HAL_IWDG_Refresh(&hiwdg1);
 800149e:	481c      	ldr	r0, [pc, #112]	; (8001510 <main+0x1b0>)
 80014a0:	f005 fc7a 	bl	8006d98 <HAL_IWDG_Refresh>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

#if 1	/*启动OV2640传输数据*/
  OV2640_Init(&OV2640);
 80014a4:	481b      	ldr	r0, [pc, #108]	; (8001514 <main+0x1b4>)
 80014a6:	f00c f95b 	bl	800d760 <OV2640_Init>
  OV2640_ReadID(&(OV2640.ID));
 80014aa:	481b      	ldr	r0, [pc, #108]	; (8001518 <main+0x1b8>)
 80014ac:	f00c f990 	bl	800d7d0 <OV2640_ReadID>
  LOG("ID: %02X %02X \r\n", OV2640.ID.PIDH, OV2640.ID.PIDL);
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <main+0x1b4>)
 80014b2:	7c9b      	ldrb	r3, [r3, #18]
 80014b4:	4619      	mov	r1, r3
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <main+0x1b4>)
 80014b8:	7cdb      	ldrb	r3, [r3, #19]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4817      	ldr	r0, [pc, #92]	; (800151c <main+0x1bc>)
 80014be:	f00c f917 	bl	800d6f0 <LOG>
  OV2640_UXGAConfig();
 80014c2:	f00c fa05 	bl	800d8d0 <OV2640_UXGAConfig>
  OV2640_Start();
 80014c6:	f00c fa35 	bl	800d934 <OV2640_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d0:	4813      	ldr	r0, [pc, #76]	; (8001520 <main+0x1c0>)
 80014d2:	f004 fe49 	bl	8006168 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 80014d6:	2201      	movs	r2, #1
 80014d8:	2101      	movs	r1, #1
 80014da:	4812      	ldr	r0, [pc, #72]	; (8001524 <main+0x1c4>)
 80014dc:	f004 fe44 	bl	8006168 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80014e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e4:	f000 fe78 	bl	80021d8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ee:	480c      	ldr	r0, [pc, #48]	; (8001520 <main+0x1c0>)
 80014f0:	f004 fe3a 	bl	8006168 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2101      	movs	r1, #1
 80014f8:	480a      	ldr	r0, [pc, #40]	; (8001524 <main+0x1c4>)
 80014fa:	f004 fe35 	bl	8006168 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80014fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001502:	f000 fe69 	bl	80021d8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001506:	e7e0      	b.n	80014ca <main+0x16a>
 8001508:	e000ed00 	.word	0xe000ed00
 800150c:	24000328 	.word	0x24000328
 8001510:	240001b0 	.word	0x240001b0
 8001514:	20000010 	.word	0x20000010
 8001518:	20000020 	.word	0x20000020
 800151c:	0800e7a4 	.word	0x0800e7a4
 8001520:	58020800 	.word	0x58020800
 8001524:	58021400 	.word	0x58021400

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b09c      	sub	sp, #112	; 0x70
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	224c      	movs	r2, #76	; 0x4c
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f00c fcd6 	bl	800dee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2220      	movs	r2, #32
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f00c fcd0 	bl	800dee8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001548:	2004      	movs	r0, #4
 800154a:	f007 f9d9 	bl	8008900 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b30      	ldr	r3, [pc, #192]	; (8001614 <SystemClock_Config+0xec>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4a2f      	ldr	r2, [pc, #188]	; (8001614 <SystemClock_Config+0xec>)
 8001558:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800155c:	6193      	str	r3, [r2, #24]
 800155e:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <SystemClock_Config+0xec>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800156a:	bf00      	nop
 800156c:	4b29      	ldr	r3, [pc, #164]	; (8001614 <SystemClock_Config+0xec>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001578:	d1f8      	bne.n	800156c <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800157a:	4b27      	ldr	r3, [pc, #156]	; (8001618 <SystemClock_Config+0xf0>)
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	f023 0303 	bic.w	r3, r3, #3
 8001582:	4a25      	ldr	r2, [pc, #148]	; (8001618 <SystemClock_Config+0xf0>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800158a:	2309      	movs	r3, #9
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001594:	2301      	movs	r3, #1
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001598:	2302      	movs	r3, #2
 800159a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800159c:	2302      	movs	r3, #2
 800159e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80015a0:	2302      	movs	r3, #2
 80015a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80015a4:	232c      	movs	r3, #44	; 0x2c
 80015a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 11;
 80015ac:	230b      	movs	r3, #11
 80015ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015b0:	2302      	movs	r3, #2
 80015b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015b4:	230c      	movs	r3, #12
 80015b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4618      	mov	r0, r3
 80015c6:	f007 f9f5 	bl	80089b4 <HAL_RCC_OscConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80015d0:	f000 f87e 	bl	80016d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d4:	233f      	movs	r3, #63	; 0x3f
 80015d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d8:	2303      	movs	r3, #3
 80015da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80015e0:	2308      	movs	r3, #8
 80015e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015e4:	2340      	movs	r3, #64	; 0x40
 80015e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015e8:	2340      	movs	r3, #64	; 0x40
 80015ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015f2:	2340      	movs	r3, #64	; 0x40
 80015f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2103      	movs	r1, #3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f007 fd68 	bl	80090d0 <HAL_RCC_ClockConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001606:	f000 f863 	bl	80016d0 <Error_Handler>
  }
}
 800160a:	bf00      	nop
 800160c:	3770      	adds	r7, #112	; 0x70
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	58024800 	.word	0x58024800
 8001618:	58024400 	.word	0x58024400

0800161c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b0ae      	sub	sp, #184	; 0xb8
 8001620:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	22b4      	movs	r2, #180	; 0xb4
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f00c fc5d 	bl	800dee8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800162e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001632:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8001634:	2319      	movs	r3, #25
 8001636:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 266;
 8001638:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800163c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800163e:	2302      	movs	r3, #2
 8001640:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001642:	2302      	movs	r3, #2
 8001644:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8001646:	2301      	movs	r3, #1
 8001648:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800164e:	2320      	movs	r3, #32
 8001650:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8001656:	2320      	movs	r3, #32
 8001658:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4618      	mov	r0, r3
 800165e:	f008 f8c3 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8001668:	f000 f832 	bl	80016d0 <Error_Handler>
  }
}
 800166c:	bf00      	nop
 800166e:	37b8      	adds	r7, #184	; 0xb8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800167a:	463b      	mov	r3, r7
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001686:	f000 fedb 	bl	8002440 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800168a:	2301      	movs	r3, #1
 800168c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800168e:	2300      	movs	r3, #0
 8001690:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001692:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001696:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8001698:	2316      	movs	r3, #22
 800169a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800169c:	2300      	movs	r3, #0
 800169e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80016a4:	2303      	movs	r3, #3
 80016a6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016b8:	463b      	mov	r3, r7
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fef8 	bl	80024b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016c0:	2004      	movs	r0, #4
 80016c2:	f000 fed5 	bl	8002470 <HAL_MPU_Enable>

}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
}
 80016d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  LOG("err Handler\r\n");
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <Error_Handler+0x18>)
 80016da:	f00c f809 	bl	800d6f0 <LOG>
	  HAL_Delay(100);
 80016de:	2064      	movs	r0, #100	; 0x64
 80016e0:	f000 fd7a 	bl	80021d8 <HAL_Delay>
	  LOG("err Handler\r\n");
 80016e4:	e7f8      	b.n	80016d8 <Error_Handler+0x8>
 80016e6:	bf00      	nop
 80016e8:	0800e7b8 	.word	0x0800e7b8

080016ec <MX_OCTOSPI1_Init>:
OSPI_HandleTypeDef hospi1;
OSPI_HandleTypeDef hospi2;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80016f2:	463b      	mov	r3, r7
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8001702:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 8001704:	4a2e      	ldr	r2, [pc, #184]	; (80017c0 <MX_OCTOSPI1_Init+0xd4>)
 8001706:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8001708:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 800170a:	2204      	movs	r2, #4
 800170c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800170e:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8001714:	4b29      	ldr	r3, [pc, #164]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 8001716:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800171a:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 800171e:	2217      	movs	r2, #23
 8001720:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 8001724:	2201      	movs	r2, #1
 8001726:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800172e:	4b23      	ldr	r3, [pc, #140]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001734:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 8001736:	2200      	movs	r2, #0
 8001738:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 800173c:	2202      	movs	r2, #2
 800173e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 8001742:	2200      	movs	r2, #0
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 8001748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800174c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 8001750:	220a      	movs	r2, #10
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 1;
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 8001756:	2201      	movs	r2, #1
 8001758:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 800175c:	2200      	movs	r2, #0
 800175e:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 8001762:	2200      	movs	r2, #0
 8001764:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 8001768:	2200      	movs	r2, #0
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800176c:	4813      	ldr	r0, [pc, #76]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 800176e:	f005 fe83 	bl	8007478 <HAL_OSPI_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_OCTOSPI1_Init+0x90>
  {
    Error_Handler();
 8001778:	f7ff ffaa 	bl	80016d0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800177c:	2301      	movs	r3, #1
 800177e:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8001780:	2301      	movs	r3, #1
 8001782:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8001784:	2301      	movs	r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001788:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800178c:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <MX_OCTOSPI1_Init+0xd8>)
 8001790:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001792:	463b      	mov	r3, r7
 8001794:	f241 3288 	movw	r2, #5000	; 0x1388
 8001798:	4619      	mov	r1, r3
 800179a:	4808      	ldr	r0, [pc, #32]	; (80017bc <MX_OCTOSPI1_Init+0xd0>)
 800179c:	f006 f92e 	bl	80079fc <HAL_OSPIM_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_OCTOSPI1_Init+0xbe>
  {
    Error_Handler();
 80017a6:	f7ff ff93 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2108      	movs	r1, #8
 80017ae:	4806      	ldr	r0, [pc, #24]	; (80017c8 <MX_OCTOSPI1_Init+0xdc>)
 80017b0:	f004 fcda 	bl	8006168 <HAL_GPIO_WritePin>
  /* USER CODE END OCTOSPI1_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	24000268 	.word	0x24000268
 80017c0:	52005000 	.word	0x52005000
 80017c4:	01000001 	.word	0x01000001
 80017c8:	58021800 	.word	0x58021800

080017cc <MX_OCTOSPI2_Init>:
/* OCTOSPI2 init function */
void MX_OCTOSPI2_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80017d2:	463b      	mov	r3, r7
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
 80017e0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  hospi2.Instance = OCTOSPI2;
 80017e2:	4b28      	ldr	r3, [pc, #160]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 80017e4:	4a28      	ldr	r2, [pc, #160]	; (8001888 <MX_OCTOSPI2_Init+0xbc>)
 80017e6:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 80017ea:	2204      	movs	r2, #4
 80017ec:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 24;
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 80017fc:	2218      	movs	r2, #24
 80017fe:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 8001802:	2201      	movs	r2, #1
 8001804:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 2;
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 800181a:	2202      	movs	r2, #2
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 8001820:	2200      	movs	r2, #0
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 8001826:	2200      	movs	r2, #0
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 800182c:	2200      	movs	r2, #0
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.ClkChipSelectHighTime = 0;
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 8001832:	2200      	movs	r2, #0
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001836:	4b13      	ldr	r3, [pc, #76]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 8001838:	2208      	movs	r2, #8
 800183a:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.MaxTran = 0;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 800183e:	2200      	movs	r2, #0
 8001840:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi2.Init.Refresh = 0;
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 8001844:	2200      	movs	r2, #0
 8001846:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001848:	480e      	ldr	r0, [pc, #56]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 800184a:	f005 fe15 	bl	8007478 <HAL_OSPI_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_OCTOSPI2_Init+0x8c>
  {
    Error_Handler();
 8001854:	f7ff ff3c 	bl	80016d0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8001858:	2302      	movs	r3, #2
 800185a:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 2;
 800185c:	2302      	movs	r3, #2
 800185e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <MX_OCTOSPI2_Init+0xc0>)
 8001862:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_OCTOSPI2_Init+0xb8>)
 800186e:	f006 f8c5 	bl	80079fc <HAL_OSPIM_Config>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_OCTOSPI2_Init+0xb0>
  {
    Error_Handler();
 8001878:	f7ff ff2a 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	240002c8 	.word	0x240002c8
 8001888:	5200a000 	.word	0x5200a000
 800188c:	01000002 	.word	0x01000002

08001890 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b090      	sub	sp, #64	; 0x40
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(ospiHandle->Instance==OCTOSPI1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a94      	ldr	r2, [pc, #592]	; (8001b00 <HAL_OSPI_MspInit+0x270>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	f040 80be 	bne.w	8001a30 <HAL_OSPI_MspInit+0x1a0>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80018b4:	4b93      	ldr	r3, [pc, #588]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 80018b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018ba:	4a92      	ldr	r2, [pc, #584]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018c4:	4b8f      	ldr	r3, [pc, #572]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 80018c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d2:	4b8c      	ldr	r3, [pc, #560]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d8:	4a8a      	ldr	r2, [pc, #552]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 80018da:	f043 0308 	orr.w	r3, r3, #8
 80018de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e2:	4b88      	ldr	r3, [pc, #544]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 80018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018f0:	4b84      	ldr	r3, [pc, #528]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 80018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f6:	4a83      	ldr	r2, [pc, #524]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 80018f8:	f043 0320 	orr.w	r3, r3, #32
 80018fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001900:	4b80      	ldr	r3, [pc, #512]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001906:	f003 0320 	and.w	r3, r3, #32
 800190a:	623b      	str	r3, [r7, #32]
 800190c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800190e:	4b7d      	ldr	r3, [pc, #500]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001914:	4a7b      	ldr	r2, [pc, #492]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800191a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191e:	4b79      	ldr	r3, [pc, #484]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800192c:	4b75      	ldr	r3, [pc, #468]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 800192e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001932:	4a74      	ldr	r2, [pc, #464]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001934:	f043 0310 	orr.w	r3, r3, #16
 8001938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800193c:	4b71      	ldr	r3, [pc, #452]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 800193e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	4b6e      	ldr	r3, [pc, #440]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 800194c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001950:	4a6c      	ldr	r2, [pc, #432]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001952:	f043 0302 	orr.w	r3, r3, #2
 8001956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800195a:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 800195c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	697b      	ldr	r3, [r7, #20]
    PF10     ------> OCTOSPIM_P1_CLK
    PF8     ------> OCTOSPIM_P1_IO0
    PE9     ------> OCTOSPIM_P1_IO6
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8001968:	23b0      	movs	r3, #176	; 0xb0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001978:	230a      	movs	r3, #10
 800197a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800197c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001980:	4619      	mov	r1, r3
 8001982:	4861      	ldr	r0, [pc, #388]	; (8001b08 <HAL_OSPI_MspInit+0x278>)
 8001984:	f004 f946 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_8;
 8001988:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800199a:	230a      	movs	r3, #10
 800199c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800199e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a2:	4619      	mov	r1, r3
 80019a4:	4859      	ldr	r0, [pc, #356]	; (8001b0c <HAL_OSPI_MspInit+0x27c>)
 80019a6:	f004 f935 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019aa:	2340      	movs	r3, #64	; 0x40
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80019ba:	230a      	movs	r3, #10
 80019bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c2:	4619      	mov	r1, r3
 80019c4:	4852      	ldr	r0, [pc, #328]	; (8001b10 <HAL_OSPI_MspInit+0x280>)
 80019c6:	f004 f925 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80019dc:	2309      	movs	r3, #9
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	4619      	mov	r1, r3
 80019e6:	4849      	ldr	r0, [pc, #292]	; (8001b0c <HAL_OSPI_MspInit+0x27c>)
 80019e8:	f004 f914 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80019fe:	230a      	movs	r3, #10
 8001a00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a06:	4619      	mov	r1, r3
 8001a08:	4842      	ldr	r0, [pc, #264]	; (8001b14 <HAL_OSPI_MspInit+0x284>)
 8001a0a:	f004 f903 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001a1e:	230a      	movs	r3, #10
 8001a20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a26:	4619      	mov	r1, r3
 8001a28:	483b      	ldr	r0, [pc, #236]	; (8001b18 <HAL_OSPI_MspInit+0x288>)
 8001a2a:	f004 f8f3 	bl	8005c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }
}
 8001a2e:	e063      	b.n	8001af8 <HAL_OSPI_MspInit+0x268>
  else if(ospiHandle->Instance==OCTOSPI2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a39      	ldr	r2, [pc, #228]	; (8001b1c <HAL_OSPI_MspInit+0x28c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d15e      	bne.n	8001af8 <HAL_OSPI_MspInit+0x268>
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001a3a:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001a3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a40:	4a30      	ldr	r2, [pc, #192]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001a42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a46:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001a4a:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001a4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a58:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5e:	4a29      	ldr	r2, [pc, #164]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a68:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7c:	4a21      	ldr	r2, [pc, #132]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001a7e:	f043 0320 	orr.w	r3, r3, #32
 8001a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <HAL_OSPI_MspInit+0x274>)
 8001a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8c:	f003 0320 	and.w	r3, r3, #32
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001a94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4817      	ldr	r0, [pc, #92]	; (8001b10 <HAL_OSPI_MspInit+0x280>)
 8001ab2:	f004 f8af 	bl	8005c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1;
 8001ab6:	f640 0303 	movw	r3, #2051	; 0x803
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001ac8:	2309      	movs	r3, #9
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480f      	ldr	r0, [pc, #60]	; (8001b10 <HAL_OSPI_MspInit+0x280>)
 8001ad4:	f004 f89e 	bl	8005c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ad8:	2310      	movs	r3, #16
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001ae8:	2309      	movs	r3, #9
 8001aea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <HAL_OSPI_MspInit+0x27c>)
 8001af4:	f004 f88e 	bl	8005c14 <HAL_GPIO_Init>
}
 8001af8:	bf00      	nop
 8001afa:	3740      	adds	r7, #64	; 0x40
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	52005000 	.word	0x52005000
 8001b04:	58024400 	.word	0x58024400
 8001b08:	58020c00 	.word	0x58020c00
 8001b0c:	58021400 	.word	0x58021400
 8001b10:	58021800 	.word	0x58021800
 8001b14:	58021000 	.word	0x58021000
 8001b18:	58020400 	.word	0x58020400
 8001b1c:	5200a000 	.word	0x5200a000

08001b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_MspInit+0x30>)
 8001b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b2c:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <HAL_MspInit+0x30>)
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_MspInit+0x30>)
 8001b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	58024400 	.word	0x58024400

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <NMI_Handler+0x4>
	...

08001b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG("HardFault_Handler\r\n");
 8001b60:	4801      	ldr	r0, [pc, #4]	; (8001b68 <HardFault_Handler+0xc>)
 8001b62:	f00b fdc5 	bl	800d6f0 <LOG>
 8001b66:	e7fb      	b.n	8001b60 <HardFault_Handler+0x4>
 8001b68:	0800e7c8 	.word	0x0800e7c8

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG("MemManage_Handler\r\n");
 8001b70:	4801      	ldr	r0, [pc, #4]	; (8001b78 <MemManage_Handler+0xc>)
 8001b72:	f00b fdbd 	bl	800d6f0 <LOG>
 8001b76:	e7fb      	b.n	8001b70 <MemManage_Handler+0x4>
 8001b78:	0800e7dc 	.word	0x0800e7dc

08001b7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <BusFault_Handler+0x4>

08001b82 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <UsageFault_Handler+0x4>

08001b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb6:	f000 faef 	bl	8002198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi_pssi);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <DMA2_Stream1_IRQHandler+0x10>)
 8001bc6:	f001 ff4b 	bl	8003a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	24000084 	.word	0x24000084

08001bd4 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <DCMI_PSSI_IRQHandler+0x10>)
 8001bda:	f000 fde9 	bl	80027b0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	24000034 	.word	0x24000034

08001be8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <LTDC_IRQHandler+0x10>)
 8001bee:	f005 f9b3 	bl	8006f58 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	240001c0 	.word	0x240001c0

08001bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <_sbrk+0x5c>)
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <_sbrk+0x60>)
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <_sbrk+0x64>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <_sbrk+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d207      	bcs.n	8001c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c2c:	f00c f924 	bl	800de78 <__errno>
 8001c30:	4603      	mov	r3, r0
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e009      	b.n	8001c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <_sbrk+0x64>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20020000 	.word	0x20020000
 8001c5c:	00000400 	.word	0x00000400
 8001c60:	2400001c 	.word	0x2400001c
 8001c64:	200000a0 	.word	0x200000a0

08001c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c6c:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <SystemInit+0xd8>)
 8001c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c72:	4a33      	ldr	r2, [pc, #204]	; (8001d40 <SystemInit+0xd8>)
 8001c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c7c:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <SystemInit+0xdc>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	2b06      	cmp	r3, #6
 8001c86:	d807      	bhi.n	8001c98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c88:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <SystemInit+0xdc>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 030f 	bic.w	r3, r3, #15
 8001c90:	4a2c      	ldr	r2, [pc, #176]	; (8001d44 <SystemInit+0xdc>)
 8001c92:	f043 0307 	orr.w	r3, r3, #7
 8001c96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <SystemInit+0xe0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a2a      	ldr	r2, [pc, #168]	; (8001d48 <SystemInit+0xe0>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ca4:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <SystemInit+0xe0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001caa:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <SystemInit+0xe0>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4926      	ldr	r1, [pc, #152]	; (8001d48 <SystemInit+0xe0>)
 8001cb0:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <SystemInit+0xe4>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cb6:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <SystemInit+0xdc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <SystemInit+0xdc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 030f 	bic.w	r3, r3, #15
 8001cca:	4a1e      	ldr	r2, [pc, #120]	; (8001d44 <SystemInit+0xdc>)
 8001ccc:	f043 0307 	orr.w	r3, r3, #7
 8001cd0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <SystemInit+0xe0>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <SystemInit+0xe0>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <SystemInit+0xe0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <SystemInit+0xe0>)
 8001ce6:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <SystemInit+0xe8>)
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <SystemInit+0xe0>)
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <SystemInit+0xec>)
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <SystemInit+0xe0>)
 8001cf2:	4a19      	ldr	r2, [pc, #100]	; (8001d58 <SystemInit+0xf0>)
 8001cf4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <SystemInit+0xe0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <SystemInit+0xe0>)
 8001cfe:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <SystemInit+0xf0>)
 8001d00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <SystemInit+0xe0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <SystemInit+0xe0>)
 8001d0a:	4a13      	ldr	r2, [pc, #76]	; (8001d58 <SystemInit+0xf0>)
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <SystemInit+0xe0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <SystemInit+0xe0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <SystemInit+0xe0>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <SystemInit+0xe0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <SystemInit+0xf4>)
 8001d28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d2c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <SystemInit+0xd8>)
 8001d30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d34:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00
 8001d44:	52002000 	.word	0x52002000
 8001d48:	58024400 	.word	0x58024400
 8001d4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d50:	02020200 	.word	0x02020200
 8001d54:	01ff0000 	.word	0x01ff0000
 8001d58:	01010280 	.word	0x01010280
 8001d5c:	52004000 	.word	0x52004000

08001d60 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08e      	sub	sp, #56	; 0x38
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d80:	463b      	mov	r3, r7
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
 8001d8e:	615a      	str	r2, [r3, #20]
 8001d90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d92:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <MX_TIM2_Init+0xe8>)
 8001d94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <MX_TIM2_Init+0xe8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <MX_TIM2_Init+0xe8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001da6:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <MX_TIM2_Init+0xe8>)
 8001da8:	220a      	movs	r2, #10
 8001daa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dac:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <MX_TIM2_Init+0xe8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <MX_TIM2_Init+0xe8>)
 8001db4:	2280      	movs	r2, #128	; 0x80
 8001db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001db8:	4823      	ldr	r0, [pc, #140]	; (8001e48 <MX_TIM2_Init+0xe8>)
 8001dba:	f009 f831 	bl	800ae20 <HAL_TIM_Base_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001dc4:	f7ff fc84 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	481c      	ldr	r0, [pc, #112]	; (8001e48 <MX_TIM2_Init+0xe8>)
 8001dd6:	f009 fb07 	bl	800b3e8 <HAL_TIM_ConfigClockSource>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001de0:	f7ff fc76 	bl	80016d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001de4:	4818      	ldr	r0, [pc, #96]	; (8001e48 <MX_TIM2_Init+0xe8>)
 8001de6:	f009 f872 	bl	800aece <HAL_TIM_PWM_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001df0:	f7ff fc6e 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	4811      	ldr	r0, [pc, #68]	; (8001e48 <MX_TIM2_Init+0xe8>)
 8001e04:	f00a f81c 	bl	800be40 <HAL_TIMEx_MasterConfigSynchronization>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e0e:	f7ff fc5f 	bl	80016d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e12:	2360      	movs	r3, #96	; 0x60
 8001e14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 8001e16:	2305      	movs	r3, #5
 8001e18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e22:	463b      	mov	r3, r7
 8001e24:	2208      	movs	r2, #8
 8001e26:	4619      	mov	r1, r3
 8001e28:	4807      	ldr	r0, [pc, #28]	; (8001e48 <MX_TIM2_Init+0xe8>)
 8001e2a:	f009 f9cd 	bl	800b1c8 <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e34:	f7ff fc4c 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e38:	4803      	ldr	r0, [pc, #12]	; (8001e48 <MX_TIM2_Init+0xe8>)
 8001e3a:	f000 f827 	bl	8001e8c <HAL_TIM_MspPostInit>

}
 8001e3e:	bf00      	nop
 8001e40:	3738      	adds	r7, #56	; 0x38
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	24000328 	.word	0x24000328

08001e4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_TIM_Base_MspInit+0x3c>)
 8001e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e64:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <HAL_TIM_Base_MspInit+0x3c>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_TIM_Base_MspInit+0x3c>)
 8001e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	58024400 	.word	0x58024400

08001e8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d11e      	bne.n	8001eec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_TIM_MspPostInit+0x68>)
 8001eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb4:	4a0f      	ldr	r2, [pc, #60]	; (8001ef4 <HAL_TIM_MspPostInit+0x68>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_TIM_MspPostInit+0x68>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001edc:	2301      	movs	r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4804      	ldr	r0, [pc, #16]	; (8001ef8 <HAL_TIM_MspPostInit+0x6c>)
 8001ee8:	f003 fe94 	bl	8005c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001eec:	bf00      	nop
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	58020000 	.word	0x58020000

08001efc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f02:	4a23      	ldr	r2, [pc, #140]	; (8001f90 <MX_USART3_UART_Init+0x94>)
 8001f04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f22:	220c      	movs	r2, #12
 8001f24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f44:	4811      	ldr	r0, [pc, #68]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f46:	f00a f817 	bl	800bf78 <HAL_UART_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f50:	f7ff fbbe 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f54:	2100      	movs	r1, #0
 8001f56:	480d      	ldr	r0, [pc, #52]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f58:	f00b f8f8 	bl	800d14c <HAL_UARTEx_SetTxFifoThreshold>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f62:	f7ff fbb5 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f66:	2100      	movs	r1, #0
 8001f68:	4808      	ldr	r0, [pc, #32]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f6a:	f00b f92d 	bl	800d1c8 <HAL_UARTEx_SetRxFifoThreshold>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f74:	f7ff fbac 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f78:	4804      	ldr	r0, [pc, #16]	; (8001f8c <MX_USART3_UART_Init+0x90>)
 8001f7a:	f00b f8ae 	bl	800d0da <HAL_UARTEx_DisableFifoMode>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f84:	f7ff fba4 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	24000374 	.word	0x24000374
 8001f90:	40004800 	.word	0x40004800

08001f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b0b6      	sub	sp, #216	; 0xd8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	22b4      	movs	r2, #180	; 0xb4
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00b ff97 	bl	800dee8 <memset>
  if(uartHandle->Instance==USART3)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a25      	ldr	r2, [pc, #148]	; (8002054 <HAL_UART_MspInit+0xc0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d142      	bne.n	800204a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f007 fc08 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001fde:	f7ff fb77 	bl	80016d0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_UART_MspInit+0xc4>)
 8001fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fe8:	4a1b      	ldr	r2, [pc, #108]	; (8002058 <HAL_UART_MspInit+0xc4>)
 8001fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_UART_MspInit+0xc4>)
 8001ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002000:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_UART_MspInit+0xc4>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002006:	4a14      	ldr	r2, [pc, #80]	; (8002058 <HAL_UART_MspInit+0xc4>)
 8002008:	f043 0308 	orr.w	r3, r3, #8
 800200c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_UART_MspInit+0xc4>)
 8002012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD9     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800201e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002022:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002038:	2307      	movs	r3, #7
 800203a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002042:	4619      	mov	r1, r3
 8002044:	4805      	ldr	r0, [pc, #20]	; (800205c <HAL_UART_MspInit+0xc8>)
 8002046:	f003 fde5 	bl	8005c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800204a:	bf00      	nop
 800204c:	37d8      	adds	r7, #216	; 0xd8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40004800 	.word	0x40004800
 8002058:	58024400 	.word	0x58024400
 800205c:	58020c00 	.word	0x58020c00

08002060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002098 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002064:	f7ff fe00 	bl	8001c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800206a:	490d      	ldr	r1, [pc, #52]	; (80020a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002070:	e002      	b.n	8002078 <LoopCopyDataInit>

08002072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002076:	3304      	adds	r3, #4

08002078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800207c:	d3f9      	bcc.n	8002072 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002080:	4c0a      	ldr	r4, [pc, #40]	; (80020ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002084:	e001      	b.n	800208a <LoopFillZerobss>

08002086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002088:	3204      	adds	r2, #4

0800208a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800208c:	d3fb      	bcc.n	8002086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800208e:	f00b fef9 	bl	800de84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002092:	f7ff f965 	bl	8001360 <main>
  bx  lr
 8002096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002098:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800209c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80020a4:	08013268 	.word	0x08013268
  ldr r2, =_sbss
 80020a8:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 80020ac:	24000418 	.word	0x24000418

080020b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b0:	e7fe      	b.n	80020b0 <ADC3_IRQHandler>
	...

080020b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ba:	2003      	movs	r0, #3
 80020bc:	f000 f980 	bl	80023c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020c0:	f007 f9bc 	bl	800943c <HAL_RCC_GetSysClockFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_Init+0x68>)
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	4913      	ldr	r1, [pc, #76]	; (8002120 <HAL_Init+0x6c>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
 80020dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_Init+0x68>)
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_Init+0x6c>)
 80020e8:	5cd3      	ldrb	r3, [r2, r3]
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
 80020f4:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <HAL_Init+0x70>)
 80020f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020f8:	4a0b      	ldr	r2, [pc, #44]	; (8002128 <HAL_Init+0x74>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020fe:	2000      	movs	r0, #0
 8002100:	f000 f814 	bl	800212c <HAL_InitTick>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e002      	b.n	8002114 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800210e:	f7ff fd07 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	58024400 	.word	0x58024400
 8002120:	0800e888 	.word	0x0800e888
 8002124:	20000030 	.word	0x20000030
 8002128:	2000002c 	.word	0x2000002c

0800212c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_InitTick+0x60>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e021      	b.n	8002184 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_InitTick+0x64>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_InitTick+0x60>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f965 	bl	8002426 <HAL_SYSTICK_Config>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e00e      	b.n	8002184 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b0f      	cmp	r3, #15
 800216a:	d80a      	bhi.n	8002182 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216c:	2200      	movs	r2, #0
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f000 f92f 	bl	80023d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002178:	4a06      	ldr	r2, [pc, #24]	; (8002194 <HAL_InitTick+0x68>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000038 	.word	0x20000038
 8002190:	2000002c 	.word	0x2000002c
 8002194:	20000034 	.word	0x20000034

08002198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_IncTick+0x20>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_IncTick+0x24>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_IncTick+0x24>)
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000038 	.word	0x20000038
 80021bc:	24000404 	.word	0x24000404

080021c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return uwTick;
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <HAL_GetTick+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	24000404 	.word	0x24000404

080021d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e0:	f7ff ffee 	bl	80021c0 <HAL_GetTick>
 80021e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d005      	beq.n	80021fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <HAL_Delay+0x44>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021fe:	bf00      	nop
 8002200:	f7ff ffde 	bl	80021c0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	429a      	cmp	r2, r3
 800220e:	d8f7      	bhi.n	8002200 <HAL_Delay+0x28>
  {
  }
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000038 	.word	0x20000038

08002220 <__NVIC_SetPriorityGrouping>:
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <__NVIC_SetPriorityGrouping+0x40>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	4313      	orrs	r3, r2
 800224c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224e:	4a04      	ldr	r2, [pc, #16]	; (8002260 <__NVIC_SetPriorityGrouping+0x40>)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	60d3      	str	r3, [r2, #12]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00
 8002264:	05fa0000 	.word	0x05fa0000

08002268 <__NVIC_GetPriorityGrouping>:
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <__NVIC_GetPriorityGrouping+0x18>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 0307 	and.w	r3, r3, #7
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_EnableIRQ>:
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800228e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002292:	2b00      	cmp	r3, #0
 8002294:	db0b      	blt.n	80022ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	4907      	ldr	r1, [pc, #28]	; (80022bc <__NVIC_EnableIRQ+0x38>)
 800229e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2001      	movs	r0, #1
 80022a6:	fa00 f202 	lsl.w	r2, r0, r2
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000e100 	.word	0xe000e100

080022c0 <__NVIC_SetPriority>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	db0a      	blt.n	80022ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	490c      	ldr	r1, [pc, #48]	; (800230c <__NVIC_SetPriority+0x4c>)
 80022da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022de:	0112      	lsls	r2, r2, #4
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	440b      	add	r3, r1
 80022e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022e8:	e00a      	b.n	8002300 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4908      	ldr	r1, [pc, #32]	; (8002310 <__NVIC_SetPriority+0x50>)
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	3b04      	subs	r3, #4
 80022f8:	0112      	lsls	r2, r2, #4
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	440b      	add	r3, r1
 80022fe:	761a      	strb	r2, [r3, #24]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000e100 	.word	0xe000e100
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <NVIC_EncodePriority>:
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f1c3 0307 	rsb	r3, r3, #7
 800232e:	2b04      	cmp	r3, #4
 8002330:	bf28      	it	cs
 8002332:	2304      	movcs	r3, #4
 8002334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3304      	adds	r3, #4
 800233a:	2b06      	cmp	r3, #6
 800233c:	d902      	bls.n	8002344 <NVIC_EncodePriority+0x30>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3b03      	subs	r3, #3
 8002342:	e000      	b.n	8002346 <NVIC_EncodePriority+0x32>
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	f04f 32ff 	mov.w	r2, #4294967295
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	401a      	ands	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800235c:	f04f 31ff 	mov.w	r1, #4294967295
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43d9      	mvns	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	4313      	orrs	r3, r2
}
 800236e:	4618      	mov	r0, r3
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800238c:	d301      	bcc.n	8002392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238e:	2301      	movs	r3, #1
 8002390:	e00f      	b.n	80023b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <SysTick_Config+0x40>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239a:	210f      	movs	r1, #15
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	f7ff ff8e 	bl	80022c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <SysTick_Config+0x40>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <SysTick_Config+0x40>)
 80023ac:	2207      	movs	r2, #7
 80023ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	e000e010 	.word	0xe000e010

080023c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff29 	bl	8002220 <__NVIC_SetPriorityGrouping>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023e4:	f7ff ff40 	bl	8002268 <__NVIC_GetPriorityGrouping>
 80023e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	6978      	ldr	r0, [r7, #20]
 80023f0:	f7ff ff90 	bl	8002314 <NVIC_EncodePriority>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff5f 	bl	80022c0 <__NVIC_SetPriority>
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff33 	bl	8002284 <__NVIC_EnableIRQ>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ffa4 	bl	800237c <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002444:	f3bf 8f5f 	dmb	sy
}
 8002448:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <HAL_MPU_Disable+0x28>)
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	4a06      	ldr	r2, [pc, #24]	; (8002468 <HAL_MPU_Disable+0x28>)
 8002450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002454:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_MPU_Disable+0x2c>)
 8002458:	2200      	movs	r2, #0
 800245a:	605a      	str	r2, [r3, #4]
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00
 800246c:	e000ed90 	.word	0xe000ed90

08002470 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002478:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <HAL_MPU_Enable+0x38>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_MPU_Enable+0x3c>)
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_MPU_Enable+0x3c>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800248e:	f3bf 8f4f 	dsb	sy
}
 8002492:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002494:	f3bf 8f6f 	isb	sy
}
 8002498:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000ed90 	.word	0xe000ed90
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	785a      	ldrb	r2, [r3, #1]
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_MPU_ConfigRegion+0x84>)
 80024be:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d029      	beq.n	800251c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80024c8:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <HAL_MPU_ConfigRegion+0x84>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7b1b      	ldrb	r3, [r3, #12]
 80024d4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7adb      	ldrb	r3, [r3, #11]
 80024da:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7a9b      	ldrb	r3, [r3, #10]
 80024e2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7b5b      	ldrb	r3, [r3, #13]
 80024ea:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7b9b      	ldrb	r3, [r3, #14]
 80024f2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7bdb      	ldrb	r3, [r3, #15]
 80024fa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7a5b      	ldrb	r3, [r3, #9]
 8002502:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002504:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7a1b      	ldrb	r3, [r3, #8]
 800250a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800250c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002514:	4a07      	ldr	r2, [pc, #28]	; (8002534 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002516:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002518:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800251a:	e005      	b.n	8002528 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_MPU_ConfigRegion+0x84>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <HAL_MPU_ConfigRegion+0x84>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed90 	.word	0xe000ed90

08002538 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e069      	b.n	800261e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7fe f8e2 	bl	8000720 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6819      	ldr	r1, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_DCMI_Init+0xf0>)
 800257e:	400b      	ands	r3, r1
 8002580:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6819      	ldr	r1, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002596:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80025a2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80025ae:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80025ba:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80025c6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d112      	bne.n	80025fe <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7f1b      	ldrb	r3, [r3, #28]
 80025dc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	7f5b      	ldrb	r3, [r3, #29]
 80025e2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80025e4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	7f9b      	ldrb	r3, [r3, #30]
 80025ea:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80025ec:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7fdb      	ldrb	r3, [r3, #31]
 80025f4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80025fa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80025fc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 021e 	orr.w	r2, r2, #30
 800260c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	ffe0f007 	.word	0xffe0f007

0800262c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_DCMI_Start_DMA+0x1c>
 8002644:	2302      	movs	r3, #2
 8002646:	e0ab      	b.n	80027a0 <HAL_DCMI_Start_DMA+0x174>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002666:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0202 	bic.w	r2, r2, #2
 8002676:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268c:	4a46      	ldr	r2, [pc, #280]	; (80027a8 <HAL_DCMI_Start_DMA+0x17c>)
 800268e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002694:	4a45      	ldr	r2, [pc, #276]	; (80027ac <HAL_DCMI_Start_DMA+0x180>)
 8002696:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	2200      	movs	r2, #0
 800269e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026be:	d219      	bcs.n	80026f4 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	3328      	adds	r3, #40	; 0x28
 80026ca:	4619      	mov	r1, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	f000 fd18 	bl	8003104 <HAL_DMA_Start_IT>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d055      	beq.n	8002786 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2240      	movs	r2, #64	; 0x40
 80026de:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e055      	b.n	80027a0 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f8:	4a2b      	ldr	r2, [pc, #172]	; (80027a8 <HAL_DCMI_Start_DMA+0x17c>)
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800270e:	e009      	b.n	8002724 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	085a      	lsrs	r2, r3, #1
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	005a      	lsls	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272c:	d2f0      	bcs.n	8002710 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	1e9a      	subs	r2, r3, #2
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3328      	adds	r3, #40	; 0x28
 8002756:	4619      	mov	r1, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	f002 fda7 	bl	80052b4 <HAL_DMAEx_MultiBufferStart_IT>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00c      	beq.n	8002786 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2240      	movs	r2, #64	; 0x40
 8002770:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00c      	b.n	80027a0 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	080028f1 	.word	0x080028f1
 80027ac:	08002a17 	.word	0x08002a17

080027b0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2204      	movs	r2, #4
 80027d0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	f043 0202 	orr.w	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2204      	movs	r2, #4
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ea:	4a31      	ldr	r2, [pc, #196]	; (80028b0 <HAL_DCMI_IRQHandler+0x100>)
 80027ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 fef0 	bl	80035d8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d016      	beq.n	8002830 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2202      	movs	r2, #2
 8002808:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2204      	movs	r2, #4
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002822:	4a23      	ldr	r2, [pc, #140]	; (80028b0 <HAL_DCMI_IRQHandler+0x100>)
 8002824:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fed4 	bl	80035d8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d006      	beq.n	8002848 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2210      	movs	r2, #16
 8002840:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f840 	bl	80028c8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2208      	movs	r2, #8
 8002858:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f83e 	bl	80028dc <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01d      	beq.n	80028a6 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b02      	cmp	r3, #2
 8002876:	d107      	bne.n	8002888 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 021e 	bic.w	r2, r2, #30
 8002886:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2201      	movs	r2, #1
 800289e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f00b f8e3 	bl	800da6c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	08002a17 	.word	0x08002a17

080028b4 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fc:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	2b00      	cmp	r3, #0
 8002904:	d043      	beq.n	800298e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002912:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d118      	bne.n	8002952 <DCMI_DMAXferCplt+0x62>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d015      	beq.n	8002952 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	00da      	lsls	r2, r3, #3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	4413      	add	r3, r2
 800293e:	2200      	movs	r2, #0
 8002940:	4619      	mov	r1, r3
 8002942:	f003 f815 	bl	8005970 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	1e5a      	subs	r2, r3, #1
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	639a      	str	r2, [r3, #56]	; 0x38
 8002950:	e044      	b.n	80029dc <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d13c      	bne.n	80029dc <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	00da      	lsls	r2, r3, #3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4413      	add	r3, r2
 800297a:	2201      	movs	r2, #1
 800297c:	4619      	mov	r1, r3
 800297e:	f002 fff7 	bl	8005970 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	639a      	str	r2, [r3, #56]	; 0x38
 800298c:	e026      	b.n	80029dc <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	e017      	b.n	80029dc <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10f      	bne.n	80029dc <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	0099      	lsls	r1, r3, #2
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	440a      	add	r2, r1
 80029d2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d112      	bne.n	8002a0e <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d103      	bne.n	8002a0e <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d009      	beq.n	8002a42 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f7ff ff36 	bl	80028b4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff fbb2 	bl	80021c0 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e314      	b.n	8003092 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a66      	ldr	r2, [pc, #408]	; (8002c08 <HAL_DMA_Init+0x1b8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d04a      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a65      	ldr	r2, [pc, #404]	; (8002c0c <HAL_DMA_Init+0x1bc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d045      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a63      	ldr	r2, [pc, #396]	; (8002c10 <HAL_DMA_Init+0x1c0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d040      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a62      	ldr	r2, [pc, #392]	; (8002c14 <HAL_DMA_Init+0x1c4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d03b      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a60      	ldr	r2, [pc, #384]	; (8002c18 <HAL_DMA_Init+0x1c8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d036      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a5f      	ldr	r2, [pc, #380]	; (8002c1c <HAL_DMA_Init+0x1cc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d031      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5d      	ldr	r2, [pc, #372]	; (8002c20 <HAL_DMA_Init+0x1d0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d02c      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5c      	ldr	r2, [pc, #368]	; (8002c24 <HAL_DMA_Init+0x1d4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d027      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5a      	ldr	r2, [pc, #360]	; (8002c28 <HAL_DMA_Init+0x1d8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d022      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a59      	ldr	r2, [pc, #356]	; (8002c2c <HAL_DMA_Init+0x1dc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d01d      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a57      	ldr	r2, [pc, #348]	; (8002c30 <HAL_DMA_Init+0x1e0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d018      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a56      	ldr	r2, [pc, #344]	; (8002c34 <HAL_DMA_Init+0x1e4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a54      	ldr	r2, [pc, #336]	; (8002c38 <HAL_DMA_Init+0x1e8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00e      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a53      	ldr	r2, [pc, #332]	; (8002c3c <HAL_DMA_Init+0x1ec>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d009      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a51      	ldr	r2, [pc, #324]	; (8002c40 <HAL_DMA_Init+0x1f0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d004      	beq.n	8002b08 <HAL_DMA_Init+0xb8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a50      	ldr	r2, [pc, #320]	; (8002c44 <HAL_DMA_Init+0x1f4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d101      	bne.n	8002b0c <HAL_DMA_Init+0xbc>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <HAL_DMA_Init+0xbe>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 813c 	beq.w	8002d8c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a37      	ldr	r2, [pc, #220]	; (8002c08 <HAL_DMA_Init+0x1b8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d04a      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a36      	ldr	r2, [pc, #216]	; (8002c0c <HAL_DMA_Init+0x1bc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d045      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a34      	ldr	r2, [pc, #208]	; (8002c10 <HAL_DMA_Init+0x1c0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d040      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a33      	ldr	r2, [pc, #204]	; (8002c14 <HAL_DMA_Init+0x1c4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d03b      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a31      	ldr	r2, [pc, #196]	; (8002c18 <HAL_DMA_Init+0x1c8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d036      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a30      	ldr	r2, [pc, #192]	; (8002c1c <HAL_DMA_Init+0x1cc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d031      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2e      	ldr	r2, [pc, #184]	; (8002c20 <HAL_DMA_Init+0x1d0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d02c      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2d      	ldr	r2, [pc, #180]	; (8002c24 <HAL_DMA_Init+0x1d4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d027      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2b      	ldr	r2, [pc, #172]	; (8002c28 <HAL_DMA_Init+0x1d8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d022      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a2a      	ldr	r2, [pc, #168]	; (8002c2c <HAL_DMA_Init+0x1dc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d01d      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <HAL_DMA_Init+0x1e0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d018      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a27      	ldr	r2, [pc, #156]	; (8002c34 <HAL_DMA_Init+0x1e4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d013      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a25      	ldr	r2, [pc, #148]	; (8002c38 <HAL_DMA_Init+0x1e8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00e      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a24      	ldr	r2, [pc, #144]	; (8002c3c <HAL_DMA_Init+0x1ec>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d009      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <HAL_DMA_Init+0x1f0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d004      	beq.n	8002bc4 <HAL_DMA_Init+0x174>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a21      	ldr	r2, [pc, #132]	; (8002c44 <HAL_DMA_Init+0x1f4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d108      	bne.n	8002bd6 <HAL_DMA_Init+0x186>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e007      	b.n	8002be6 <HAL_DMA_Init+0x196>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002be6:	e02f      	b.n	8002c48 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002be8:	f7ff faea 	bl	80021c0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b05      	cmp	r3, #5
 8002bf4:	d928      	bls.n	8002c48 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2203      	movs	r2, #3
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e244      	b.n	8003092 <HAL_DMA_Init+0x642>
 8002c08:	40020010 	.word	0x40020010
 8002c0c:	40020028 	.word	0x40020028
 8002c10:	40020040 	.word	0x40020040
 8002c14:	40020058 	.word	0x40020058
 8002c18:	40020070 	.word	0x40020070
 8002c1c:	40020088 	.word	0x40020088
 8002c20:	400200a0 	.word	0x400200a0
 8002c24:	400200b8 	.word	0x400200b8
 8002c28:	40020410 	.word	0x40020410
 8002c2c:	40020428 	.word	0x40020428
 8002c30:	40020440 	.word	0x40020440
 8002c34:	40020458 	.word	0x40020458
 8002c38:	40020470 	.word	0x40020470
 8002c3c:	40020488 	.word	0x40020488
 8002c40:	400204a0 	.word	0x400204a0
 8002c44:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1c8      	bne.n	8002be8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4b84      	ldr	r3, [pc, #528]	; (8002e74 <HAL_DMA_Init+0x424>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c86:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d107      	bne.n	8002cac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b28      	cmp	r3, #40	; 0x28
 8002cb2:	d903      	bls.n	8002cbc <HAL_DMA_Init+0x26c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8002cba:	d91f      	bls.n	8002cfc <HAL_DMA_Init+0x2ac>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b3e      	cmp	r3, #62	; 0x3e
 8002cc2:	d903      	bls.n	8002ccc <HAL_DMA_Init+0x27c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b42      	cmp	r3, #66	; 0x42
 8002cca:	d917      	bls.n	8002cfc <HAL_DMA_Init+0x2ac>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b46      	cmp	r3, #70	; 0x46
 8002cd2:	d903      	bls.n	8002cdc <HAL_DMA_Init+0x28c>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b48      	cmp	r3, #72	; 0x48
 8002cda:	d90f      	bls.n	8002cfc <HAL_DMA_Init+0x2ac>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b4e      	cmp	r3, #78	; 0x4e
 8002ce2:	d903      	bls.n	8002cec <HAL_DMA_Init+0x29c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b52      	cmp	r3, #82	; 0x52
 8002cea:	d907      	bls.n	8002cfc <HAL_DMA_Init+0x2ac>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b73      	cmp	r3, #115	; 0x73
 8002cf2:	d905      	bls.n	8002d00 <HAL_DMA_Init+0x2b0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b77      	cmp	r3, #119	; 0x77
 8002cfa:	d801      	bhi.n	8002d00 <HAL_DMA_Init+0x2b0>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_DMA_Init+0x2b2>
 8002d00:	2300      	movs	r3, #0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f023 0307 	bic.w	r3, r3, #7
 8002d24:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d117      	bne.n	8002d68 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00e      	beq.n	8002d68 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f002 f810 	bl	8004d70 <DMA_CheckFifoParam>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2240      	movs	r2, #64	; 0x40
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e194      	b.n	8003092 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f001 ff4b 	bl	8004c0c <DMA_CalcBaseAndBitshift>
 8002d76:	4603      	mov	r3, r0
 8002d78:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	223f      	movs	r2, #63	; 0x3f
 8002d84:	409a      	lsls	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	e0ca      	b.n	8002f22 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a39      	ldr	r2, [pc, #228]	; (8002e78 <HAL_DMA_Init+0x428>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d022      	beq.n	8002ddc <HAL_DMA_Init+0x38c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a38      	ldr	r2, [pc, #224]	; (8002e7c <HAL_DMA_Init+0x42c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d01d      	beq.n	8002ddc <HAL_DMA_Init+0x38c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a36      	ldr	r2, [pc, #216]	; (8002e80 <HAL_DMA_Init+0x430>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d018      	beq.n	8002ddc <HAL_DMA_Init+0x38c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a35      	ldr	r2, [pc, #212]	; (8002e84 <HAL_DMA_Init+0x434>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d013      	beq.n	8002ddc <HAL_DMA_Init+0x38c>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a33      	ldr	r2, [pc, #204]	; (8002e88 <HAL_DMA_Init+0x438>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00e      	beq.n	8002ddc <HAL_DMA_Init+0x38c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a32      	ldr	r2, [pc, #200]	; (8002e8c <HAL_DMA_Init+0x43c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d009      	beq.n	8002ddc <HAL_DMA_Init+0x38c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <HAL_DMA_Init+0x440>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d004      	beq.n	8002ddc <HAL_DMA_Init+0x38c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <HAL_DMA_Init+0x444>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d101      	bne.n	8002de0 <HAL_DMA_Init+0x390>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <HAL_DMA_Init+0x392>
 8002de0:	2300      	movs	r3, #0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8094 	beq.w	8002f10 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <HAL_DMA_Init+0x428>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d021      	beq.n	8002e36 <HAL_DMA_Init+0x3e6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a21      	ldr	r2, [pc, #132]	; (8002e7c <HAL_DMA_Init+0x42c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d01c      	beq.n	8002e36 <HAL_DMA_Init+0x3e6>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <HAL_DMA_Init+0x430>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d017      	beq.n	8002e36 <HAL_DMA_Init+0x3e6>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <HAL_DMA_Init+0x434>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d012      	beq.n	8002e36 <HAL_DMA_Init+0x3e6>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <HAL_DMA_Init+0x438>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00d      	beq.n	8002e36 <HAL_DMA_Init+0x3e6>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_DMA_Init+0x43c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d008      	beq.n	8002e36 <HAL_DMA_Init+0x3e6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a19      	ldr	r2, [pc, #100]	; (8002e90 <HAL_DMA_Init+0x440>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <HAL_DMA_Init+0x3e6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <HAL_DMA_Init+0x444>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <HAL_DMA_Init+0x448>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d01d      	beq.n	8002e9c <HAL_DMA_Init+0x44c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b80      	cmp	r3, #128	; 0x80
 8002e66:	d102      	bne.n	8002e6e <HAL_DMA_Init+0x41e>
 8002e68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e6c:	e017      	b.n	8002e9e <HAL_DMA_Init+0x44e>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e015      	b.n	8002e9e <HAL_DMA_Init+0x44e>
 8002e72:	bf00      	nop
 8002e74:	fe10803f 	.word	0xfe10803f
 8002e78:	58025408 	.word	0x58025408
 8002e7c:	5802541c 	.word	0x5802541c
 8002e80:	58025430 	.word	0x58025430
 8002e84:	58025444 	.word	0x58025444
 8002e88:	58025458 	.word	0x58025458
 8002e8c:	5802546c 	.word	0x5802546c
 8002e90:	58025480 	.word	0x58025480
 8002e94:	58025494 	.word	0x58025494
 8002e98:	fffe000f 	.word	0xfffe000f
 8002e9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68d2      	ldr	r2, [r2, #12]
 8002ea2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002eac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002eb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ebc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ec4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ecc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b6e      	ldr	r3, [pc, #440]	; (800309c <HAL_DMA_Init+0x64c>)
 8002ee4:	4413      	add	r3, r2
 8002ee6:	4a6e      	ldr	r2, [pc, #440]	; (80030a0 <HAL_DMA_Init+0x650>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	009a      	lsls	r2, r3, #2
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f001 fe89 	bl	8004c0c <DMA_CalcBaseAndBitshift>
 8002efa:	4603      	mov	r3, r0
 8002efc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2201      	movs	r2, #1
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	e008      	b.n	8002f22 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2240      	movs	r2, #64	; 0x40
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0b7      	b.n	8003092 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a5f      	ldr	r2, [pc, #380]	; (80030a4 <HAL_DMA_Init+0x654>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d072      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a5d      	ldr	r2, [pc, #372]	; (80030a8 <HAL_DMA_Init+0x658>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d06d      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a5c      	ldr	r2, [pc, #368]	; (80030ac <HAL_DMA_Init+0x65c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d068      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a5a      	ldr	r2, [pc, #360]	; (80030b0 <HAL_DMA_Init+0x660>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d063      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a59      	ldr	r2, [pc, #356]	; (80030b4 <HAL_DMA_Init+0x664>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d05e      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a57      	ldr	r2, [pc, #348]	; (80030b8 <HAL_DMA_Init+0x668>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d059      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a56      	ldr	r2, [pc, #344]	; (80030bc <HAL_DMA_Init+0x66c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d054      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a54      	ldr	r2, [pc, #336]	; (80030c0 <HAL_DMA_Init+0x670>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d04f      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a53      	ldr	r2, [pc, #332]	; (80030c4 <HAL_DMA_Init+0x674>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d04a      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a51      	ldr	r2, [pc, #324]	; (80030c8 <HAL_DMA_Init+0x678>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d045      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a50      	ldr	r2, [pc, #320]	; (80030cc <HAL_DMA_Init+0x67c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d040      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a4e      	ldr	r2, [pc, #312]	; (80030d0 <HAL_DMA_Init+0x680>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d03b      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a4d      	ldr	r2, [pc, #308]	; (80030d4 <HAL_DMA_Init+0x684>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d036      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a4b      	ldr	r2, [pc, #300]	; (80030d8 <HAL_DMA_Init+0x688>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d031      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a4a      	ldr	r2, [pc, #296]	; (80030dc <HAL_DMA_Init+0x68c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d02c      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a48      	ldr	r2, [pc, #288]	; (80030e0 <HAL_DMA_Init+0x690>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d027      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a47      	ldr	r2, [pc, #284]	; (80030e4 <HAL_DMA_Init+0x694>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d022      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a45      	ldr	r2, [pc, #276]	; (80030e8 <HAL_DMA_Init+0x698>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01d      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a44      	ldr	r2, [pc, #272]	; (80030ec <HAL_DMA_Init+0x69c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d018      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a42      	ldr	r2, [pc, #264]	; (80030f0 <HAL_DMA_Init+0x6a0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a41      	ldr	r2, [pc, #260]	; (80030f4 <HAL_DMA_Init+0x6a4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00e      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a3f      	ldr	r2, [pc, #252]	; (80030f8 <HAL_DMA_Init+0x6a8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d009      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a3e      	ldr	r2, [pc, #248]	; (80030fc <HAL_DMA_Init+0x6ac>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d004      	beq.n	8003012 <HAL_DMA_Init+0x5c2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a3c      	ldr	r2, [pc, #240]	; (8003100 <HAL_DMA_Init+0x6b0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d101      	bne.n	8003016 <HAL_DMA_Init+0x5c6>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_DMA_Init+0x5c8>
 8003016:	2300      	movs	r3, #0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d032      	beq.n	8003082 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f001 ff23 	bl	8004e68 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d102      	bne.n	8003030 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003044:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d010      	beq.n	8003070 <HAL_DMA_Init+0x620>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b08      	cmp	r3, #8
 8003054:	d80c      	bhi.n	8003070 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f001 ffa0 	bl	8004f9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	e008      	b.n	8003082 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	a7fdabf8 	.word	0xa7fdabf8
 80030a0:	cccccccd 	.word	0xcccccccd
 80030a4:	40020010 	.word	0x40020010
 80030a8:	40020028 	.word	0x40020028
 80030ac:	40020040 	.word	0x40020040
 80030b0:	40020058 	.word	0x40020058
 80030b4:	40020070 	.word	0x40020070
 80030b8:	40020088 	.word	0x40020088
 80030bc:	400200a0 	.word	0x400200a0
 80030c0:	400200b8 	.word	0x400200b8
 80030c4:	40020410 	.word	0x40020410
 80030c8:	40020428 	.word	0x40020428
 80030cc:	40020440 	.word	0x40020440
 80030d0:	40020458 	.word	0x40020458
 80030d4:	40020470 	.word	0x40020470
 80030d8:	40020488 	.word	0x40020488
 80030dc:	400204a0 	.word	0x400204a0
 80030e0:	400204b8 	.word	0x400204b8
 80030e4:	58025408 	.word	0x58025408
 80030e8:	5802541c 	.word	0x5802541c
 80030ec:	58025430 	.word	0x58025430
 80030f0:	58025444 	.word	0x58025444
 80030f4:	58025458 	.word	0x58025458
 80030f8:	5802546c 	.word	0x5802546c
 80030fc:	58025480 	.word	0x58025480
 8003100:	58025494 	.word	0x58025494

08003104 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e226      	b.n	800356e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_DMA_Start_IT+0x2a>
 800312a:	2302      	movs	r3, #2
 800312c:	e21f      	b.n	800356e <HAL_DMA_Start_IT+0x46a>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	f040 820a 	bne.w	8003558 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a68      	ldr	r2, [pc, #416]	; (80032f8 <HAL_DMA_Start_IT+0x1f4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d04a      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a66      	ldr	r2, [pc, #408]	; (80032fc <HAL_DMA_Start_IT+0x1f8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d045      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a65      	ldr	r2, [pc, #404]	; (8003300 <HAL_DMA_Start_IT+0x1fc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d040      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a63      	ldr	r2, [pc, #396]	; (8003304 <HAL_DMA_Start_IT+0x200>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d03b      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a62      	ldr	r2, [pc, #392]	; (8003308 <HAL_DMA_Start_IT+0x204>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d036      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a60      	ldr	r2, [pc, #384]	; (800330c <HAL_DMA_Start_IT+0x208>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d031      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a5f      	ldr	r2, [pc, #380]	; (8003310 <HAL_DMA_Start_IT+0x20c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d02c      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a5d      	ldr	r2, [pc, #372]	; (8003314 <HAL_DMA_Start_IT+0x210>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d027      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a5c      	ldr	r2, [pc, #368]	; (8003318 <HAL_DMA_Start_IT+0x214>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d022      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a5a      	ldr	r2, [pc, #360]	; (800331c <HAL_DMA_Start_IT+0x218>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01d      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a59      	ldr	r2, [pc, #356]	; (8003320 <HAL_DMA_Start_IT+0x21c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d018      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a57      	ldr	r2, [pc, #348]	; (8003324 <HAL_DMA_Start_IT+0x220>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a56      	ldr	r2, [pc, #344]	; (8003328 <HAL_DMA_Start_IT+0x224>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a54      	ldr	r2, [pc, #336]	; (800332c <HAL_DMA_Start_IT+0x228>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a53      	ldr	r2, [pc, #332]	; (8003330 <HAL_DMA_Start_IT+0x22c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_DMA_Start_IT+0xee>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a51      	ldr	r2, [pc, #324]	; (8003334 <HAL_DMA_Start_IT+0x230>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d108      	bne.n	8003204 <HAL_DMA_Start_IT+0x100>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e007      	b.n	8003214 <HAL_DMA_Start_IT+0x110>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f001 fb4a 	bl	80048b4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a34      	ldr	r2, [pc, #208]	; (80032f8 <HAL_DMA_Start_IT+0x1f4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d04a      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a33      	ldr	r2, [pc, #204]	; (80032fc <HAL_DMA_Start_IT+0x1f8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d045      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a31      	ldr	r2, [pc, #196]	; (8003300 <HAL_DMA_Start_IT+0x1fc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d040      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a30      	ldr	r2, [pc, #192]	; (8003304 <HAL_DMA_Start_IT+0x200>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d03b      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2e      	ldr	r2, [pc, #184]	; (8003308 <HAL_DMA_Start_IT+0x204>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d036      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2d      	ldr	r2, [pc, #180]	; (800330c <HAL_DMA_Start_IT+0x208>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d031      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a2b      	ldr	r2, [pc, #172]	; (8003310 <HAL_DMA_Start_IT+0x20c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02c      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <HAL_DMA_Start_IT+0x210>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d027      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a28      	ldr	r2, [pc, #160]	; (8003318 <HAL_DMA_Start_IT+0x214>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d022      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a27      	ldr	r2, [pc, #156]	; (800331c <HAL_DMA_Start_IT+0x218>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d01d      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a25      	ldr	r2, [pc, #148]	; (8003320 <HAL_DMA_Start_IT+0x21c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d018      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a24      	ldr	r2, [pc, #144]	; (8003324 <HAL_DMA_Start_IT+0x220>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a22      	ldr	r2, [pc, #136]	; (8003328 <HAL_DMA_Start_IT+0x224>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00e      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a21      	ldr	r2, [pc, #132]	; (800332c <HAL_DMA_Start_IT+0x228>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d009      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <HAL_DMA_Start_IT+0x22c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_DMA_Start_IT+0x1bc>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <HAL_DMA_Start_IT+0x230>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_DMA_Start_IT+0x1c0>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_DMA_Start_IT+0x1c2>
 80032c4:	2300      	movs	r3, #0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d036      	beq.n	8003338 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 021e 	bic.w	r2, r3, #30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0216 	orr.w	r2, r2, #22
 80032dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d03e      	beq.n	8003364 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0208 	orr.w	r2, r2, #8
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e035      	b.n	8003364 <HAL_DMA_Start_IT+0x260>
 80032f8:	40020010 	.word	0x40020010
 80032fc:	40020028 	.word	0x40020028
 8003300:	40020040 	.word	0x40020040
 8003304:	40020058 	.word	0x40020058
 8003308:	40020070 	.word	0x40020070
 800330c:	40020088 	.word	0x40020088
 8003310:	400200a0 	.word	0x400200a0
 8003314:	400200b8 	.word	0x400200b8
 8003318:	40020410 	.word	0x40020410
 800331c:	40020428 	.word	0x40020428
 8003320:	40020440 	.word	0x40020440
 8003324:	40020458 	.word	0x40020458
 8003328:	40020470 	.word	0x40020470
 800332c:	40020488 	.word	0x40020488
 8003330:	400204a0 	.word	0x400204a0
 8003334:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 020e 	bic.w	r2, r3, #14
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 020a 	orr.w	r2, r2, #10
 800334a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0204 	orr.w	r2, r2, #4
 8003362:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a83      	ldr	r2, [pc, #524]	; (8003578 <HAL_DMA_Start_IT+0x474>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d072      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a82      	ldr	r2, [pc, #520]	; (800357c <HAL_DMA_Start_IT+0x478>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d06d      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a80      	ldr	r2, [pc, #512]	; (8003580 <HAL_DMA_Start_IT+0x47c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d068      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a7f      	ldr	r2, [pc, #508]	; (8003584 <HAL_DMA_Start_IT+0x480>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d063      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a7d      	ldr	r2, [pc, #500]	; (8003588 <HAL_DMA_Start_IT+0x484>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d05e      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7c      	ldr	r2, [pc, #496]	; (800358c <HAL_DMA_Start_IT+0x488>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d059      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a7a      	ldr	r2, [pc, #488]	; (8003590 <HAL_DMA_Start_IT+0x48c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d054      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a79      	ldr	r2, [pc, #484]	; (8003594 <HAL_DMA_Start_IT+0x490>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d04f      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a77      	ldr	r2, [pc, #476]	; (8003598 <HAL_DMA_Start_IT+0x494>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d04a      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a76      	ldr	r2, [pc, #472]	; (800359c <HAL_DMA_Start_IT+0x498>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d045      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a74      	ldr	r2, [pc, #464]	; (80035a0 <HAL_DMA_Start_IT+0x49c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d040      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a73      	ldr	r2, [pc, #460]	; (80035a4 <HAL_DMA_Start_IT+0x4a0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d03b      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a71      	ldr	r2, [pc, #452]	; (80035a8 <HAL_DMA_Start_IT+0x4a4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d036      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a70      	ldr	r2, [pc, #448]	; (80035ac <HAL_DMA_Start_IT+0x4a8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d031      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a6e      	ldr	r2, [pc, #440]	; (80035b0 <HAL_DMA_Start_IT+0x4ac>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d02c      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6d      	ldr	r2, [pc, #436]	; (80035b4 <HAL_DMA_Start_IT+0x4b0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d027      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a6b      	ldr	r2, [pc, #428]	; (80035b8 <HAL_DMA_Start_IT+0x4b4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d022      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a6a      	ldr	r2, [pc, #424]	; (80035bc <HAL_DMA_Start_IT+0x4b8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d01d      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a68      	ldr	r2, [pc, #416]	; (80035c0 <HAL_DMA_Start_IT+0x4bc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d018      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a67      	ldr	r2, [pc, #412]	; (80035c4 <HAL_DMA_Start_IT+0x4c0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d013      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a65      	ldr	r2, [pc, #404]	; (80035c8 <HAL_DMA_Start_IT+0x4c4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00e      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a64      	ldr	r2, [pc, #400]	; (80035cc <HAL_DMA_Start_IT+0x4c8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d009      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a62      	ldr	r2, [pc, #392]	; (80035d0 <HAL_DMA_Start_IT+0x4cc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_DMA_Start_IT+0x350>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a61      	ldr	r2, [pc, #388]	; (80035d4 <HAL_DMA_Start_IT+0x4d0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d101      	bne.n	8003458 <HAL_DMA_Start_IT+0x354>
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_DMA_Start_IT+0x356>
 8003458:	2300      	movs	r3, #0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01a      	beq.n	8003494 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003492:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a37      	ldr	r2, [pc, #220]	; (8003578 <HAL_DMA_Start_IT+0x474>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d04a      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a36      	ldr	r2, [pc, #216]	; (800357c <HAL_DMA_Start_IT+0x478>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d045      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a34      	ldr	r2, [pc, #208]	; (8003580 <HAL_DMA_Start_IT+0x47c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d040      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a33      	ldr	r2, [pc, #204]	; (8003584 <HAL_DMA_Start_IT+0x480>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d03b      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a31      	ldr	r2, [pc, #196]	; (8003588 <HAL_DMA_Start_IT+0x484>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d036      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a30      	ldr	r2, [pc, #192]	; (800358c <HAL_DMA_Start_IT+0x488>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d031      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2e      	ldr	r2, [pc, #184]	; (8003590 <HAL_DMA_Start_IT+0x48c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d02c      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2d      	ldr	r2, [pc, #180]	; (8003594 <HAL_DMA_Start_IT+0x490>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d027      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a2b      	ldr	r2, [pc, #172]	; (8003598 <HAL_DMA_Start_IT+0x494>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d022      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2a      	ldr	r2, [pc, #168]	; (800359c <HAL_DMA_Start_IT+0x498>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d01d      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a28      	ldr	r2, [pc, #160]	; (80035a0 <HAL_DMA_Start_IT+0x49c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d018      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a27      	ldr	r2, [pc, #156]	; (80035a4 <HAL_DMA_Start_IT+0x4a0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a25      	ldr	r2, [pc, #148]	; (80035a8 <HAL_DMA_Start_IT+0x4a4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00e      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a24      	ldr	r2, [pc, #144]	; (80035ac <HAL_DMA_Start_IT+0x4a8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a22      	ldr	r2, [pc, #136]	; (80035b0 <HAL_DMA_Start_IT+0x4ac>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_DMA_Start_IT+0x430>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a21      	ldr	r2, [pc, #132]	; (80035b4 <HAL_DMA_Start_IT+0x4b0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d108      	bne.n	8003546 <HAL_DMA_Start_IT+0x442>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e012      	b.n	800356c <HAL_DMA_Start_IT+0x468>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e009      	b.n	800356c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003566:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800356c:	7dfb      	ldrb	r3, [r7, #23]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40020010 	.word	0x40020010
 800357c:	40020028 	.word	0x40020028
 8003580:	40020040 	.word	0x40020040
 8003584:	40020058 	.word	0x40020058
 8003588:	40020070 	.word	0x40020070
 800358c:	40020088 	.word	0x40020088
 8003590:	400200a0 	.word	0x400200a0
 8003594:	400200b8 	.word	0x400200b8
 8003598:	40020410 	.word	0x40020410
 800359c:	40020428 	.word	0x40020428
 80035a0:	40020440 	.word	0x40020440
 80035a4:	40020458 	.word	0x40020458
 80035a8:	40020470 	.word	0x40020470
 80035ac:	40020488 	.word	0x40020488
 80035b0:	400204a0 	.word	0x400204a0
 80035b4:	400204b8 	.word	0x400204b8
 80035b8:	58025408 	.word	0x58025408
 80035bc:	5802541c 	.word	0x5802541c
 80035c0:	58025430 	.word	0x58025430
 80035c4:	58025444 	.word	0x58025444
 80035c8:	58025458 	.word	0x58025458
 80035cc:	5802546c 	.word	0x5802546c
 80035d0:	58025480 	.word	0x58025480
 80035d4:	58025494 	.word	0x58025494

080035d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e205      	b.n	80039f6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d004      	beq.n	8003600 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2280      	movs	r2, #128	; 0x80
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e1fa      	b.n	80039f6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a8c      	ldr	r2, [pc, #560]	; (8003838 <HAL_DMA_Abort_IT+0x260>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d04a      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a8b      	ldr	r2, [pc, #556]	; (800383c <HAL_DMA_Abort_IT+0x264>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d045      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a89      	ldr	r2, [pc, #548]	; (8003840 <HAL_DMA_Abort_IT+0x268>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d040      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a88      	ldr	r2, [pc, #544]	; (8003844 <HAL_DMA_Abort_IT+0x26c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d03b      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a86      	ldr	r2, [pc, #536]	; (8003848 <HAL_DMA_Abort_IT+0x270>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d036      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a85      	ldr	r2, [pc, #532]	; (800384c <HAL_DMA_Abort_IT+0x274>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d031      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a83      	ldr	r2, [pc, #524]	; (8003850 <HAL_DMA_Abort_IT+0x278>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d02c      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a82      	ldr	r2, [pc, #520]	; (8003854 <HAL_DMA_Abort_IT+0x27c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d027      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a80      	ldr	r2, [pc, #512]	; (8003858 <HAL_DMA_Abort_IT+0x280>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d022      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a7f      	ldr	r2, [pc, #508]	; (800385c <HAL_DMA_Abort_IT+0x284>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d01d      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a7d      	ldr	r2, [pc, #500]	; (8003860 <HAL_DMA_Abort_IT+0x288>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d018      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a7c      	ldr	r2, [pc, #496]	; (8003864 <HAL_DMA_Abort_IT+0x28c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a7a      	ldr	r2, [pc, #488]	; (8003868 <HAL_DMA_Abort_IT+0x290>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00e      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a79      	ldr	r2, [pc, #484]	; (800386c <HAL_DMA_Abort_IT+0x294>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d009      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a77      	ldr	r2, [pc, #476]	; (8003870 <HAL_DMA_Abort_IT+0x298>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a76      	ldr	r2, [pc, #472]	; (8003874 <HAL_DMA_Abort_IT+0x29c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d101      	bne.n	80036a4 <HAL_DMA_Abort_IT+0xcc>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <HAL_DMA_Abort_IT+0xce>
 80036a4:	2300      	movs	r3, #0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d065      	beq.n	8003776 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2204      	movs	r2, #4
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a60      	ldr	r2, [pc, #384]	; (8003838 <HAL_DMA_Abort_IT+0x260>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d04a      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a5e      	ldr	r2, [pc, #376]	; (800383c <HAL_DMA_Abort_IT+0x264>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d045      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a5d      	ldr	r2, [pc, #372]	; (8003840 <HAL_DMA_Abort_IT+0x268>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d040      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a5b      	ldr	r2, [pc, #364]	; (8003844 <HAL_DMA_Abort_IT+0x26c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d03b      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a5a      	ldr	r2, [pc, #360]	; (8003848 <HAL_DMA_Abort_IT+0x270>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d036      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a58      	ldr	r2, [pc, #352]	; (800384c <HAL_DMA_Abort_IT+0x274>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d031      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a57      	ldr	r2, [pc, #348]	; (8003850 <HAL_DMA_Abort_IT+0x278>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d02c      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a55      	ldr	r2, [pc, #340]	; (8003854 <HAL_DMA_Abort_IT+0x27c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d027      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a54      	ldr	r2, [pc, #336]	; (8003858 <HAL_DMA_Abort_IT+0x280>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a52      	ldr	r2, [pc, #328]	; (800385c <HAL_DMA_Abort_IT+0x284>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01d      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a51      	ldr	r2, [pc, #324]	; (8003860 <HAL_DMA_Abort_IT+0x288>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d018      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a4f      	ldr	r2, [pc, #316]	; (8003864 <HAL_DMA_Abort_IT+0x28c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a4e      	ldr	r2, [pc, #312]	; (8003868 <HAL_DMA_Abort_IT+0x290>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00e      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a4c      	ldr	r2, [pc, #304]	; (800386c <HAL_DMA_Abort_IT+0x294>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a4b      	ldr	r2, [pc, #300]	; (8003870 <HAL_DMA_Abort_IT+0x298>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a49      	ldr	r2, [pc, #292]	; (8003874 <HAL_DMA_Abort_IT+0x29c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d108      	bne.n	8003764 <HAL_DMA_Abort_IT+0x18c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	e147      	b.n	80039f4 <HAL_DMA_Abort_IT+0x41c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e13e      	b.n	80039f4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 020e 	bic.w	r2, r2, #14
 8003784:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2b      	ldr	r2, [pc, #172]	; (8003838 <HAL_DMA_Abort_IT+0x260>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d04a      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a29      	ldr	r2, [pc, #164]	; (800383c <HAL_DMA_Abort_IT+0x264>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d045      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a28      	ldr	r2, [pc, #160]	; (8003840 <HAL_DMA_Abort_IT+0x268>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d040      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a26      	ldr	r2, [pc, #152]	; (8003844 <HAL_DMA_Abort_IT+0x26c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d03b      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a25      	ldr	r2, [pc, #148]	; (8003848 <HAL_DMA_Abort_IT+0x270>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d036      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a23      	ldr	r2, [pc, #140]	; (800384c <HAL_DMA_Abort_IT+0x274>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d031      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a22      	ldr	r2, [pc, #136]	; (8003850 <HAL_DMA_Abort_IT+0x278>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d02c      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a20      	ldr	r2, [pc, #128]	; (8003854 <HAL_DMA_Abort_IT+0x27c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d027      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_DMA_Abort_IT+0x280>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d022      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_DMA_Abort_IT+0x284>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d01d      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1c      	ldr	r2, [pc, #112]	; (8003860 <HAL_DMA_Abort_IT+0x288>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d018      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <HAL_DMA_Abort_IT+0x28c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a19      	ldr	r2, [pc, #100]	; (8003868 <HAL_DMA_Abort_IT+0x290>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00e      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a17      	ldr	r2, [pc, #92]	; (800386c <HAL_DMA_Abort_IT+0x294>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d009      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a16      	ldr	r2, [pc, #88]	; (8003870 <HAL_DMA_Abort_IT+0x298>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <HAL_DMA_Abort_IT+0x29c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d128      	bne.n	8003878 <HAL_DMA_Abort_IT+0x2a0>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e027      	b.n	8003888 <HAL_DMA_Abort_IT+0x2b0>
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a5c      	ldr	r2, [pc, #368]	; (8003a00 <HAL_DMA_Abort_IT+0x428>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d072      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a5b      	ldr	r2, [pc, #364]	; (8003a04 <HAL_DMA_Abort_IT+0x42c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d06d      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a59      	ldr	r2, [pc, #356]	; (8003a08 <HAL_DMA_Abort_IT+0x430>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d068      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a58      	ldr	r2, [pc, #352]	; (8003a0c <HAL_DMA_Abort_IT+0x434>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d063      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a56      	ldr	r2, [pc, #344]	; (8003a10 <HAL_DMA_Abort_IT+0x438>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d05e      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a55      	ldr	r2, [pc, #340]	; (8003a14 <HAL_DMA_Abort_IT+0x43c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d059      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a53      	ldr	r2, [pc, #332]	; (8003a18 <HAL_DMA_Abort_IT+0x440>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d054      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a52      	ldr	r2, [pc, #328]	; (8003a1c <HAL_DMA_Abort_IT+0x444>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d04f      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a50      	ldr	r2, [pc, #320]	; (8003a20 <HAL_DMA_Abort_IT+0x448>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d04a      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4f      	ldr	r2, [pc, #316]	; (8003a24 <HAL_DMA_Abort_IT+0x44c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d045      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a4d      	ldr	r2, [pc, #308]	; (8003a28 <HAL_DMA_Abort_IT+0x450>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d040      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a4c      	ldr	r2, [pc, #304]	; (8003a2c <HAL_DMA_Abort_IT+0x454>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d03b      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a4a      	ldr	r2, [pc, #296]	; (8003a30 <HAL_DMA_Abort_IT+0x458>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d036      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a49      	ldr	r2, [pc, #292]	; (8003a34 <HAL_DMA_Abort_IT+0x45c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d031      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a47      	ldr	r2, [pc, #284]	; (8003a38 <HAL_DMA_Abort_IT+0x460>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d02c      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a46      	ldr	r2, [pc, #280]	; (8003a3c <HAL_DMA_Abort_IT+0x464>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d027      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a44      	ldr	r2, [pc, #272]	; (8003a40 <HAL_DMA_Abort_IT+0x468>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d022      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a43      	ldr	r2, [pc, #268]	; (8003a44 <HAL_DMA_Abort_IT+0x46c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d01d      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a41      	ldr	r2, [pc, #260]	; (8003a48 <HAL_DMA_Abort_IT+0x470>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d018      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a40      	ldr	r2, [pc, #256]	; (8003a4c <HAL_DMA_Abort_IT+0x474>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d013      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a3e      	ldr	r2, [pc, #248]	; (8003a50 <HAL_DMA_Abort_IT+0x478>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00e      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a3d      	ldr	r2, [pc, #244]	; (8003a54 <HAL_DMA_Abort_IT+0x47c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d009      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a3b      	ldr	r2, [pc, #236]	; (8003a58 <HAL_DMA_Abort_IT+0x480>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d004      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a3a      	ldr	r2, [pc, #232]	; (8003a5c <HAL_DMA_Abort_IT+0x484>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_DMA_Abort_IT+0x3a4>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <HAL_DMA_Abort_IT+0x3a6>
 800397c:	2300      	movs	r3, #0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d028      	beq.n	80039d4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003990:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2201      	movs	r2, #1
 80039a2:	409a      	lsls	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00c      	beq.n	80039d4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40020010 	.word	0x40020010
 8003a04:	40020028 	.word	0x40020028
 8003a08:	40020040 	.word	0x40020040
 8003a0c:	40020058 	.word	0x40020058
 8003a10:	40020070 	.word	0x40020070
 8003a14:	40020088 	.word	0x40020088
 8003a18:	400200a0 	.word	0x400200a0
 8003a1c:	400200b8 	.word	0x400200b8
 8003a20:	40020410 	.word	0x40020410
 8003a24:	40020428 	.word	0x40020428
 8003a28:	40020440 	.word	0x40020440
 8003a2c:	40020458 	.word	0x40020458
 8003a30:	40020470 	.word	0x40020470
 8003a34:	40020488 	.word	0x40020488
 8003a38:	400204a0 	.word	0x400204a0
 8003a3c:	400204b8 	.word	0x400204b8
 8003a40:	58025408 	.word	0x58025408
 8003a44:	5802541c 	.word	0x5802541c
 8003a48:	58025430 	.word	0x58025430
 8003a4c:	58025444 	.word	0x58025444
 8003a50:	58025458 	.word	0x58025458
 8003a54:	5802546c 	.word	0x5802546c
 8003a58:	58025480 	.word	0x58025480
 8003a5c:	58025494 	.word	0x58025494

08003a60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a6c:	4b67      	ldr	r3, [pc, #412]	; (8003c0c <HAL_DMA_IRQHandler+0x1ac>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a67      	ldr	r2, [pc, #412]	; (8003c10 <HAL_DMA_IRQHandler+0x1b0>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	0a9b      	lsrs	r3, r3, #10
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a5f      	ldr	r2, [pc, #380]	; (8003c14 <HAL_DMA_IRQHandler+0x1b4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d04a      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a5d      	ldr	r2, [pc, #372]	; (8003c18 <HAL_DMA_IRQHandler+0x1b8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d045      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a5c      	ldr	r2, [pc, #368]	; (8003c1c <HAL_DMA_IRQHandler+0x1bc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d040      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a5a      	ldr	r2, [pc, #360]	; (8003c20 <HAL_DMA_IRQHandler+0x1c0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d03b      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a59      	ldr	r2, [pc, #356]	; (8003c24 <HAL_DMA_IRQHandler+0x1c4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d036      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a57      	ldr	r2, [pc, #348]	; (8003c28 <HAL_DMA_IRQHandler+0x1c8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d031      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a56      	ldr	r2, [pc, #344]	; (8003c2c <HAL_DMA_IRQHandler+0x1cc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d02c      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a54      	ldr	r2, [pc, #336]	; (8003c30 <HAL_DMA_IRQHandler+0x1d0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d027      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a53      	ldr	r2, [pc, #332]	; (8003c34 <HAL_DMA_IRQHandler+0x1d4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d022      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a51      	ldr	r2, [pc, #324]	; (8003c38 <HAL_DMA_IRQHandler+0x1d8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01d      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a50      	ldr	r2, [pc, #320]	; (8003c3c <HAL_DMA_IRQHandler+0x1dc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d018      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a4e      	ldr	r2, [pc, #312]	; (8003c40 <HAL_DMA_IRQHandler+0x1e0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a4d      	ldr	r2, [pc, #308]	; (8003c44 <HAL_DMA_IRQHandler+0x1e4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a4b      	ldr	r2, [pc, #300]	; (8003c48 <HAL_DMA_IRQHandler+0x1e8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a4a      	ldr	r2, [pc, #296]	; (8003c4c <HAL_DMA_IRQHandler+0x1ec>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a48      	ldr	r2, [pc, #288]	; (8003c50 <HAL_DMA_IRQHandler+0x1f0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <HAL_DMA_IRQHandler+0xd6>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_DMA_IRQHandler+0xd8>
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 842b 	beq.w	8004394 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2208      	movs	r2, #8
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80a2 	beq.w	8003c98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2e      	ldr	r2, [pc, #184]	; (8003c14 <HAL_DMA_IRQHandler+0x1b4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d04a      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2d      	ldr	r2, [pc, #180]	; (8003c18 <HAL_DMA_IRQHandler+0x1b8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d045      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a2b      	ldr	r2, [pc, #172]	; (8003c1c <HAL_DMA_IRQHandler+0x1bc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d040      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2a      	ldr	r2, [pc, #168]	; (8003c20 <HAL_DMA_IRQHandler+0x1c0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d03b      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <HAL_DMA_IRQHandler+0x1c4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d036      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <HAL_DMA_IRQHandler+0x1c8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d031      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a25      	ldr	r2, [pc, #148]	; (8003c2c <HAL_DMA_IRQHandler+0x1cc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d02c      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a24      	ldr	r2, [pc, #144]	; (8003c30 <HAL_DMA_IRQHandler+0x1d0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d027      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a22      	ldr	r2, [pc, #136]	; (8003c34 <HAL_DMA_IRQHandler+0x1d4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d022      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a21      	ldr	r2, [pc, #132]	; (8003c38 <HAL_DMA_IRQHandler+0x1d8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d01d      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <HAL_DMA_IRQHandler+0x1dc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d018      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1e      	ldr	r2, [pc, #120]	; (8003c40 <HAL_DMA_IRQHandler+0x1e0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d013      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <HAL_DMA_IRQHandler+0x1e4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00e      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <HAL_DMA_IRQHandler+0x1e8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d009      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <HAL_DMA_IRQHandler+0x1ec>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d004      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <HAL_DMA_IRQHandler+0x1f0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d12f      	bne.n	8003c54 <HAL_DMA_IRQHandler+0x1f4>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf14      	ite	ne
 8003c02:	2301      	movne	r3, #1
 8003c04:	2300      	moveq	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	e02e      	b.n	8003c68 <HAL_DMA_IRQHandler+0x208>
 8003c0a:	bf00      	nop
 8003c0c:	2000002c 	.word	0x2000002c
 8003c10:	1b4e81b5 	.word	0x1b4e81b5
 8003c14:	40020010 	.word	0x40020010
 8003c18:	40020028 	.word	0x40020028
 8003c1c:	40020040 	.word	0x40020040
 8003c20:	40020058 	.word	0x40020058
 8003c24:	40020070 	.word	0x40020070
 8003c28:	40020088 	.word	0x40020088
 8003c2c:	400200a0 	.word	0x400200a0
 8003c30:	400200b8 	.word	0x400200b8
 8003c34:	40020410 	.word	0x40020410
 8003c38:	40020428 	.word	0x40020428
 8003c3c:	40020440 	.word	0x40020440
 8003c40:	40020458 	.word	0x40020458
 8003c44:	40020470 	.word	0x40020470
 8003c48:	40020488 	.word	0x40020488
 8003c4c:	400204a0 	.word	0x400204a0
 8003c50:	400204b8 	.word	0x400204b8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	bf14      	ite	ne
 8003c62:	2301      	movne	r3, #1
 8003c64:	2300      	moveq	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d015      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0204 	bic.w	r2, r2, #4
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2208      	movs	r2, #8
 8003c86:	409a      	lsls	r2, r3
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	f043 0201 	orr.w	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d06e      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a69      	ldr	r2, [pc, #420]	; (8003e58 <HAL_DMA_IRQHandler+0x3f8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d04a      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a67      	ldr	r2, [pc, #412]	; (8003e5c <HAL_DMA_IRQHandler+0x3fc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d045      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a66      	ldr	r2, [pc, #408]	; (8003e60 <HAL_DMA_IRQHandler+0x400>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d040      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a64      	ldr	r2, [pc, #400]	; (8003e64 <HAL_DMA_IRQHandler+0x404>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d03b      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a63      	ldr	r2, [pc, #396]	; (8003e68 <HAL_DMA_IRQHandler+0x408>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d036      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a61      	ldr	r2, [pc, #388]	; (8003e6c <HAL_DMA_IRQHandler+0x40c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d031      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a60      	ldr	r2, [pc, #384]	; (8003e70 <HAL_DMA_IRQHandler+0x410>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d02c      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a5e      	ldr	r2, [pc, #376]	; (8003e74 <HAL_DMA_IRQHandler+0x414>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d027      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a5d      	ldr	r2, [pc, #372]	; (8003e78 <HAL_DMA_IRQHandler+0x418>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d022      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a5b      	ldr	r2, [pc, #364]	; (8003e7c <HAL_DMA_IRQHandler+0x41c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01d      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a5a      	ldr	r2, [pc, #360]	; (8003e80 <HAL_DMA_IRQHandler+0x420>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d018      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a58      	ldr	r2, [pc, #352]	; (8003e84 <HAL_DMA_IRQHandler+0x424>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a57      	ldr	r2, [pc, #348]	; (8003e88 <HAL_DMA_IRQHandler+0x428>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00e      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a55      	ldr	r2, [pc, #340]	; (8003e8c <HAL_DMA_IRQHandler+0x42c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d009      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a54      	ldr	r2, [pc, #336]	; (8003e90 <HAL_DMA_IRQHandler+0x430>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a52      	ldr	r2, [pc, #328]	; (8003e94 <HAL_DMA_IRQHandler+0x434>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10a      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x304>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf14      	ite	ne
 8003d5c:	2301      	movne	r3, #1
 8003d5e:	2300      	moveq	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e003      	b.n	8003d6c <HAL_DMA_IRQHandler+0x30c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00d      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2201      	movs	r2, #1
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d84:	f043 0202 	orr.w	r2, r3, #2
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	2204      	movs	r2, #4
 8003d96:	409a      	lsls	r2, r3
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 808f 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a2c      	ldr	r2, [pc, #176]	; (8003e58 <HAL_DMA_IRQHandler+0x3f8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d04a      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <HAL_DMA_IRQHandler+0x3fc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d045      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <HAL_DMA_IRQHandler+0x400>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d040      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a27      	ldr	r2, [pc, #156]	; (8003e64 <HAL_DMA_IRQHandler+0x404>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d03b      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a26      	ldr	r2, [pc, #152]	; (8003e68 <HAL_DMA_IRQHandler+0x408>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d036      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a24      	ldr	r2, [pc, #144]	; (8003e6c <HAL_DMA_IRQHandler+0x40c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d031      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a23      	ldr	r2, [pc, #140]	; (8003e70 <HAL_DMA_IRQHandler+0x410>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d02c      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a21      	ldr	r2, [pc, #132]	; (8003e74 <HAL_DMA_IRQHandler+0x414>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d027      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a20      	ldr	r2, [pc, #128]	; (8003e78 <HAL_DMA_IRQHandler+0x418>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d022      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <HAL_DMA_IRQHandler+0x41c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01d      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <HAL_DMA_IRQHandler+0x420>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d018      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <HAL_DMA_IRQHandler+0x424>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1a      	ldr	r2, [pc, #104]	; (8003e88 <HAL_DMA_IRQHandler+0x428>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00e      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a18      	ldr	r2, [pc, #96]	; (8003e8c <HAL_DMA_IRQHandler+0x42c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <HAL_DMA_IRQHandler+0x430>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <HAL_DMA_IRQHandler+0x434>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d12a      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x438>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf14      	ite	ne
 8003e50:	2301      	movne	r3, #1
 8003e52:	2300      	moveq	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e023      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x440>
 8003e58:	40020010 	.word	0x40020010
 8003e5c:	40020028 	.word	0x40020028
 8003e60:	40020040 	.word	0x40020040
 8003e64:	40020058 	.word	0x40020058
 8003e68:	40020070 	.word	0x40020070
 8003e6c:	40020088 	.word	0x40020088
 8003e70:	400200a0 	.word	0x400200a0
 8003e74:	400200b8 	.word	0x400200b8
 8003e78:	40020410 	.word	0x40020410
 8003e7c:	40020428 	.word	0x40020428
 8003e80:	40020440 	.word	0x40020440
 8003e84:	40020458 	.word	0x40020458
 8003e88:	40020470 	.word	0x40020470
 8003e8c:	40020488 	.word	0x40020488
 8003e90:	400204a0 	.word	0x400204a0
 8003e94:	400204b8 	.word	0x400204b8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	2204      	movs	r2, #4
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	f043 0204 	orr.w	r2, r3, #4
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	2210      	movs	r2, #16
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80a6 	beq.w	8004022 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a85      	ldr	r2, [pc, #532]	; (80040f0 <HAL_DMA_IRQHandler+0x690>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d04a      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a83      	ldr	r2, [pc, #524]	; (80040f4 <HAL_DMA_IRQHandler+0x694>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d045      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a82      	ldr	r2, [pc, #520]	; (80040f8 <HAL_DMA_IRQHandler+0x698>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d040      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a80      	ldr	r2, [pc, #512]	; (80040fc <HAL_DMA_IRQHandler+0x69c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d03b      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a7f      	ldr	r2, [pc, #508]	; (8004100 <HAL_DMA_IRQHandler+0x6a0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d036      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7d      	ldr	r2, [pc, #500]	; (8004104 <HAL_DMA_IRQHandler+0x6a4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d031      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a7c      	ldr	r2, [pc, #496]	; (8004108 <HAL_DMA_IRQHandler+0x6a8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d02c      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a7a      	ldr	r2, [pc, #488]	; (800410c <HAL_DMA_IRQHandler+0x6ac>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d027      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a79      	ldr	r2, [pc, #484]	; (8004110 <HAL_DMA_IRQHandler+0x6b0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d022      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a77      	ldr	r2, [pc, #476]	; (8004114 <HAL_DMA_IRQHandler+0x6b4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01d      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a76      	ldr	r2, [pc, #472]	; (8004118 <HAL_DMA_IRQHandler+0x6b8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d018      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a74      	ldr	r2, [pc, #464]	; (800411c <HAL_DMA_IRQHandler+0x6bc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a73      	ldr	r2, [pc, #460]	; (8004120 <HAL_DMA_IRQHandler+0x6c0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00e      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a71      	ldr	r2, [pc, #452]	; (8004124 <HAL_DMA_IRQHandler+0x6c4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d009      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a70      	ldr	r2, [pc, #448]	; (8004128 <HAL_DMA_IRQHandler+0x6c8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6e      	ldr	r2, [pc, #440]	; (800412c <HAL_DMA_IRQHandler+0x6cc>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d10a      	bne.n	8003f8c <HAL_DMA_IRQHandler+0x52c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e009      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x540>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	2300      	moveq	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d03e      	beq.n	8004022 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	2210      	movs	r2, #16
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d018      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d108      	bne.n	8003fe2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d024      	beq.n	8004022 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	4798      	blx	r3
 8003fe0:	e01f      	b.n	8004022 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01b      	beq.n	8004022 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
 8003ff2:	e016      	b.n	8004022 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d107      	bne.n	8004012 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0208 	bic.w	r2, r2, #8
 8004010:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	2220      	movs	r2, #32
 800402c:	409a      	lsls	r2, r3
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 8110 	beq.w	8004258 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2c      	ldr	r2, [pc, #176]	; (80040f0 <HAL_DMA_IRQHandler+0x690>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d04a      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a2b      	ldr	r2, [pc, #172]	; (80040f4 <HAL_DMA_IRQHandler+0x694>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d045      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <HAL_DMA_IRQHandler+0x698>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d040      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a28      	ldr	r2, [pc, #160]	; (80040fc <HAL_DMA_IRQHandler+0x69c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d03b      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a26      	ldr	r2, [pc, #152]	; (8004100 <HAL_DMA_IRQHandler+0x6a0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d036      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a25      	ldr	r2, [pc, #148]	; (8004104 <HAL_DMA_IRQHandler+0x6a4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d031      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a23      	ldr	r2, [pc, #140]	; (8004108 <HAL_DMA_IRQHandler+0x6a8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02c      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a22      	ldr	r2, [pc, #136]	; (800410c <HAL_DMA_IRQHandler+0x6ac>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d027      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a20      	ldr	r2, [pc, #128]	; (8004110 <HAL_DMA_IRQHandler+0x6b0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1f      	ldr	r2, [pc, #124]	; (8004114 <HAL_DMA_IRQHandler+0x6b4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01d      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <HAL_DMA_IRQHandler+0x6b8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1c      	ldr	r2, [pc, #112]	; (800411c <HAL_DMA_IRQHandler+0x6bc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1a      	ldr	r2, [pc, #104]	; (8004120 <HAL_DMA_IRQHandler+0x6c0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a19      	ldr	r2, [pc, #100]	; (8004124 <HAL_DMA_IRQHandler+0x6c4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a17      	ldr	r2, [pc, #92]	; (8004128 <HAL_DMA_IRQHandler+0x6c8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a16      	ldr	r2, [pc, #88]	; (800412c <HAL_DMA_IRQHandler+0x6cc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d12b      	bne.n	8004130 <HAL_DMA_IRQHandler+0x6d0>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	e02a      	b.n	8004144 <HAL_DMA_IRQHandler+0x6e4>
 80040ee:	bf00      	nop
 80040f0:	40020010 	.word	0x40020010
 80040f4:	40020028 	.word	0x40020028
 80040f8:	40020040 	.word	0x40020040
 80040fc:	40020058 	.word	0x40020058
 8004100:	40020070 	.word	0x40020070
 8004104:	40020088 	.word	0x40020088
 8004108:	400200a0 	.word	0x400200a0
 800410c:	400200b8 	.word	0x400200b8
 8004110:	40020410 	.word	0x40020410
 8004114:	40020428 	.word	0x40020428
 8004118:	40020440 	.word	0x40020440
 800411c:	40020458 	.word	0x40020458
 8004120:	40020470 	.word	0x40020470
 8004124:	40020488 	.word	0x40020488
 8004128:	400204a0 	.word	0x400204a0
 800412c:	400204b8 	.word	0x400204b8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	bf14      	ite	ne
 800413e:	2301      	movne	r3, #1
 8004140:	2300      	moveq	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8087 	beq.w	8004258 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	2220      	movs	r2, #32
 8004154:	409a      	lsls	r2, r3
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b04      	cmp	r3, #4
 8004164:	d139      	bne.n	80041da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0216 	bic.w	r2, r2, #22
 8004174:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004184:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_DMA_IRQHandler+0x736>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0208 	bic.w	r2, r2, #8
 80041a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	223f      	movs	r2, #63	; 0x3f
 80041b0:	409a      	lsls	r2, r3
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 834a 	beq.w	8004864 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4798      	blx	r3
          }
          return;
 80041d8:	e344      	b.n	8004864 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d018      	beq.n	800421a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d108      	bne.n	8004208 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d02c      	beq.n	8004258 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4798      	blx	r3
 8004206:	e027      	b.n	8004258 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
 8004218:	e01e      	b.n	8004258 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10f      	bne.n	8004248 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0210 	bic.w	r2, r2, #16
 8004236:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8306 	beq.w	800486e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8088 	beq.w	8004380 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2204      	movs	r2, #4
 8004274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a7a      	ldr	r2, [pc, #488]	; (8004468 <HAL_DMA_IRQHandler+0xa08>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d04a      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a79      	ldr	r2, [pc, #484]	; (800446c <HAL_DMA_IRQHandler+0xa0c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d045      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a77      	ldr	r2, [pc, #476]	; (8004470 <HAL_DMA_IRQHandler+0xa10>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d040      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a76      	ldr	r2, [pc, #472]	; (8004474 <HAL_DMA_IRQHandler+0xa14>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d03b      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a74      	ldr	r2, [pc, #464]	; (8004478 <HAL_DMA_IRQHandler+0xa18>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d036      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a73      	ldr	r2, [pc, #460]	; (800447c <HAL_DMA_IRQHandler+0xa1c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d031      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a71      	ldr	r2, [pc, #452]	; (8004480 <HAL_DMA_IRQHandler+0xa20>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d02c      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a70      	ldr	r2, [pc, #448]	; (8004484 <HAL_DMA_IRQHandler+0xa24>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d027      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a6e      	ldr	r2, [pc, #440]	; (8004488 <HAL_DMA_IRQHandler+0xa28>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d022      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a6d      	ldr	r2, [pc, #436]	; (800448c <HAL_DMA_IRQHandler+0xa2c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d01d      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a6b      	ldr	r2, [pc, #428]	; (8004490 <HAL_DMA_IRQHandler+0xa30>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d018      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a6a      	ldr	r2, [pc, #424]	; (8004494 <HAL_DMA_IRQHandler+0xa34>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a68      	ldr	r2, [pc, #416]	; (8004498 <HAL_DMA_IRQHandler+0xa38>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a67      	ldr	r2, [pc, #412]	; (800449c <HAL_DMA_IRQHandler+0xa3c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a65      	ldr	r2, [pc, #404]	; (80044a0 <HAL_DMA_IRQHandler+0xa40>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a64      	ldr	r2, [pc, #400]	; (80044a4 <HAL_DMA_IRQHandler+0xa44>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d108      	bne.n	800432a <HAL_DMA_IRQHandler+0x8ca>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e007      	b.n	800433a <HAL_DMA_IRQHandler+0x8da>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3301      	adds	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004342:	429a      	cmp	r2, r3
 8004344:	d307      	bcc.n	8004356 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f2      	bne.n	800433a <HAL_DMA_IRQHandler+0x8da>
 8004354:	e000      	b.n	8004358 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004356:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d004      	beq.n	8004378 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2203      	movs	r2, #3
 8004372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004376:	e003      	b.n	8004380 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 8272 	beq.w	800486e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
 8004392:	e26c      	b.n	800486e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a43      	ldr	r2, [pc, #268]	; (80044a8 <HAL_DMA_IRQHandler+0xa48>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d022      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a42      	ldr	r2, [pc, #264]	; (80044ac <HAL_DMA_IRQHandler+0xa4c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d01d      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a40      	ldr	r2, [pc, #256]	; (80044b0 <HAL_DMA_IRQHandler+0xa50>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a3f      	ldr	r2, [pc, #252]	; (80044b4 <HAL_DMA_IRQHandler+0xa54>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d013      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a3d      	ldr	r2, [pc, #244]	; (80044b8 <HAL_DMA_IRQHandler+0xa58>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a3c      	ldr	r2, [pc, #240]	; (80044bc <HAL_DMA_IRQHandler+0xa5c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a3a      	ldr	r2, [pc, #232]	; (80044c0 <HAL_DMA_IRQHandler+0xa60>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a39      	ldr	r2, [pc, #228]	; (80044c4 <HAL_DMA_IRQHandler+0xa64>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d101      	bne.n	80043e8 <HAL_DMA_IRQHandler+0x988>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <HAL_DMA_IRQHandler+0x98a>
 80043e8:	2300      	movs	r3, #0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 823f 	beq.w	800486e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	2204      	movs	r2, #4
 8004402:	409a      	lsls	r2, r3
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	4013      	ands	r3, r2
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80cd 	beq.w	80045a8 <HAL_DMA_IRQHandler+0xb48>
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80c7 	beq.w	80045a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2204      	movs	r2, #4
 8004424:	409a      	lsls	r2, r3
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d049      	beq.n	80044c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8210 	beq.w	8004868 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004450:	e20a      	b.n	8004868 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 8206 	beq.w	8004868 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004464:	e200      	b.n	8004868 <HAL_DMA_IRQHandler+0xe08>
 8004466:	bf00      	nop
 8004468:	40020010 	.word	0x40020010
 800446c:	40020028 	.word	0x40020028
 8004470:	40020040 	.word	0x40020040
 8004474:	40020058 	.word	0x40020058
 8004478:	40020070 	.word	0x40020070
 800447c:	40020088 	.word	0x40020088
 8004480:	400200a0 	.word	0x400200a0
 8004484:	400200b8 	.word	0x400200b8
 8004488:	40020410 	.word	0x40020410
 800448c:	40020428 	.word	0x40020428
 8004490:	40020440 	.word	0x40020440
 8004494:	40020458 	.word	0x40020458
 8004498:	40020470 	.word	0x40020470
 800449c:	40020488 	.word	0x40020488
 80044a0:	400204a0 	.word	0x400204a0
 80044a4:	400204b8 	.word	0x400204b8
 80044a8:	58025408 	.word	0x58025408
 80044ac:	5802541c 	.word	0x5802541c
 80044b0:	58025430 	.word	0x58025430
 80044b4:	58025444 	.word	0x58025444
 80044b8:	58025458 	.word	0x58025458
 80044bc:	5802546c 	.word	0x5802546c
 80044c0:	58025480 	.word	0x58025480
 80044c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d160      	bne.n	8004594 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a8c      	ldr	r2, [pc, #560]	; (8004708 <HAL_DMA_IRQHandler+0xca8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d04a      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a8a      	ldr	r2, [pc, #552]	; (800470c <HAL_DMA_IRQHandler+0xcac>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d045      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a89      	ldr	r2, [pc, #548]	; (8004710 <HAL_DMA_IRQHandler+0xcb0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d040      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a87      	ldr	r2, [pc, #540]	; (8004714 <HAL_DMA_IRQHandler+0xcb4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d03b      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a86      	ldr	r2, [pc, #536]	; (8004718 <HAL_DMA_IRQHandler+0xcb8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d036      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a84      	ldr	r2, [pc, #528]	; (800471c <HAL_DMA_IRQHandler+0xcbc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d031      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a83      	ldr	r2, [pc, #524]	; (8004720 <HAL_DMA_IRQHandler+0xcc0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d02c      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a81      	ldr	r2, [pc, #516]	; (8004724 <HAL_DMA_IRQHandler+0xcc4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d027      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a80      	ldr	r2, [pc, #512]	; (8004728 <HAL_DMA_IRQHandler+0xcc8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d022      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a7e      	ldr	r2, [pc, #504]	; (800472c <HAL_DMA_IRQHandler+0xccc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01d      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a7d      	ldr	r2, [pc, #500]	; (8004730 <HAL_DMA_IRQHandler+0xcd0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d018      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a7b      	ldr	r2, [pc, #492]	; (8004734 <HAL_DMA_IRQHandler+0xcd4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a7a      	ldr	r2, [pc, #488]	; (8004738 <HAL_DMA_IRQHandler+0xcd8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00e      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a78      	ldr	r2, [pc, #480]	; (800473c <HAL_DMA_IRQHandler+0xcdc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d009      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a77      	ldr	r2, [pc, #476]	; (8004740 <HAL_DMA_IRQHandler+0xce0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d004      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a75      	ldr	r2, [pc, #468]	; (8004744 <HAL_DMA_IRQHandler+0xce4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d108      	bne.n	8004584 <HAL_DMA_IRQHandler+0xb24>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0208 	bic.w	r2, r2, #8
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e007      	b.n	8004594 <HAL_DMA_IRQHandler+0xb34>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0204 	bic.w	r2, r2, #4
 8004592:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 8165 	beq.w	8004868 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045a6:	e15f      	b.n	8004868 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	2202      	movs	r2, #2
 80045b2:	409a      	lsls	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80c5 	beq.w	8004748 <HAL_DMA_IRQHandler+0xce8>
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80bf 	beq.w	8004748 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2202      	movs	r2, #2
 80045d4:	409a      	lsls	r2, r3
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d018      	beq.n	8004616 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 813a 	beq.w	800486c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004600:	e134      	b.n	800486c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8130 	beq.w	800486c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004614:	e12a      	b.n	800486c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d168      	bne.n	80046f2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a38      	ldr	r2, [pc, #224]	; (8004708 <HAL_DMA_IRQHandler+0xca8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d04a      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a37      	ldr	r2, [pc, #220]	; (800470c <HAL_DMA_IRQHandler+0xcac>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d045      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a35      	ldr	r2, [pc, #212]	; (8004710 <HAL_DMA_IRQHandler+0xcb0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d040      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a34      	ldr	r2, [pc, #208]	; (8004714 <HAL_DMA_IRQHandler+0xcb4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d03b      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a32      	ldr	r2, [pc, #200]	; (8004718 <HAL_DMA_IRQHandler+0xcb8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d036      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a31      	ldr	r2, [pc, #196]	; (800471c <HAL_DMA_IRQHandler+0xcbc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d031      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2f      	ldr	r2, [pc, #188]	; (8004720 <HAL_DMA_IRQHandler+0xcc0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d02c      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2e      	ldr	r2, [pc, #184]	; (8004724 <HAL_DMA_IRQHandler+0xcc4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d027      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <HAL_DMA_IRQHandler+0xcc8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d022      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2b      	ldr	r2, [pc, #172]	; (800472c <HAL_DMA_IRQHandler+0xccc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d01d      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a29      	ldr	r2, [pc, #164]	; (8004730 <HAL_DMA_IRQHandler+0xcd0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d018      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a28      	ldr	r2, [pc, #160]	; (8004734 <HAL_DMA_IRQHandler+0xcd4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a26      	ldr	r2, [pc, #152]	; (8004738 <HAL_DMA_IRQHandler+0xcd8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00e      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a25      	ldr	r2, [pc, #148]	; (800473c <HAL_DMA_IRQHandler+0xcdc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d009      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a23      	ldr	r2, [pc, #140]	; (8004740 <HAL_DMA_IRQHandler+0xce0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a22      	ldr	r2, [pc, #136]	; (8004744 <HAL_DMA_IRQHandler+0xce4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d108      	bne.n	80046d2 <HAL_DMA_IRQHandler+0xc72>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0214 	bic.w	r2, r2, #20
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	e007      	b.n	80046e2 <HAL_DMA_IRQHandler+0xc82>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 020a 	bic.w	r2, r2, #10
 80046e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 80b8 	beq.w	800486c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004704:	e0b2      	b.n	800486c <HAL_DMA_IRQHandler+0xe0c>
 8004706:	bf00      	nop
 8004708:	40020010 	.word	0x40020010
 800470c:	40020028 	.word	0x40020028
 8004710:	40020040 	.word	0x40020040
 8004714:	40020058 	.word	0x40020058
 8004718:	40020070 	.word	0x40020070
 800471c:	40020088 	.word	0x40020088
 8004720:	400200a0 	.word	0x400200a0
 8004724:	400200b8 	.word	0x400200b8
 8004728:	40020410 	.word	0x40020410
 800472c:	40020428 	.word	0x40020428
 8004730:	40020440 	.word	0x40020440
 8004734:	40020458 	.word	0x40020458
 8004738:	40020470 	.word	0x40020470
 800473c:	40020488 	.word	0x40020488
 8004740:	400204a0 	.word	0x400204a0
 8004744:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	2208      	movs	r2, #8
 8004752:	409a      	lsls	r2, r3
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	4013      	ands	r3, r2
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8088 	beq.w	800486e <HAL_DMA_IRQHandler+0xe0e>
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8082 	beq.w	800486e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a41      	ldr	r2, [pc, #260]	; (8004874 <HAL_DMA_IRQHandler+0xe14>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d04a      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a3f      	ldr	r2, [pc, #252]	; (8004878 <HAL_DMA_IRQHandler+0xe18>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d045      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a3e      	ldr	r2, [pc, #248]	; (800487c <HAL_DMA_IRQHandler+0xe1c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d040      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a3c      	ldr	r2, [pc, #240]	; (8004880 <HAL_DMA_IRQHandler+0xe20>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d03b      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a3b      	ldr	r2, [pc, #236]	; (8004884 <HAL_DMA_IRQHandler+0xe24>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d036      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a39      	ldr	r2, [pc, #228]	; (8004888 <HAL_DMA_IRQHandler+0xe28>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d031      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a38      	ldr	r2, [pc, #224]	; (800488c <HAL_DMA_IRQHandler+0xe2c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d02c      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a36      	ldr	r2, [pc, #216]	; (8004890 <HAL_DMA_IRQHandler+0xe30>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d027      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a35      	ldr	r2, [pc, #212]	; (8004894 <HAL_DMA_IRQHandler+0xe34>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d022      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a33      	ldr	r2, [pc, #204]	; (8004898 <HAL_DMA_IRQHandler+0xe38>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01d      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a32      	ldr	r2, [pc, #200]	; (800489c <HAL_DMA_IRQHandler+0xe3c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d018      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a30      	ldr	r2, [pc, #192]	; (80048a0 <HAL_DMA_IRQHandler+0xe40>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2f      	ldr	r2, [pc, #188]	; (80048a4 <HAL_DMA_IRQHandler+0xe44>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00e      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a2d      	ldr	r2, [pc, #180]	; (80048a8 <HAL_DMA_IRQHandler+0xe48>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a2c      	ldr	r2, [pc, #176]	; (80048ac <HAL_DMA_IRQHandler+0xe4c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d004      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a2a      	ldr	r2, [pc, #168]	; (80048b0 <HAL_DMA_IRQHandler+0xe50>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <HAL_DMA_IRQHandler+0xdbc>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 021c 	bic.w	r2, r2, #28
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e007      	b.n	800482c <HAL_DMA_IRQHandler+0xdcc>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 020e 	bic.w	r2, r2, #14
 800482a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	2201      	movs	r2, #1
 8004836:	409a      	lsls	r2, r3
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
 8004862:	e004      	b.n	800486e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004864:	bf00      	nop
 8004866:	e002      	b.n	800486e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004868:	bf00      	nop
 800486a:	e000      	b.n	800486e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800486e:	3728      	adds	r7, #40	; 0x28
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40020010 	.word	0x40020010
 8004878:	40020028 	.word	0x40020028
 800487c:	40020040 	.word	0x40020040
 8004880:	40020058 	.word	0x40020058
 8004884:	40020070 	.word	0x40020070
 8004888:	40020088 	.word	0x40020088
 800488c:	400200a0 	.word	0x400200a0
 8004890:	400200b8 	.word	0x400200b8
 8004894:	40020410 	.word	0x40020410
 8004898:	40020428 	.word	0x40020428
 800489c:	40020440 	.word	0x40020440
 80048a0:	40020458 	.word	0x40020458
 80048a4:	40020470 	.word	0x40020470
 80048a8:	40020488 	.word	0x40020488
 80048ac:	400204a0 	.word	0x400204a0
 80048b0:	400204b8 	.word	0x400204b8

080048b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048cc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a84      	ldr	r2, [pc, #528]	; (8004ae4 <DMA_SetConfig+0x230>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d072      	beq.n	80049be <DMA_SetConfig+0x10a>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a82      	ldr	r2, [pc, #520]	; (8004ae8 <DMA_SetConfig+0x234>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d06d      	beq.n	80049be <DMA_SetConfig+0x10a>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a81      	ldr	r2, [pc, #516]	; (8004aec <DMA_SetConfig+0x238>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d068      	beq.n	80049be <DMA_SetConfig+0x10a>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a7f      	ldr	r2, [pc, #508]	; (8004af0 <DMA_SetConfig+0x23c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d063      	beq.n	80049be <DMA_SetConfig+0x10a>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a7e      	ldr	r2, [pc, #504]	; (8004af4 <DMA_SetConfig+0x240>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d05e      	beq.n	80049be <DMA_SetConfig+0x10a>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a7c      	ldr	r2, [pc, #496]	; (8004af8 <DMA_SetConfig+0x244>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d059      	beq.n	80049be <DMA_SetConfig+0x10a>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a7b      	ldr	r2, [pc, #492]	; (8004afc <DMA_SetConfig+0x248>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d054      	beq.n	80049be <DMA_SetConfig+0x10a>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a79      	ldr	r2, [pc, #484]	; (8004b00 <DMA_SetConfig+0x24c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d04f      	beq.n	80049be <DMA_SetConfig+0x10a>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a78      	ldr	r2, [pc, #480]	; (8004b04 <DMA_SetConfig+0x250>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d04a      	beq.n	80049be <DMA_SetConfig+0x10a>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a76      	ldr	r2, [pc, #472]	; (8004b08 <DMA_SetConfig+0x254>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d045      	beq.n	80049be <DMA_SetConfig+0x10a>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a75      	ldr	r2, [pc, #468]	; (8004b0c <DMA_SetConfig+0x258>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d040      	beq.n	80049be <DMA_SetConfig+0x10a>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a73      	ldr	r2, [pc, #460]	; (8004b10 <DMA_SetConfig+0x25c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d03b      	beq.n	80049be <DMA_SetConfig+0x10a>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a72      	ldr	r2, [pc, #456]	; (8004b14 <DMA_SetConfig+0x260>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d036      	beq.n	80049be <DMA_SetConfig+0x10a>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a70      	ldr	r2, [pc, #448]	; (8004b18 <DMA_SetConfig+0x264>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d031      	beq.n	80049be <DMA_SetConfig+0x10a>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a6f      	ldr	r2, [pc, #444]	; (8004b1c <DMA_SetConfig+0x268>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d02c      	beq.n	80049be <DMA_SetConfig+0x10a>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a6d      	ldr	r2, [pc, #436]	; (8004b20 <DMA_SetConfig+0x26c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d027      	beq.n	80049be <DMA_SetConfig+0x10a>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a6c      	ldr	r2, [pc, #432]	; (8004b24 <DMA_SetConfig+0x270>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d022      	beq.n	80049be <DMA_SetConfig+0x10a>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a6a      	ldr	r2, [pc, #424]	; (8004b28 <DMA_SetConfig+0x274>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01d      	beq.n	80049be <DMA_SetConfig+0x10a>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a69      	ldr	r2, [pc, #420]	; (8004b2c <DMA_SetConfig+0x278>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d018      	beq.n	80049be <DMA_SetConfig+0x10a>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a67      	ldr	r2, [pc, #412]	; (8004b30 <DMA_SetConfig+0x27c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <DMA_SetConfig+0x10a>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a66      	ldr	r2, [pc, #408]	; (8004b34 <DMA_SetConfig+0x280>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <DMA_SetConfig+0x10a>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a64      	ldr	r2, [pc, #400]	; (8004b38 <DMA_SetConfig+0x284>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <DMA_SetConfig+0x10a>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a63      	ldr	r2, [pc, #396]	; (8004b3c <DMA_SetConfig+0x288>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <DMA_SetConfig+0x10a>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a61      	ldr	r2, [pc, #388]	; (8004b40 <DMA_SetConfig+0x28c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d101      	bne.n	80049c2 <DMA_SetConfig+0x10e>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <DMA_SetConfig+0x110>
 80049c2:	2300      	movs	r3, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00d      	beq.n	80049e4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80049d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d004      	beq.n	80049e4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049e2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a3e      	ldr	r2, [pc, #248]	; (8004ae4 <DMA_SetConfig+0x230>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d04a      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a3d      	ldr	r2, [pc, #244]	; (8004ae8 <DMA_SetConfig+0x234>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d045      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a3b      	ldr	r2, [pc, #236]	; (8004aec <DMA_SetConfig+0x238>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d040      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a3a      	ldr	r2, [pc, #232]	; (8004af0 <DMA_SetConfig+0x23c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d03b      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a38      	ldr	r2, [pc, #224]	; (8004af4 <DMA_SetConfig+0x240>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d036      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a37      	ldr	r2, [pc, #220]	; (8004af8 <DMA_SetConfig+0x244>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d031      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a35      	ldr	r2, [pc, #212]	; (8004afc <DMA_SetConfig+0x248>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d02c      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a34      	ldr	r2, [pc, #208]	; (8004b00 <DMA_SetConfig+0x24c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d027      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a32      	ldr	r2, [pc, #200]	; (8004b04 <DMA_SetConfig+0x250>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d022      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a31      	ldr	r2, [pc, #196]	; (8004b08 <DMA_SetConfig+0x254>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d01d      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2f      	ldr	r2, [pc, #188]	; (8004b0c <DMA_SetConfig+0x258>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d018      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2e      	ldr	r2, [pc, #184]	; (8004b10 <DMA_SetConfig+0x25c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d013      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a2c      	ldr	r2, [pc, #176]	; (8004b14 <DMA_SetConfig+0x260>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00e      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2b      	ldr	r2, [pc, #172]	; (8004b18 <DMA_SetConfig+0x264>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d009      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a29      	ldr	r2, [pc, #164]	; (8004b1c <DMA_SetConfig+0x268>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d004      	beq.n	8004a84 <DMA_SetConfig+0x1d0>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a28      	ldr	r2, [pc, #160]	; (8004b20 <DMA_SetConfig+0x26c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d101      	bne.n	8004a88 <DMA_SetConfig+0x1d4>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <DMA_SetConfig+0x1d6>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d05a      	beq.n	8004b44 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	223f      	movs	r2, #63	; 0x3f
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004aac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d108      	bne.n	8004ad0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ace:	e087      	b.n	8004be0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	60da      	str	r2, [r3, #12]
}
 8004ae0:	e07e      	b.n	8004be0 <DMA_SetConfig+0x32c>
 8004ae2:	bf00      	nop
 8004ae4:	40020010 	.word	0x40020010
 8004ae8:	40020028 	.word	0x40020028
 8004aec:	40020040 	.word	0x40020040
 8004af0:	40020058 	.word	0x40020058
 8004af4:	40020070 	.word	0x40020070
 8004af8:	40020088 	.word	0x40020088
 8004afc:	400200a0 	.word	0x400200a0
 8004b00:	400200b8 	.word	0x400200b8
 8004b04:	40020410 	.word	0x40020410
 8004b08:	40020428 	.word	0x40020428
 8004b0c:	40020440 	.word	0x40020440
 8004b10:	40020458 	.word	0x40020458
 8004b14:	40020470 	.word	0x40020470
 8004b18:	40020488 	.word	0x40020488
 8004b1c:	400204a0 	.word	0x400204a0
 8004b20:	400204b8 	.word	0x400204b8
 8004b24:	58025408 	.word	0x58025408
 8004b28:	5802541c 	.word	0x5802541c
 8004b2c:	58025430 	.word	0x58025430
 8004b30:	58025444 	.word	0x58025444
 8004b34:	58025458 	.word	0x58025458
 8004b38:	5802546c 	.word	0x5802546c
 8004b3c:	58025480 	.word	0x58025480
 8004b40:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a28      	ldr	r2, [pc, #160]	; (8004bec <DMA_SetConfig+0x338>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d022      	beq.n	8004b94 <DMA_SetConfig+0x2e0>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a27      	ldr	r2, [pc, #156]	; (8004bf0 <DMA_SetConfig+0x33c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d01d      	beq.n	8004b94 <DMA_SetConfig+0x2e0>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a25      	ldr	r2, [pc, #148]	; (8004bf4 <DMA_SetConfig+0x340>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <DMA_SetConfig+0x2e0>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a24      	ldr	r2, [pc, #144]	; (8004bf8 <DMA_SetConfig+0x344>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <DMA_SetConfig+0x2e0>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a22      	ldr	r2, [pc, #136]	; (8004bfc <DMA_SetConfig+0x348>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <DMA_SetConfig+0x2e0>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a21      	ldr	r2, [pc, #132]	; (8004c00 <DMA_SetConfig+0x34c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <DMA_SetConfig+0x2e0>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1f      	ldr	r2, [pc, #124]	; (8004c04 <DMA_SetConfig+0x350>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <DMA_SetConfig+0x2e0>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <DMA_SetConfig+0x354>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d101      	bne.n	8004b98 <DMA_SetConfig+0x2e4>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <DMA_SetConfig+0x2e6>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d020      	beq.n	8004be0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba2:	f003 031f 	and.w	r3, r3, #31
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	d108      	bne.n	8004bd0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	60da      	str	r2, [r3, #12]
}
 8004bce:	e007      	b.n	8004be0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	60da      	str	r2, [r3, #12]
}
 8004be0:	bf00      	nop
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	58025408 	.word	0x58025408
 8004bf0:	5802541c 	.word	0x5802541c
 8004bf4:	58025430 	.word	0x58025430
 8004bf8:	58025444 	.word	0x58025444
 8004bfc:	58025458 	.word	0x58025458
 8004c00:	5802546c 	.word	0x5802546c
 8004c04:	58025480 	.word	0x58025480
 8004c08:	58025494 	.word	0x58025494

08004c0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a42      	ldr	r2, [pc, #264]	; (8004d24 <DMA_CalcBaseAndBitshift+0x118>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d04a      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a41      	ldr	r2, [pc, #260]	; (8004d28 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d045      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a3f      	ldr	r2, [pc, #252]	; (8004d2c <DMA_CalcBaseAndBitshift+0x120>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d040      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a3e      	ldr	r2, [pc, #248]	; (8004d30 <DMA_CalcBaseAndBitshift+0x124>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d03b      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a3c      	ldr	r2, [pc, #240]	; (8004d34 <DMA_CalcBaseAndBitshift+0x128>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d036      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a3b      	ldr	r2, [pc, #236]	; (8004d38 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d031      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a39      	ldr	r2, [pc, #228]	; (8004d3c <DMA_CalcBaseAndBitshift+0x130>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d02c      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a38      	ldr	r2, [pc, #224]	; (8004d40 <DMA_CalcBaseAndBitshift+0x134>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d027      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a36      	ldr	r2, [pc, #216]	; (8004d44 <DMA_CalcBaseAndBitshift+0x138>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d022      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a35      	ldr	r2, [pc, #212]	; (8004d48 <DMA_CalcBaseAndBitshift+0x13c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d01d      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a33      	ldr	r2, [pc, #204]	; (8004d4c <DMA_CalcBaseAndBitshift+0x140>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d018      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a32      	ldr	r2, [pc, #200]	; (8004d50 <DMA_CalcBaseAndBitshift+0x144>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a30      	ldr	r2, [pc, #192]	; (8004d54 <DMA_CalcBaseAndBitshift+0x148>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00e      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a2f      	ldr	r2, [pc, #188]	; (8004d58 <DMA_CalcBaseAndBitshift+0x14c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2d      	ldr	r2, [pc, #180]	; (8004d5c <DMA_CalcBaseAndBitshift+0x150>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a2c      	ldr	r2, [pc, #176]	; (8004d60 <DMA_CalcBaseAndBitshift+0x154>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <DMA_CalcBaseAndBitshift+0xac>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <DMA_CalcBaseAndBitshift+0xae>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d024      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	3b10      	subs	r3, #16
 8004cc6:	4a27      	ldr	r2, [pc, #156]	; (8004d64 <DMA_CalcBaseAndBitshift+0x158>)
 8004cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	4a24      	ldr	r2, [pc, #144]	; (8004d68 <DMA_CalcBaseAndBitshift+0x15c>)
 8004cd8:	5cd3      	ldrb	r3, [r2, r3]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d908      	bls.n	8004cf8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	4b1f      	ldr	r3, [pc, #124]	; (8004d6c <DMA_CalcBaseAndBitshift+0x160>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	1d1a      	adds	r2, r3, #4
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	659a      	str	r2, [r3, #88]	; 0x58
 8004cf6:	e00d      	b.n	8004d14 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <DMA_CalcBaseAndBitshift+0x160>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6593      	str	r3, [r2, #88]	; 0x58
 8004d06:	e005      	b.n	8004d14 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	40020010 	.word	0x40020010
 8004d28:	40020028 	.word	0x40020028
 8004d2c:	40020040 	.word	0x40020040
 8004d30:	40020058 	.word	0x40020058
 8004d34:	40020070 	.word	0x40020070
 8004d38:	40020088 	.word	0x40020088
 8004d3c:	400200a0 	.word	0x400200a0
 8004d40:	400200b8 	.word	0x400200b8
 8004d44:	40020410 	.word	0x40020410
 8004d48:	40020428 	.word	0x40020428
 8004d4c:	40020440 	.word	0x40020440
 8004d50:	40020458 	.word	0x40020458
 8004d54:	40020470 	.word	0x40020470
 8004d58:	40020488 	.word	0x40020488
 8004d5c:	400204a0 	.word	0x400204a0
 8004d60:	400204b8 	.word	0x400204b8
 8004d64:	aaaaaaab 	.word	0xaaaaaaab
 8004d68:	0800e898 	.word	0x0800e898
 8004d6c:	fffffc00 	.word	0xfffffc00

08004d70 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d120      	bne.n	8004dc6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d858      	bhi.n	8004e3e <DMA_CheckFifoParam+0xce>
 8004d8c:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <DMA_CheckFifoParam+0x24>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004da5 	.word	0x08004da5
 8004d98:	08004db7 	.word	0x08004db7
 8004d9c:	08004da5 	.word	0x08004da5
 8004da0:	08004e3f 	.word	0x08004e3f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d048      	beq.n	8004e42 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004db4:	e045      	b.n	8004e42 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dbe:	d142      	bne.n	8004e46 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dc4:	e03f      	b.n	8004e46 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dce:	d123      	bne.n	8004e18 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d838      	bhi.n	8004e4a <DMA_CheckFifoParam+0xda>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <DMA_CheckFifoParam+0x70>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004df1 	.word	0x08004df1
 8004de4:	08004df7 	.word	0x08004df7
 8004de8:	08004df1 	.word	0x08004df1
 8004dec:	08004e09 	.word	0x08004e09
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
        break;
 8004df4:	e030      	b.n	8004e58 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d025      	beq.n	8004e4e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e06:	e022      	b.n	8004e4e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e10:	d11f      	bne.n	8004e52 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e16:	e01c      	b.n	8004e52 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d902      	bls.n	8004e26 <DMA_CheckFifoParam+0xb6>
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d003      	beq.n	8004e2c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e24:	e018      	b.n	8004e58 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	73fb      	strb	r3, [r7, #15]
        break;
 8004e2a:	e015      	b.n	8004e58 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00e      	beq.n	8004e56 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8004e3c:	e00b      	b.n	8004e56 <DMA_CheckFifoParam+0xe6>
        break;
 8004e3e:	bf00      	nop
 8004e40:	e00a      	b.n	8004e58 <DMA_CheckFifoParam+0xe8>
        break;
 8004e42:	bf00      	nop
 8004e44:	e008      	b.n	8004e58 <DMA_CheckFifoParam+0xe8>
        break;
 8004e46:	bf00      	nop
 8004e48:	e006      	b.n	8004e58 <DMA_CheckFifoParam+0xe8>
        break;
 8004e4a:	bf00      	nop
 8004e4c:	e004      	b.n	8004e58 <DMA_CheckFifoParam+0xe8>
        break;
 8004e4e:	bf00      	nop
 8004e50:	e002      	b.n	8004e58 <DMA_CheckFifoParam+0xe8>
        break;
 8004e52:	bf00      	nop
 8004e54:	e000      	b.n	8004e58 <DMA_CheckFifoParam+0xe8>
    break;
 8004e56:	bf00      	nop
    }
  }

  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop

08004e68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a38      	ldr	r2, [pc, #224]	; (8004f5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d022      	beq.n	8004ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a36      	ldr	r2, [pc, #216]	; (8004f60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01d      	beq.n	8004ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a35      	ldr	r2, [pc, #212]	; (8004f64 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d018      	beq.n	8004ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a33      	ldr	r2, [pc, #204]	; (8004f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a32      	ldr	r2, [pc, #200]	; (8004f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00e      	beq.n	8004ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a30      	ldr	r2, [pc, #192]	; (8004f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d009      	beq.n	8004ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a2f      	ldr	r2, [pc, #188]	; (8004f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d004      	beq.n	8004ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a2d      	ldr	r2, [pc, #180]	; (8004f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d101      	bne.n	8004eca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d01a      	beq.n	8004f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	3b08      	subs	r3, #8
 8004ed8:	4a28      	ldr	r2, [pc, #160]	; (8004f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	091b      	lsrs	r3, r3, #4
 8004ee0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4b26      	ldr	r3, [pc, #152]	; (8004f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	461a      	mov	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a24      	ldr	r2, [pc, #144]	; (8004f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ef4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 031f 	and.w	r3, r3, #31
 8004efc:	2201      	movs	r2, #1
 8004efe:	409a      	lsls	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f04:	e024      	b.n	8004f50 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	3b10      	subs	r3, #16
 8004f0e:	4a1e      	ldr	r2, [pc, #120]	; (8004f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	091b      	lsrs	r3, r3, #4
 8004f16:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4a1c      	ldr	r2, [pc, #112]	; (8004f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d806      	bhi.n	8004f2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4a1b      	ldr	r2, [pc, #108]	; (8004f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d902      	bls.n	8004f2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4b18      	ldr	r3, [pc, #96]	; (8004f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	461a      	mov	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a16      	ldr	r2, [pc, #88]	; (8004f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f40:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 031f 	and.w	r3, r3, #31
 8004f48:	2201      	movs	r2, #1
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	58025408 	.word	0x58025408
 8004f60:	5802541c 	.word	0x5802541c
 8004f64:	58025430 	.word	0x58025430
 8004f68:	58025444 	.word	0x58025444
 8004f6c:	58025458 	.word	0x58025458
 8004f70:	5802546c 	.word	0x5802546c
 8004f74:	58025480 	.word	0x58025480
 8004f78:	58025494 	.word	0x58025494
 8004f7c:	cccccccd 	.word	0xcccccccd
 8004f80:	16009600 	.word	0x16009600
 8004f84:	58025880 	.word	0x58025880
 8004f88:	aaaaaaab 	.word	0xaaaaaaab
 8004f8c:	400204b8 	.word	0x400204b8
 8004f90:	4002040f 	.word	0x4002040f
 8004f94:	10008200 	.word	0x10008200
 8004f98:	40020880 	.word	0x40020880

08004f9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d04a      	beq.n	8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d847      	bhi.n	8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a25      	ldr	r2, [pc, #148]	; (8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d022      	beq.n	8005008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a24      	ldr	r2, [pc, #144]	; (8005058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d01d      	beq.n	8005008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a22      	ldr	r2, [pc, #136]	; (800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d018      	beq.n	8005008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a21      	ldr	r2, [pc, #132]	; (8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d013      	beq.n	8005008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1f      	ldr	r2, [pc, #124]	; (8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00e      	beq.n	8005008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d009      	beq.n	8005008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1c      	ldr	r2, [pc, #112]	; (800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1b      	ldr	r2, [pc, #108]	; (8005070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d101      	bne.n	800500c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800500c:	2300      	movs	r3, #0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4b17      	ldr	r3, [pc, #92]	; (8005074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	461a      	mov	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a15      	ldr	r2, [pc, #84]	; (8005078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005024:	671a      	str	r2, [r3, #112]	; 0x70
 8005026:	e009      	b.n	800503c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4b14      	ldr	r3, [pc, #80]	; (800507c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	461a      	mov	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a11      	ldr	r2, [pc, #68]	; (8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800503a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3b01      	subs	r3, #1
 8005040:	2201      	movs	r2, #1
 8005042:	409a      	lsls	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	58025408 	.word	0x58025408
 8005058:	5802541c 	.word	0x5802541c
 800505c:	58025430 	.word	0x58025430
 8005060:	58025444 	.word	0x58025444
 8005064:	58025458 	.word	0x58025458
 8005068:	5802546c 	.word	0x5802546c
 800506c:	58025480 	.word	0x58025480
 8005070:	58025494 	.word	0x58025494
 8005074:	1600963f 	.word	0x1600963f
 8005078:	58025940 	.word	0x58025940
 800507c:	1000823f 	.word	0x1000823f
 8005080:	40020940 	.word	0x40020940

08005084 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e04f      	b.n	8005136 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fb fca4 	bl	80009f8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4b20      	ldr	r3, [pc, #128]	; (8005140 <HAL_DMA2D_Init+0xbc>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6851      	ldr	r1, [r2, #4]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	69d2      	ldr	r2, [r2, #28]
 80050ca:	4311      	orrs	r1, r2
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	430b      	orrs	r3, r1
 80050d2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050da:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <HAL_DMA2D_Init+0xc0>)
 80050dc:	4013      	ands	r3, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6891      	ldr	r1, [r2, #8]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6992      	ldr	r2, [r2, #24]
 80050e6:	4311      	orrs	r1, r2
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	430b      	orrs	r3, r1
 80050ee:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050f6:	4b14      	ldr	r3, [pc, #80]	; (8005148 <HAL_DMA2D_Init+0xc4>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68d1      	ldr	r1, [r2, #12]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6812      	ldr	r2, [r2, #0]
 8005102:	430b      	orrs	r3, r1
 8005104:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	051a      	lsls	r2, r3, #20
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	055b      	lsls	r3, r3, #21
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	fff8ffbf 	.word	0xfff8ffbf
 8005144:	fffffef8 	.word	0xfffffef8
 8005148:	ffff0000 	.word	0xffff0000

0800514c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d104      	bne.n	800516e <HAL_DMA2D_ConfigLayer+0x22>
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	4613      	mov	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_DMA2D_ConfigLayer+0x30>
 8005178:	2302      	movs	r3, #2
 800517a:	e092      	b.n	80052a2 <HAL_DMA2D_ConfigLayer+0x156>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	4613      	mov	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	1a9b      	subs	r3, r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	3328      	adds	r3, #40	; 0x28
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	4413      	add	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	041b      	lsls	r3, r3, #16
 80051a8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80051b0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80051bc:	4b3c      	ldr	r3, [pc, #240]	; (80052b0 <HAL_DMA2D_ConfigLayer+0x164>)
 80051be:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b0a      	cmp	r3, #10
 80051c6:	d003      	beq.n	80051d0 <HAL_DMA2D_ConfigLayer+0x84>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b09      	cmp	r3, #9
 80051ce:	d107      	bne.n	80051e0 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	e005      	b.n	80051ec <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	061b      	lsls	r3, r3, #24
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d120      	bne.n	8005234 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	43db      	mvns	r3, r3
 80051fc:	ea02 0103 	and.w	r1, r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	430a      	orrs	r2, r1
 8005208:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b0a      	cmp	r3, #10
 800521a:	d003      	beq.n	8005224 <HAL_DMA2D_ConfigLayer+0xd8>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b09      	cmp	r3, #9
 8005222:	d135      	bne.n	8005290 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005230:	629a      	str	r2, [r3, #40]	; 0x28
 8005232:	e02d      	b.n	8005290 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b0b      	cmp	r3, #11
 800523a:	d109      	bne.n	8005250 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	049b      	lsls	r3, r3, #18
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800524e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69da      	ldr	r2, [r3, #28]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	43db      	mvns	r3, r3
 800525a:	ea02 0103 	and.w	r1, r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	430a      	orrs	r2, r1
 8005266:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b0a      	cmp	r3, #10
 8005278:	d003      	beq.n	8005282 <HAL_DMA2D_ConfigLayer+0x136>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b09      	cmp	r3, #9
 8005280:	d106      	bne.n	8005290 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800528e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	ff33000f 	.word	0xff33000f

080052b4 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b80      	cmp	r3, #128	; 0x80
 80052cc:	d105      	bne.n	80052da <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e325      	b.n	8005926 <HAL_DMAEx_MultiBufferStart_IT+0x672>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e31e      	b.n	8005926 <HAL_DMAEx_MultiBufferStart_IT+0x672>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	f040 830d 	bne.w	8005918 <HAL_DMAEx_MultiBufferStart_IT+0x664>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2202      	movs	r2, #2
 8005302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a82      	ldr	r2, [pc, #520]	; (800551c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d04a      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a81      	ldr	r2, [pc, #516]	; (8005520 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d045      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a7f      	ldr	r2, [pc, #508]	; (8005524 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d040      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a7e      	ldr	r2, [pc, #504]	; (8005528 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d03b      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a7c      	ldr	r2, [pc, #496]	; (800552c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d036      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a7b      	ldr	r2, [pc, #492]	; (8005530 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d031      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a79      	ldr	r2, [pc, #484]	; (8005534 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d02c      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a78      	ldr	r2, [pc, #480]	; (8005538 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d027      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a76      	ldr	r2, [pc, #472]	; (800553c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d022      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a75      	ldr	r2, [pc, #468]	; (8005540 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d01d      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a73      	ldr	r2, [pc, #460]	; (8005544 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d018      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a72      	ldr	r2, [pc, #456]	; (8005548 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a70      	ldr	r2, [pc, #448]	; (800554c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00e      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a6f      	ldr	r2, [pc, #444]	; (8005550 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d009      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a6d      	ldr	r2, [pc, #436]	; (8005554 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a6c      	ldr	r2, [pc, #432]	; (8005558 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d101      	bne.n	80053b0 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80053b0:	2300      	movs	r3, #0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d018      	beq.n	80053e8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80053c4:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d2:	3308      	adds	r3, #8
 80053d4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	223f      	movs	r2, #63	; 0x3f
 80053e0:	409a      	lsls	r2, r3
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e018      	b.n	800541a <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6819      	ldr	r1, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	f248 0320 	movw	r3, #32800	; 0x8020
 80053f6:	430b      	orrs	r3, r1
 80053f8:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	3304      	adds	r3, #4
 8005408:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	2201      	movs	r2, #1
 8005414:	409a      	lsls	r2, r3
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fb41 	bl	8005aa8 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a3c      	ldr	r2, [pc, #240]	; (800551c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d072      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a3a      	ldr	r2, [pc, #232]	; (8005520 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d06d      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a39      	ldr	r2, [pc, #228]	; (8005524 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d068      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a37      	ldr	r2, [pc, #220]	; (8005528 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d063      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a36      	ldr	r2, [pc, #216]	; (800552c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d05e      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a34      	ldr	r2, [pc, #208]	; (8005530 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d059      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a33      	ldr	r2, [pc, #204]	; (8005534 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d054      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a31      	ldr	r2, [pc, #196]	; (8005538 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d04f      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a30      	ldr	r2, [pc, #192]	; (800553c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d04a      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a2e      	ldr	r2, [pc, #184]	; (8005540 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d045      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2d      	ldr	r2, [pc, #180]	; (8005544 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d040      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a2b      	ldr	r2, [pc, #172]	; (8005548 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d03b      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a2a      	ldr	r2, [pc, #168]	; (800554c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d036      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a28      	ldr	r2, [pc, #160]	; (8005550 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d031      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a27      	ldr	r2, [pc, #156]	; (8005554 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d02c      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a25      	ldr	r2, [pc, #148]	; (8005558 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d027      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a24      	ldr	r2, [pc, #144]	; (800555c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d022      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a22      	ldr	r2, [pc, #136]	; (8005560 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01d      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a21      	ldr	r2, [pc, #132]	; (8005564 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d018      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1e      	ldr	r2, [pc, #120]	; (800556c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00e      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a1c      	ldr	r2, [pc, #112]	; (8005570 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d009      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a1b      	ldr	r2, [pc, #108]	; (8005574 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a19      	ldr	r2, [pc, #100]	; (8005578 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d132      	bne.n	800557c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8005516:	2301      	movs	r3, #1
 8005518:	e031      	b.n	800557e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800551a:	bf00      	nop
 800551c:	40020010 	.word	0x40020010
 8005520:	40020028 	.word	0x40020028
 8005524:	40020040 	.word	0x40020040
 8005528:	40020058 	.word	0x40020058
 800552c:	40020070 	.word	0x40020070
 8005530:	40020088 	.word	0x40020088
 8005534:	400200a0 	.word	0x400200a0
 8005538:	400200b8 	.word	0x400200b8
 800553c:	40020410 	.word	0x40020410
 8005540:	40020428 	.word	0x40020428
 8005544:	40020440 	.word	0x40020440
 8005548:	40020458 	.word	0x40020458
 800554c:	40020470 	.word	0x40020470
 8005550:	40020488 	.word	0x40020488
 8005554:	400204a0 	.word	0x400204a0
 8005558:	400204b8 	.word	0x400204b8
 800555c:	58025408 	.word	0x58025408
 8005560:	5802541c 	.word	0x5802541c
 8005564:	58025430 	.word	0x58025430
 8005568:	58025444 	.word	0x58025444
 800556c:	58025458 	.word	0x58025458
 8005570:	5802546c 	.word	0x5802546c
 8005574:	58025480 	.word	0x58025480
 8005578:	58025494 	.word	0x58025494
 800557c:	2300      	movs	r3, #0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00d      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800558a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800559c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a85      	ldr	r2, [pc, #532]	; (80057b8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d04a      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a83      	ldr	r2, [pc, #524]	; (80057bc <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d045      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a82      	ldr	r2, [pc, #520]	; (80057c0 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d040      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a80      	ldr	r2, [pc, #512]	; (80057c4 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d03b      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a7f      	ldr	r2, [pc, #508]	; (80057c8 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d036      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a7d      	ldr	r2, [pc, #500]	; (80057cc <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d031      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a7c      	ldr	r2, [pc, #496]	; (80057d0 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d02c      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a7a      	ldr	r2, [pc, #488]	; (80057d4 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d027      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a79      	ldr	r2, [pc, #484]	; (80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d022      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a77      	ldr	r2, [pc, #476]	; (80057dc <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d01d      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a76      	ldr	r2, [pc, #472]	; (80057e0 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d018      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a74      	ldr	r2, [pc, #464]	; (80057e4 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d013      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a73      	ldr	r2, [pc, #460]	; (80057e8 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00e      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a71      	ldr	r2, [pc, #452]	; (80057ec <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d009      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a70      	ldr	r2, [pc, #448]	; (80057f0 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d004      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a6e      	ldr	r2, [pc, #440]	; (80057f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d101      	bne.n	8005642 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005642:	2300      	movs	r3, #0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d022      	beq.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0x3da>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 021e 	bic.w	r2, r3, #30
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0216 	orr.w	r2, r2, #22
 800565a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695a      	ldr	r2, [r3, #20]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800566a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d103      	bne.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005678:	2b00      	cmp	r3, #0
 800567a:	d022      	beq.n	80056c2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0208 	orr.w	r2, r2, #8
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	e019      	b.n	80056c2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f023 020e 	bic.w	r2, r3, #14
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f042 020a 	orr.w	r2, r2, #10
 80056a0:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d103      	bne.n	80056b2 <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0204 	orr.w	r2, r2, #4
 80056c0:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a3c      	ldr	r2, [pc, #240]	; (80057b8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d072      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a3a      	ldr	r2, [pc, #232]	; (80057bc <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d06d      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a39      	ldr	r2, [pc, #228]	; (80057c0 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d068      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a37      	ldr	r2, [pc, #220]	; (80057c4 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d063      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a36      	ldr	r2, [pc, #216]	; (80057c8 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d05e      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a34      	ldr	r2, [pc, #208]	; (80057cc <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d059      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a33      	ldr	r2, [pc, #204]	; (80057d0 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d054      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a31      	ldr	r2, [pc, #196]	; (80057d4 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d04f      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a30      	ldr	r2, [pc, #192]	; (80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d04a      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a2e      	ldr	r2, [pc, #184]	; (80057dc <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d045      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a2d      	ldr	r2, [pc, #180]	; (80057e0 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d040      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2b      	ldr	r2, [pc, #172]	; (80057e4 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d03b      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a2a      	ldr	r2, [pc, #168]	; (80057e8 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d036      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a28      	ldr	r2, [pc, #160]	; (80057ec <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d031      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a27      	ldr	r2, [pc, #156]	; (80057f0 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d02c      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a25      	ldr	r2, [pc, #148]	; (80057f4 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d027      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a24      	ldr	r2, [pc, #144]	; (80057f8 <HAL_DMAEx_MultiBufferStart_IT+0x544>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d022      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a22      	ldr	r2, [pc, #136]	; (80057fc <HAL_DMAEx_MultiBufferStart_IT+0x548>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01d      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a21      	ldr	r2, [pc, #132]	; (8005800 <HAL_DMAEx_MultiBufferStart_IT+0x54c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d018      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1f      	ldr	r2, [pc, #124]	; (8005804 <HAL_DMAEx_MultiBufferStart_IT+0x550>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <HAL_DMAEx_MultiBufferStart_IT+0x554>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00e      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1c      	ldr	r2, [pc, #112]	; (800580c <HAL_DMAEx_MultiBufferStart_IT+0x558>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d009      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1b      	ldr	r2, [pc, #108]	; (8005810 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d004      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a19      	ldr	r2, [pc, #100]	; (8005814 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d132      	bne.n	8005818 <HAL_DMAEx_MultiBufferStart_IT+0x564>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e031      	b.n	800581a <HAL_DMAEx_MultiBufferStart_IT+0x566>
 80057b6:	bf00      	nop
 80057b8:	40020010 	.word	0x40020010
 80057bc:	40020028 	.word	0x40020028
 80057c0:	40020040 	.word	0x40020040
 80057c4:	40020058 	.word	0x40020058
 80057c8:	40020070 	.word	0x40020070
 80057cc:	40020088 	.word	0x40020088
 80057d0:	400200a0 	.word	0x400200a0
 80057d4:	400200b8 	.word	0x400200b8
 80057d8:	40020410 	.word	0x40020410
 80057dc:	40020428 	.word	0x40020428
 80057e0:	40020440 	.word	0x40020440
 80057e4:	40020458 	.word	0x40020458
 80057e8:	40020470 	.word	0x40020470
 80057ec:	40020488 	.word	0x40020488
 80057f0:	400204a0 	.word	0x400204a0
 80057f4:	400204b8 	.word	0x400204b8
 80057f8:	58025408 	.word	0x58025408
 80057fc:	5802541c 	.word	0x5802541c
 8005800:	58025430 	.word	0x58025430
 8005804:	58025444 	.word	0x58025444
 8005808:	58025458 	.word	0x58025458
 800580c:	5802546c 	.word	0x5802546c
 8005810:	58025480 	.word	0x58025480
 8005814:	58025494 	.word	0x58025494
 8005818:	2300      	movs	r3, #0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01a      	beq.n	8005854 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d007      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0x588>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800583a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d007      	beq.n	8005854 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800584e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005852:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a35      	ldr	r2, [pc, #212]	; (8005930 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d04a      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a34      	ldr	r2, [pc, #208]	; (8005934 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d045      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a32      	ldr	r2, [pc, #200]	; (8005938 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d040      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a31      	ldr	r2, [pc, #196]	; (800593c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d03b      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a2f      	ldr	r2, [pc, #188]	; (8005940 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d036      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a2e      	ldr	r2, [pc, #184]	; (8005944 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d031      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a2c      	ldr	r2, [pc, #176]	; (8005948 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d02c      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a2b      	ldr	r2, [pc, #172]	; (800594c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d027      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a29      	ldr	r2, [pc, #164]	; (8005950 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d022      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a28      	ldr	r2, [pc, #160]	; (8005954 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d01d      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a26      	ldr	r2, [pc, #152]	; (8005958 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d018      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a25      	ldr	r2, [pc, #148]	; (800595c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d013      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a23      	ldr	r2, [pc, #140]	; (8005960 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00e      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a22      	ldr	r2, [pc, #136]	; (8005964 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d009      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a20      	ldr	r2, [pc, #128]	; (8005968 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1f      	ldr	r2, [pc, #124]	; (800596c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d108      	bne.n	8005906 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	e00e      	b.n	8005924 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0201 	orr.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e005      	b.n	8005924 <HAL_DMAEx_MultiBufferStart_IT+0x670>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800591e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005924:	7dfb      	ldrb	r3, [r7, #23]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40020010 	.word	0x40020010
 8005934:	40020028 	.word	0x40020028
 8005938:	40020040 	.word	0x40020040
 800593c:	40020058 	.word	0x40020058
 8005940:	40020070 	.word	0x40020070
 8005944:	40020088 	.word	0x40020088
 8005948:	400200a0 	.word	0x400200a0
 800594c:	400200b8 	.word	0x400200b8
 8005950:	40020410 	.word	0x40020410
 8005954:	40020428 	.word	0x40020428
 8005958:	40020440 	.word	0x40020440
 800595c:	40020458 	.word	0x40020458
 8005960:	40020470 	.word	0x40020470
 8005964:	40020488 	.word	0x40020488
 8005968:	400204a0 	.word	0x400204a0
 800596c:	400204b8 	.word	0x400204b8

08005970 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	4613      	mov	r3, r2
 800597c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a39      	ldr	r2, [pc, #228]	; (8005a68 <HAL_DMAEx_ChangeMemory+0xf8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d04a      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a37      	ldr	r2, [pc, #220]	; (8005a6c <HAL_DMAEx_ChangeMemory+0xfc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d045      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a36      	ldr	r2, [pc, #216]	; (8005a70 <HAL_DMAEx_ChangeMemory+0x100>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d040      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a34      	ldr	r2, [pc, #208]	; (8005a74 <HAL_DMAEx_ChangeMemory+0x104>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d03b      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a33      	ldr	r2, [pc, #204]	; (8005a78 <HAL_DMAEx_ChangeMemory+0x108>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d036      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a31      	ldr	r2, [pc, #196]	; (8005a7c <HAL_DMAEx_ChangeMemory+0x10c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d031      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a30      	ldr	r2, [pc, #192]	; (8005a80 <HAL_DMAEx_ChangeMemory+0x110>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d02c      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a2e      	ldr	r2, [pc, #184]	; (8005a84 <HAL_DMAEx_ChangeMemory+0x114>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d027      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a2d      	ldr	r2, [pc, #180]	; (8005a88 <HAL_DMAEx_ChangeMemory+0x118>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d022      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a2b      	ldr	r2, [pc, #172]	; (8005a8c <HAL_DMAEx_ChangeMemory+0x11c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01d      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a2a      	ldr	r2, [pc, #168]	; (8005a90 <HAL_DMAEx_ChangeMemory+0x120>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d018      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a28      	ldr	r2, [pc, #160]	; (8005a94 <HAL_DMAEx_ChangeMemory+0x124>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d013      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a27      	ldr	r2, [pc, #156]	; (8005a98 <HAL_DMAEx_ChangeMemory+0x128>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00e      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <HAL_DMAEx_ChangeMemory+0x12c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d009      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a24      	ldr	r2, [pc, #144]	; (8005aa0 <HAL_DMAEx_ChangeMemory+0x130>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d004      	beq.n	8005a1e <HAL_DMAEx_ChangeMemory+0xae>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a22      	ldr	r2, [pc, #136]	; (8005aa4 <HAL_DMAEx_ChangeMemory+0x134>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d101      	bne.n	8005a22 <HAL_DMAEx_ChangeMemory+0xb2>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <HAL_DMAEx_ChangeMemory+0xb4>
 8005a22:	2300      	movs	r3, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00c      	beq.n	8005a42 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8005a28:	79fb      	ldrb	r3, [r7, #7]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	60da      	str	r2, [r3, #12]
 8005a36:	e010      	b.n	8005a5a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	611a      	str	r2, [r3, #16]
 8005a40:	e00b      	b.n	8005a5a <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	60da      	str	r2, [r3, #12]
 8005a50:	e003      	b.n	8005a5a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40020010 	.word	0x40020010
 8005a6c:	40020028 	.word	0x40020028
 8005a70:	40020040 	.word	0x40020040
 8005a74:	40020058 	.word	0x40020058
 8005a78:	40020070 	.word	0x40020070
 8005a7c:	40020088 	.word	0x40020088
 8005a80:	400200a0 	.word	0x400200a0
 8005a84:	400200b8 	.word	0x400200b8
 8005a88:	40020410 	.word	0x40020410
 8005a8c:	40020428 	.word	0x40020428
 8005a90:	40020440 	.word	0x40020440
 8005a94:	40020458 	.word	0x40020458
 8005a98:	40020470 	.word	0x40020470
 8005a9c:	40020488 	.word	0x40020488
 8005aa0:	400204a0 	.word	0x400204a0
 8005aa4:	400204b8 	.word	0x400204b8

08005aa8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a46      	ldr	r2, [pc, #280]	; (8005bd4 <DMA_MultiBufferSetConfig+0x12c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d04a      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a44      	ldr	r2, [pc, #272]	; (8005bd8 <DMA_MultiBufferSetConfig+0x130>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d045      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a43      	ldr	r2, [pc, #268]	; (8005bdc <DMA_MultiBufferSetConfig+0x134>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d040      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a41      	ldr	r2, [pc, #260]	; (8005be0 <DMA_MultiBufferSetConfig+0x138>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d03b      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a40      	ldr	r2, [pc, #256]	; (8005be4 <DMA_MultiBufferSetConfig+0x13c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d036      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a3e      	ldr	r2, [pc, #248]	; (8005be8 <DMA_MultiBufferSetConfig+0x140>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d031      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a3d      	ldr	r2, [pc, #244]	; (8005bec <DMA_MultiBufferSetConfig+0x144>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d02c      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a3b      	ldr	r2, [pc, #236]	; (8005bf0 <DMA_MultiBufferSetConfig+0x148>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d027      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a3a      	ldr	r2, [pc, #232]	; (8005bf4 <DMA_MultiBufferSetConfig+0x14c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d022      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a38      	ldr	r2, [pc, #224]	; (8005bf8 <DMA_MultiBufferSetConfig+0x150>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d01d      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a37      	ldr	r2, [pc, #220]	; (8005bfc <DMA_MultiBufferSetConfig+0x154>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d018      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a35      	ldr	r2, [pc, #212]	; (8005c00 <DMA_MultiBufferSetConfig+0x158>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a34      	ldr	r2, [pc, #208]	; (8005c04 <DMA_MultiBufferSetConfig+0x15c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00e      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a32      	ldr	r2, [pc, #200]	; (8005c08 <DMA_MultiBufferSetConfig+0x160>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d009      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a31      	ldr	r2, [pc, #196]	; (8005c0c <DMA_MultiBufferSetConfig+0x164>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d004      	beq.n	8005b56 <DMA_MultiBufferSetConfig+0xae>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a2f      	ldr	r2, [pc, #188]	; (8005c10 <DMA_MultiBufferSetConfig+0x168>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d101      	bne.n	8005b5a <DMA_MultiBufferSetConfig+0xb2>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <DMA_MultiBufferSetConfig+0xb4>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d019      	beq.n	8005b94 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b40      	cmp	r3, #64	; 0x40
 8005b6e:	d108      	bne.n	8005b82 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8005b80:	e021      	b.n	8005bc6 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	60da      	str	r2, [r3, #12]
}
 8005b92:	e018      	b.n	8005bc6 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b40      	cmp	r3, #64	; 0x40
 8005ba2:	d108      	bne.n	8005bb6 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	60da      	str	r2, [r3, #12]
}
 8005bb4:	e007      	b.n	8005bc6 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	60da      	str	r2, [r3, #12]
}
 8005bc6:	bf00      	nop
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40020010 	.word	0x40020010
 8005bd8:	40020028 	.word	0x40020028
 8005bdc:	40020040 	.word	0x40020040
 8005be0:	40020058 	.word	0x40020058
 8005be4:	40020070 	.word	0x40020070
 8005be8:	40020088 	.word	0x40020088
 8005bec:	400200a0 	.word	0x400200a0
 8005bf0:	400200b8 	.word	0x400200b8
 8005bf4:	40020410 	.word	0x40020410
 8005bf8:	40020428 	.word	0x40020428
 8005bfc:	40020440 	.word	0x40020440
 8005c00:	40020458 	.word	0x40020458
 8005c04:	40020470 	.word	0x40020470
 8005c08:	40020488 	.word	0x40020488
 8005c0c:	400204a0 	.word	0x400204a0
 8005c10:	400204b8 	.word	0x400204b8

08005c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b089      	sub	sp, #36	; 0x24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c22:	4b86      	ldr	r3, [pc, #536]	; (8005e3c <HAL_GPIO_Init+0x228>)
 8005c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c26:	e18c      	b.n	8005f42 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	fa01 f303 	lsl.w	r3, r1, r3
 8005c34:	4013      	ands	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 817e 	beq.w	8005f3c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d00b      	beq.n	8005c60 <HAL_GPIO_Init+0x4c>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d007      	beq.n	8005c60 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c54:	2b11      	cmp	r3, #17
 8005c56:	d003      	beq.n	8005c60 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	2b12      	cmp	r3, #18
 8005c5e:	d130      	bne.n	8005cc2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	4013      	ands	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c96:	2201      	movs	r2, #1
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	f003 0201 	and.w	r2, r3, #1
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	2203      	movs	r2, #3
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	43db      	mvns	r3, r3
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d003      	beq.n	8005d02 <HAL_GPIO_Init+0xee>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b12      	cmp	r3, #18
 8005d00:	d123      	bne.n	8005d4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	08da      	lsrs	r2, r3, #3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3208      	adds	r2, #8
 8005d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	220f      	movs	r2, #15
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	08da      	lsrs	r2, r3, #3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3208      	adds	r2, #8
 8005d44:	69b9      	ldr	r1, [r7, #24]
 8005d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	2203      	movs	r2, #3
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 0203 	and.w	r2, r3, #3
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 80d8 	beq.w	8005f3c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d8c:	4b2c      	ldr	r3, [pc, #176]	; (8005e40 <HAL_GPIO_Init+0x22c>)
 8005d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d92:	4a2b      	ldr	r2, [pc, #172]	; (8005e40 <HAL_GPIO_Init+0x22c>)
 8005d94:	f043 0302 	orr.w	r3, r3, #2
 8005d98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005d9c:	4b28      	ldr	r3, [pc, #160]	; (8005e40 <HAL_GPIO_Init+0x22c>)
 8005d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005daa:	4a26      	ldr	r2, [pc, #152]	; (8005e44 <HAL_GPIO_Init+0x230>)
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	089b      	lsrs	r3, r3, #2
 8005db0:	3302      	adds	r3, #2
 8005db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	220f      	movs	r2, #15
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1d      	ldr	r2, [pc, #116]	; (8005e48 <HAL_GPIO_Init+0x234>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d04a      	beq.n	8005e6c <HAL_GPIO_Init+0x258>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1c      	ldr	r2, [pc, #112]	; (8005e4c <HAL_GPIO_Init+0x238>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d02b      	beq.n	8005e36 <HAL_GPIO_Init+0x222>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <HAL_GPIO_Init+0x23c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d025      	beq.n	8005e32 <HAL_GPIO_Init+0x21e>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a1a      	ldr	r2, [pc, #104]	; (8005e54 <HAL_GPIO_Init+0x240>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01f      	beq.n	8005e2e <HAL_GPIO_Init+0x21a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a19      	ldr	r2, [pc, #100]	; (8005e58 <HAL_GPIO_Init+0x244>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d019      	beq.n	8005e2a <HAL_GPIO_Init+0x216>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <HAL_GPIO_Init+0x248>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <HAL_GPIO_Init+0x212>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <HAL_GPIO_Init+0x24c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00d      	beq.n	8005e22 <HAL_GPIO_Init+0x20e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a16      	ldr	r2, [pc, #88]	; (8005e64 <HAL_GPIO_Init+0x250>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d007      	beq.n	8005e1e <HAL_GPIO_Init+0x20a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <HAL_GPIO_Init+0x254>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d101      	bne.n	8005e1a <HAL_GPIO_Init+0x206>
 8005e16:	2309      	movs	r3, #9
 8005e18:	e029      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e1a:	230a      	movs	r3, #10
 8005e1c:	e027      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e1e:	2307      	movs	r3, #7
 8005e20:	e025      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e22:	2306      	movs	r3, #6
 8005e24:	e023      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e26:	2305      	movs	r3, #5
 8005e28:	e021      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e2a:	2304      	movs	r3, #4
 8005e2c:	e01f      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e01d      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e01b      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e019      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e3a:	bf00      	nop
 8005e3c:	58000080 	.word	0x58000080
 8005e40:	58024400 	.word	0x58024400
 8005e44:	58000400 	.word	0x58000400
 8005e48:	58020000 	.word	0x58020000
 8005e4c:	58020400 	.word	0x58020400
 8005e50:	58020800 	.word	0x58020800
 8005e54:	58020c00 	.word	0x58020c00
 8005e58:	58021000 	.word	0x58021000
 8005e5c:	58021400 	.word	0x58021400
 8005e60:	58021800 	.word	0x58021800
 8005e64:	58021c00 	.word	0x58021c00
 8005e68:	58022400 	.word	0x58022400
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	f002 0203 	and.w	r2, r2, #3
 8005e74:	0092      	lsls	r2, r2, #2
 8005e76:	4093      	lsls	r3, r2
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e7e:	4938      	ldr	r1, [pc, #224]	; (8005f60 <HAL_GPIO_Init+0x34c>)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	3302      	adds	r3, #2
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	43db      	mvns	r3, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f47f ae6b 	bne.w	8005c28 <HAL_GPIO_Init+0x14>
  }
}
 8005f52:	bf00      	nop
 8005f54:	bf00      	nop
 8005f56:	3724      	adds	r7, #36	; 0x24
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	58000400 	.word	0x58000400

08005f64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005f72:	4b72      	ldr	r3, [pc, #456]	; (800613c <HAL_GPIO_DeInit+0x1d8>)
 8005f74:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005f76:	e0d3      	b.n	8006120 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005f78:	2201      	movs	r2, #1
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	4013      	ands	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 80c6 	beq.w	800611a <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005f8e:	4a6c      	ldr	r2, [pc, #432]	; (8006140 <HAL_GPIO_DeInit+0x1dc>)
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	089b      	lsrs	r3, r3, #2
 8005f94:	3302      	adds	r3, #2
 8005f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	220f      	movs	r2, #15
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	4013      	ands	r3, r2
 8005fae:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a64      	ldr	r2, [pc, #400]	; (8006144 <HAL_GPIO_DeInit+0x1e0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d031      	beq.n	800601c <HAL_GPIO_DeInit+0xb8>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a63      	ldr	r2, [pc, #396]	; (8006148 <HAL_GPIO_DeInit+0x1e4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d02b      	beq.n	8006018 <HAL_GPIO_DeInit+0xb4>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a62      	ldr	r2, [pc, #392]	; (800614c <HAL_GPIO_DeInit+0x1e8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d025      	beq.n	8006014 <HAL_GPIO_DeInit+0xb0>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a61      	ldr	r2, [pc, #388]	; (8006150 <HAL_GPIO_DeInit+0x1ec>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d01f      	beq.n	8006010 <HAL_GPIO_DeInit+0xac>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a60      	ldr	r2, [pc, #384]	; (8006154 <HAL_GPIO_DeInit+0x1f0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d019      	beq.n	800600c <HAL_GPIO_DeInit+0xa8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a5f      	ldr	r2, [pc, #380]	; (8006158 <HAL_GPIO_DeInit+0x1f4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d013      	beq.n	8006008 <HAL_GPIO_DeInit+0xa4>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a5e      	ldr	r2, [pc, #376]	; (800615c <HAL_GPIO_DeInit+0x1f8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00d      	beq.n	8006004 <HAL_GPIO_DeInit+0xa0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a5d      	ldr	r2, [pc, #372]	; (8006160 <HAL_GPIO_DeInit+0x1fc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d007      	beq.n	8006000 <HAL_GPIO_DeInit+0x9c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a5c      	ldr	r2, [pc, #368]	; (8006164 <HAL_GPIO_DeInit+0x200>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d101      	bne.n	8005ffc <HAL_GPIO_DeInit+0x98>
 8005ff8:	2309      	movs	r3, #9
 8005ffa:	e010      	b.n	800601e <HAL_GPIO_DeInit+0xba>
 8005ffc:	230a      	movs	r3, #10
 8005ffe:	e00e      	b.n	800601e <HAL_GPIO_DeInit+0xba>
 8006000:	2307      	movs	r3, #7
 8006002:	e00c      	b.n	800601e <HAL_GPIO_DeInit+0xba>
 8006004:	2306      	movs	r3, #6
 8006006:	e00a      	b.n	800601e <HAL_GPIO_DeInit+0xba>
 8006008:	2305      	movs	r3, #5
 800600a:	e008      	b.n	800601e <HAL_GPIO_DeInit+0xba>
 800600c:	2304      	movs	r3, #4
 800600e:	e006      	b.n	800601e <HAL_GPIO_DeInit+0xba>
 8006010:	2303      	movs	r3, #3
 8006012:	e004      	b.n	800601e <HAL_GPIO_DeInit+0xba>
 8006014:	2302      	movs	r3, #2
 8006016:	e002      	b.n	800601e <HAL_GPIO_DeInit+0xba>
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <HAL_GPIO_DeInit+0xba>
 800601c:	2300      	movs	r3, #0
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	f002 0203 	and.w	r2, r2, #3
 8006024:	0092      	lsls	r2, r2, #2
 8006026:	4093      	lsls	r3, r2
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	429a      	cmp	r2, r3
 800602c:	d136      	bne.n	800609c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	43db      	mvns	r3, r3
 8006036:	401a      	ands	r2, r3
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	43db      	mvns	r3, r3
 8006044:	401a      	ands	r2, r3
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800604a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	43db      	mvns	r3, r3
 8006054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006058:	4013      	ands	r3, r2
 800605a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800605c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	43db      	mvns	r3, r3
 8006066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800606a:	4013      	ands	r3, r2
 800606c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	220f      	movs	r2, #15
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800607e:	4a30      	ldr	r2, [pc, #192]	; (8006140 <HAL_GPIO_DeInit+0x1dc>)
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	089b      	lsrs	r3, r3, #2
 8006084:	3302      	adds	r3, #2
 8006086:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	43da      	mvns	r2, r3
 800608e:	482c      	ldr	r0, [pc, #176]	; (8006140 <HAL_GPIO_DeInit+0x1dc>)
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	089b      	lsrs	r3, r3, #2
 8006094:	400a      	ands	r2, r1
 8006096:	3302      	adds	r3, #2
 8006098:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	2103      	movs	r1, #3
 80060a6:	fa01 f303 	lsl.w	r3, r1, r3
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	08da      	lsrs	r2, r3, #3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3208      	adds	r2, #8
 80060b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	220f      	movs	r2, #15
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	43db      	mvns	r3, r3
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	08d2      	lsrs	r2, r2, #3
 80060d0:	4019      	ands	r1, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3208      	adds	r2, #8
 80060d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	2103      	movs	r1, #3
 80060e4:	fa01 f303 	lsl.w	r3, r1, r3
 80060e8:	43db      	mvns	r3, r3
 80060ea:	401a      	ands	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	2101      	movs	r1, #1
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	fa01 f303 	lsl.w	r3, r1, r3
 80060fc:	43db      	mvns	r3, r3
 80060fe:	401a      	ands	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	2103      	movs	r1, #3
 800610e:	fa01 f303 	lsl.w	r3, r1, r3
 8006112:	43db      	mvns	r3, r3
 8006114:	401a      	ands	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	609a      	str	r2, [r3, #8]
    }

    position++;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	3301      	adds	r3, #1
 800611e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	fa22 f303 	lsr.w	r3, r2, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	f47f af25 	bne.w	8005f78 <HAL_GPIO_DeInit+0x14>
  }
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	58000080 	.word	0x58000080
 8006140:	58000400 	.word	0x58000400
 8006144:	58020000 	.word	0x58020000
 8006148:	58020400 	.word	0x58020400
 800614c:	58020800 	.word	0x58020800
 8006150:	58020c00 	.word	0x58020c00
 8006154:	58021000 	.word	0x58021000
 8006158:	58021400 	.word	0x58021400
 800615c:	58021800 	.word	0x58021800
 8006160:	58021c00 	.word	0x58021c00
 8006164:	58022400 	.word	0x58022400

08006168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	807b      	strh	r3, [r7, #2]
 8006174:	4613      	mov	r3, r2
 8006176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006178:	787b      	ldrb	r3, [r7, #1]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800617e:	887a      	ldrh	r2, [r7, #2]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006184:	e003      	b.n	800618e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006186:	887b      	ldrh	r3, [r7, #2]
 8006188:	041a      	lsls	r2, r3, #16
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	619a      	str	r2, [r3, #24]
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
	...

0800619c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e07f      	b.n	80062ae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fa fdfc 	bl	8000dc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	; 0x24
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d107      	bne.n	8006216 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006212:	609a      	str	r2, [r3, #8]
 8006214:	e006      	b.n	8006224 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006222:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d104      	bne.n	8006236 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006234:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6859      	ldr	r1, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	4b1d      	ldr	r3, [pc, #116]	; (80062b8 <HAL_I2C_Init+0x11c>)
 8006242:	430b      	orrs	r3, r1
 8006244:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006254:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	ea42 0103 	orr.w	r1, r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	021a      	lsls	r2, r3, #8
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69d9      	ldr	r1, [r3, #28]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1a      	ldr	r2, [r3, #32]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	02008000 	.word	0x02008000

080062bc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e021      	b.n	8006312 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2224      	movs	r2, #36	; 0x24
 80062d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0201 	bic.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fa fdd0 	bl	8000e8c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af02      	add	r7, sp, #8
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	4608      	mov	r0, r1
 8006326:	4611      	mov	r1, r2
 8006328:	461a      	mov	r2, r3
 800632a:	4603      	mov	r3, r0
 800632c:	817b      	strh	r3, [r7, #10]
 800632e:	460b      	mov	r3, r1
 8006330:	813b      	strh	r3, [r7, #8]
 8006332:	4613      	mov	r3, r2
 8006334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b20      	cmp	r3, #32
 8006340:	f040 80f9 	bne.w	8006536 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <HAL_I2C_Mem_Write+0x34>
 800634a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800634c:	2b00      	cmp	r3, #0
 800634e:	d105      	bne.n	800635c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006356:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0ed      	b.n	8006538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_I2C_Mem_Write+0x4e>
 8006366:	2302      	movs	r3, #2
 8006368:	e0e6      	b.n	8006538 <HAL_I2C_Mem_Write+0x21c>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006372:	f7fb ff25 	bl	80021c0 <HAL_GetTick>
 8006376:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	2319      	movs	r3, #25
 800637e:	2201      	movs	r2, #1
 8006380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 fad1 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e0d1      	b.n	8006538 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2221      	movs	r2, #33	; 0x21
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2240      	movs	r2, #64	; 0x40
 80063a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a3a      	ldr	r2, [r7, #32]
 80063ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063bc:	88f8      	ldrh	r0, [r7, #6]
 80063be:	893a      	ldrh	r2, [r7, #8]
 80063c0:	8979      	ldrh	r1, [r7, #10]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	9301      	str	r3, [sp, #4]
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	4603      	mov	r3, r0
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f9e1 	bl	8006794 <I2C_RequestMemoryWrite>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d005      	beq.n	80063e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e0a9      	b.n	8006538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2bff      	cmp	r3, #255	; 0xff
 80063ec:	d90e      	bls.n	800640c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	22ff      	movs	r2, #255	; 0xff
 80063f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	8979      	ldrh	r1, [r7, #10]
 80063fc:	2300      	movs	r3, #0
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 fbb3 	bl	8006b70 <I2C_TransferConfig>
 800640a:	e00f      	b.n	800642c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641a:	b2da      	uxtb	r2, r3
 800641c:	8979      	ldrh	r1, [r7, #10]
 800641e:	2300      	movs	r3, #0
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fba2 	bl	8006b70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fabb 	bl	80069ac <I2C_WaitOnTXISFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e07b      	b.n	8006538 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	781a      	ldrb	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d034      	beq.n	80064e4 <HAL_I2C_Mem_Write+0x1c8>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647e:	2b00      	cmp	r3, #0
 8006480:	d130      	bne.n	80064e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	2200      	movs	r2, #0
 800648a:	2180      	movs	r1, #128	; 0x80
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fa4d 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e04d      	b.n	8006538 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2bff      	cmp	r3, #255	; 0xff
 80064a4:	d90e      	bls.n	80064c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	22ff      	movs	r2, #255	; 0xff
 80064aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	8979      	ldrh	r1, [r7, #10]
 80064b4:	2300      	movs	r3, #0
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fb57 	bl	8006b70 <I2C_TransferConfig>
 80064c2:	e00f      	b.n	80064e4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	8979      	ldrh	r1, [r7, #10]
 80064d6:	2300      	movs	r3, #0
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fb46 	bl	8006b70 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d19e      	bne.n	800642c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 fa9a 	bl	8006a2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e01a      	b.n	8006538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2220      	movs	r2, #32
 8006508:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6859      	ldr	r1, [r3, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	4b0a      	ldr	r3, [pc, #40]	; (8006540 <HAL_I2C_Mem_Write+0x224>)
 8006516:	400b      	ands	r3, r1
 8006518:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	e000      	b.n	8006538 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006536:	2302      	movs	r3, #2
  }
}
 8006538:	4618      	mov	r0, r3
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	fe00e800 	.word	0xfe00e800

08006544 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	4608      	mov	r0, r1
 800654e:	4611      	mov	r1, r2
 8006550:	461a      	mov	r2, r3
 8006552:	4603      	mov	r3, r0
 8006554:	817b      	strh	r3, [r7, #10]
 8006556:	460b      	mov	r3, r1
 8006558:	813b      	strh	r3, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b20      	cmp	r3, #32
 8006568:	f040 80fd 	bne.w	8006766 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_I2C_Mem_Read+0x34>
 8006572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006574:	2b00      	cmp	r3, #0
 8006576:	d105      	bne.n	8006584 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800657e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e0f1      	b.n	8006768 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_I2C_Mem_Read+0x4e>
 800658e:	2302      	movs	r3, #2
 8006590:	e0ea      	b.n	8006768 <HAL_I2C_Mem_Read+0x224>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800659a:	f7fb fe11 	bl	80021c0 <HAL_GetTick>
 800659e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2319      	movs	r3, #25
 80065a6:	2201      	movs	r2, #1
 80065a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 f9bd 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0d5      	b.n	8006768 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2222      	movs	r2, #34	; 0x22
 80065c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2240      	movs	r2, #64	; 0x40
 80065c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a3a      	ldr	r2, [r7, #32]
 80065d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065e4:	88f8      	ldrh	r0, [r7, #6]
 80065e6:	893a      	ldrh	r2, [r7, #8]
 80065e8:	8979      	ldrh	r1, [r7, #10]
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	4603      	mov	r3, r0
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f921 	bl	800683c <I2C_RequestMemoryRead>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e0ad      	b.n	8006768 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	2bff      	cmp	r3, #255	; 0xff
 8006614:	d90e      	bls.n	8006634 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	22ff      	movs	r2, #255	; 0xff
 800661a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006620:	b2da      	uxtb	r2, r3
 8006622:	8979      	ldrh	r1, [r7, #10]
 8006624:	4b52      	ldr	r3, [pc, #328]	; (8006770 <HAL_I2C_Mem_Read+0x22c>)
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 fa9f 	bl	8006b70 <I2C_TransferConfig>
 8006632:	e00f      	b.n	8006654 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006642:	b2da      	uxtb	r2, r3
 8006644:	8979      	ldrh	r1, [r7, #10]
 8006646:	4b4a      	ldr	r3, [pc, #296]	; (8006770 <HAL_I2C_Mem_Read+0x22c>)
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 fa8e 	bl	8006b70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	2200      	movs	r2, #0
 800665c:	2104      	movs	r1, #4
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 f964 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e07c      	b.n	8006768 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006696:	b29b      	uxth	r3, r3
 8006698:	3b01      	subs	r3, #1
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d034      	beq.n	8006714 <HAL_I2C_Mem_Read+0x1d0>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d130      	bne.n	8006714 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	2200      	movs	r2, #0
 80066ba:	2180      	movs	r1, #128	; 0x80
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f935 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e04d      	b.n	8006768 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2bff      	cmp	r3, #255	; 0xff
 80066d4:	d90e      	bls.n	80066f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	22ff      	movs	r2, #255	; 0xff
 80066da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	8979      	ldrh	r1, [r7, #10]
 80066e4:	2300      	movs	r3, #0
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 fa3f 	bl	8006b70 <I2C_TransferConfig>
 80066f2:	e00f      	b.n	8006714 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006702:	b2da      	uxtb	r2, r3
 8006704:	8979      	ldrh	r1, [r7, #10]
 8006706:	2300      	movs	r3, #0
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 fa2e 	bl	8006b70 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d19a      	bne.n	8006654 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f982 	bl	8006a2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e01a      	b.n	8006768 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2220      	movs	r2, #32
 8006738:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6859      	ldr	r1, [r3, #4]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <HAL_I2C_Mem_Read+0x230>)
 8006746:	400b      	ands	r3, r1
 8006748:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2220      	movs	r2, #32
 800674e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	e000      	b.n	8006768 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006766:	2302      	movs	r3, #2
  }
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	80002400 	.word	0x80002400
 8006774:	fe00e800 	.word	0xfe00e800

08006778 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006786:	b2db      	uxtb	r3, r3
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af02      	add	r7, sp, #8
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	4608      	mov	r0, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	461a      	mov	r2, r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	817b      	strh	r3, [r7, #10]
 80067a6:	460b      	mov	r3, r1
 80067a8:	813b      	strh	r3, [r7, #8]
 80067aa:	4613      	mov	r3, r2
 80067ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	8979      	ldrh	r1, [r7, #10]
 80067b4:	4b20      	ldr	r3, [pc, #128]	; (8006838 <I2C_RequestMemoryWrite+0xa4>)
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 f9d7 	bl	8006b70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	69b9      	ldr	r1, [r7, #24]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f8f0 	bl	80069ac <I2C_WaitOnTXISFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e02c      	b.n	8006830 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067d6:	88fb      	ldrh	r3, [r7, #6]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d105      	bne.n	80067e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067dc:	893b      	ldrh	r3, [r7, #8]
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	629a      	str	r2, [r3, #40]	; 0x28
 80067e6:	e015      	b.n	8006814 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067e8:	893b      	ldrh	r3, [r7, #8]
 80067ea:	0a1b      	lsrs	r3, r3, #8
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	69b9      	ldr	r1, [r7, #24]
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 f8d6 	bl	80069ac <I2C_WaitOnTXISFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e012      	b.n	8006830 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800680a:	893b      	ldrh	r3, [r7, #8]
 800680c:	b2da      	uxtb	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	2200      	movs	r2, #0
 800681c:	2180      	movs	r1, #128	; 0x80
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f884 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e000      	b.n	8006830 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	80002000 	.word	0x80002000

0800683c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af02      	add	r7, sp, #8
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	4608      	mov	r0, r1
 8006846:	4611      	mov	r1, r2
 8006848:	461a      	mov	r2, r3
 800684a:	4603      	mov	r3, r0
 800684c:	817b      	strh	r3, [r7, #10]
 800684e:	460b      	mov	r3, r1
 8006850:	813b      	strh	r3, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	b2da      	uxtb	r2, r3
 800685a:	8979      	ldrh	r1, [r7, #10]
 800685c:	4b20      	ldr	r3, [pc, #128]	; (80068e0 <I2C_RequestMemoryRead+0xa4>)
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	2300      	movs	r3, #0
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f984 	bl	8006b70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	69b9      	ldr	r1, [r7, #24]
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f89d 	bl	80069ac <I2C_WaitOnTXISFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e02c      	b.n	80068d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d105      	bne.n	800688e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006882:	893b      	ldrh	r3, [r7, #8]
 8006884:	b2da      	uxtb	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	629a      	str	r2, [r3, #40]	; 0x28
 800688c:	e015      	b.n	80068ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800688e:	893b      	ldrh	r3, [r7, #8]
 8006890:	0a1b      	lsrs	r3, r3, #8
 8006892:	b29b      	uxth	r3, r3
 8006894:	b2da      	uxtb	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800689c:	69fa      	ldr	r2, [r7, #28]
 800689e:	69b9      	ldr	r1, [r7, #24]
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f883 	bl	80069ac <I2C_WaitOnTXISFlagUntilTimeout>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e012      	b.n	80068d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068b0:	893b      	ldrh	r3, [r7, #8]
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	2200      	movs	r2, #0
 80068c2:	2140      	movs	r1, #64	; 0x40
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f831 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e000      	b.n	80068d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	80002000 	.word	0x80002000

080068e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d103      	bne.n	8006902 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2200      	movs	r2, #0
 8006900:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b01      	cmp	r3, #1
 800690e:	d007      	beq.n	8006920 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0201 	orr.w	r2, r2, #1
 800691e:	619a      	str	r2, [r3, #24]
  }
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	4613      	mov	r3, r2
 800693a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800693c:	e022      	b.n	8006984 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006944:	d01e      	beq.n	8006984 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006946:	f7fb fc3b 	bl	80021c0 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d302      	bcc.n	800695c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d113      	bne.n	8006984 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006960:	f043 0220 	orr.w	r2, r3, #32
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e00f      	b.n	80069a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	4013      	ands	r3, r2
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	429a      	cmp	r2, r3
 8006992:	bf0c      	ite	eq
 8006994:	2301      	moveq	r3, #1
 8006996:	2300      	movne	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	461a      	mov	r2, r3
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d0cd      	beq.n	800693e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069b8:	e02c      	b.n	8006a14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 f870 	bl	8006aa4 <I2C_IsAcknowledgeFailed>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e02a      	b.n	8006a24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d4:	d01e      	beq.n	8006a14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d6:	f7fb fbf3 	bl	80021c0 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d302      	bcc.n	80069ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d113      	bne.n	8006a14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f0:	f043 0220 	orr.w	r2, r3, #32
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e007      	b.n	8006a24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d1cb      	bne.n	80069ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a38:	e028      	b.n	8006a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 f830 	bl	8006aa4 <I2C_IsAcknowledgeFailed>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e026      	b.n	8006a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4e:	f7fb fbb7 	bl	80021c0 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d302      	bcc.n	8006a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d113      	bne.n	8006a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a68:	f043 0220 	orr.w	r2, r3, #32
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e007      	b.n	8006a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	d1cf      	bne.n	8006a3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	f003 0310 	and.w	r3, r3, #16
 8006aba:	2b10      	cmp	r3, #16
 8006abc:	d151      	bne.n	8006b62 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006abe:	e022      	b.n	8006b06 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d01e      	beq.n	8006b06 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac8:	f7fb fb7a 	bl	80021c0 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d302      	bcc.n	8006ade <I2C_IsAcknowledgeFailed+0x3a>
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d113      	bne.n	8006b06 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae2:	f043 0220 	orr.w	r2, r3, #32
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e02e      	b.n	8006b64 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d1d5      	bne.n	8006ac0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2210      	movs	r2, #16
 8006b1a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2220      	movs	r2, #32
 8006b22:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff fedd 	bl	80068e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6859      	ldr	r1, [r3, #4]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <I2C_IsAcknowledgeFailed+0xc8>)
 8006b36:	400b      	ands	r3, r1
 8006b38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3e:	f043 0204 	orr.w	r2, r3, #4
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	fe00e800 	.word	0xfe00e800

08006b70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	607b      	str	r3, [r7, #4]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	817b      	strh	r3, [r7, #10]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	0d5b      	lsrs	r3, r3, #21
 8006b8c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b90:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <I2C_TransferConfig+0x58>)
 8006b92:	430b      	orrs	r3, r1
 8006b94:	43db      	mvns	r3, r3
 8006b96:	ea02 0103 	and.w	r1, r2, r3
 8006b9a:	897b      	ldrh	r3, [r7, #10]
 8006b9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006ba0:	7a7b      	ldrb	r3, [r7, #9]
 8006ba2:	041b      	lsls	r3, r3, #16
 8006ba4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	431a      	orrs	r2, r3
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	03ff63ff 	.word	0x03ff63ff

08006bcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d138      	bne.n	8006c54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e032      	b.n	8006c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2224      	movs	r2, #36	; 0x24
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0201 	bic.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6819      	ldr	r1, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0201 	orr.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e000      	b.n	8006c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c54:	2302      	movs	r3, #2
  }
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d139      	bne.n	8006cec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c82:	2302      	movs	r3, #2
 8006c84:	e033      	b.n	8006cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2224      	movs	r2, #36	; 0x24
 8006c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0201 	bic.w	r2, r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e000      	b.n	8006cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006cec:	2302      	movs	r3, #2
  }
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e041      	b.n	8006d90 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006d14:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f245 5255 	movw	r2, #21845	; 0x5555
 8006d1e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6852      	ldr	r2, [r2, #4]
 8006d28:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6892      	ldr	r2, [r2, #8]
 8006d32:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006d34:	f7fb fa44 	bl	80021c0 <HAL_GetTick>
 8006d38:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d3a:	e00f      	b.n	8006d5c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006d3c:	f7fb fa40 	bl	80021c0 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b30      	cmp	r3, #48	; 0x30
 8006d48:	d908      	bls.n	8006d5c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e019      	b.n	8006d90 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e8      	bne.n	8006d3c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d005      	beq.n	8006d84 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	68d2      	ldr	r2, [r2, #12]
 8006d80:	611a      	str	r2, [r3, #16]
 8006d82:	e004      	b.n	8006d8e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006d8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006da8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e0bf      	b.n	8006f4a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d106      	bne.n	8006de4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fa f934 	bl	800104c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006dfa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6999      	ldr	r1, [r3, #24]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e10:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6899      	ldr	r1, [r3, #8]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	4b4a      	ldr	r3, [pc, #296]	; (8006f54 <HAL_LTDC_Init+0x19c>)
 8006e2c:	400b      	ands	r3, r1
 8006e2e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	041b      	lsls	r3, r3, #16
 8006e36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6899      	ldr	r1, [r3, #8]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68d9      	ldr	r1, [r3, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	4b3e      	ldr	r3, [pc, #248]	; (8006f54 <HAL_LTDC_Init+0x19c>)
 8006e5a:	400b      	ands	r3, r1
 8006e5c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68d9      	ldr	r1, [r3, #12]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1a      	ldr	r2, [r3, #32]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	431a      	orrs	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6919      	ldr	r1, [r3, #16]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	4b33      	ldr	r3, [pc, #204]	; (8006f54 <HAL_LTDC_Init+0x19c>)
 8006e88:	400b      	ands	r3, r1
 8006e8a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	041b      	lsls	r3, r3, #16
 8006e92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6919      	ldr	r1, [r3, #16]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6959      	ldr	r1, [r3, #20]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	4b27      	ldr	r3, [pc, #156]	; (8006f54 <HAL_LTDC_Init+0x19c>)
 8006eb6:	400b      	ands	r3, r1
 8006eb8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebe:	041b      	lsls	r3, r3, #16
 8006ec0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6959      	ldr	r1, [r3, #20]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ede:	021b      	lsls	r3, r3, #8
 8006ee0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006ee8:	041b      	lsls	r3, r3, #16
 8006eea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0206 	orr.w	r2, r2, #6
 8006f26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0201 	orr.w	r2, r2, #1
 8006f36:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	f000f800 	.word	0xf000f800

08006f58 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f003 0304 	and.w	r3, r3, #4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d023      	beq.n	8006fc2 <HAL_LTDC_IRQHandler+0x6a>
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d01e      	beq.n	8006fc2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0204 	bic.w	r2, r2, #4
 8006f92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2204      	movs	r2, #4
 8006f9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fa2:	f043 0201 	orr.w	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2204      	movs	r2, #4
 8006fb0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f86f 	bl	80070a0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d023      	beq.n	8007014 <HAL_LTDC_IRQHandler+0xbc>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d01e      	beq.n	8007014 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0202 	bic.w	r2, r2, #2
 8006fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2202      	movs	r2, #2
 8006fec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ff4:	f043 0202 	orr.w	r2, r3, #2
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2204      	movs	r2, #4
 8007002:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f846 	bl	80070a0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d01b      	beq.n	8007056 <HAL_LTDC_IRQHandler+0xfe>
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	d016      	beq.n	8007056 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0201 	bic.w	r2, r2, #1
 8007036:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2201      	movs	r2, #1
 800703e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f82f 	bl	80070b4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01b      	beq.n	8007098 <HAL_LTDC_IRQHandler+0x140>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b00      	cmp	r3, #0
 8007068:	d016      	beq.n	8007098 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0208 	bic.w	r2, r2, #8
 8007078:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2208      	movs	r2, #8
 8007080:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7fa f956 	bl	8001344 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80070c8:	b5b0      	push	{r4, r5, r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d101      	bne.n	80070e2 <HAL_LTDC_ConfigLayer+0x1a>
 80070de:	2302      	movs	r3, #2
 80070e0:	e02c      	b.n	800713c <HAL_LTDC_ConfigLayer+0x74>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2202      	movs	r2, #2
 80070ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2134      	movs	r1, #52	; 0x34
 80070f8:	fb01 f303 	mul.w	r3, r1, r3
 80070fc:	4413      	add	r3, r2
 80070fe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	4614      	mov	r4, r2
 8007106:	461d      	mov	r5, r3
 8007108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800710a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800710c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800710e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	68b9      	ldr	r1, [r7, #8]
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 f811 	bl	8007144 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2201      	movs	r2, #1
 8007128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bdb0      	pop	{r4, r5, r7, pc}

08007144 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007144:	b480      	push	{r7}
 8007146:	b089      	sub	sp, #36	; 0x24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	0c1b      	lsrs	r3, r3, #16
 800715c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007160:	4413      	add	r3, r2
 8007162:	041b      	lsls	r3, r3, #16
 8007164:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	01db      	lsls	r3, r3, #7
 8007170:	4413      	add	r3, r2
 8007172:	3384      	adds	r3, #132	; 0x84
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	4611      	mov	r1, r2
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	01d2      	lsls	r2, r2, #7
 8007180:	440a      	add	r2, r1
 8007182:	3284      	adds	r2, #132	; 0x84
 8007184:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007188:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	0c1b      	lsrs	r3, r3, #16
 8007196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800719a:	4413      	add	r3, r2
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4619      	mov	r1, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	01db      	lsls	r3, r3, #7
 80071a8:	440b      	add	r3, r1
 80071aa:	3384      	adds	r3, #132	; 0x84
 80071ac:	4619      	mov	r1, r3
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071c2:	4413      	add	r3, r2
 80071c4:	041b      	lsls	r3, r3, #16
 80071c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	01db      	lsls	r3, r3, #7
 80071d2:	4413      	add	r3, r2
 80071d4:	3384      	adds	r3, #132	; 0x84
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	4611      	mov	r1, r2
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	01d2      	lsls	r2, r2, #7
 80071e2:	440a      	add	r2, r1
 80071e4:	3284      	adds	r2, #132	; 0x84
 80071e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80071ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071fa:	4413      	add	r3, r2
 80071fc:	1c5a      	adds	r2, r3, #1
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4619      	mov	r1, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	01db      	lsls	r3, r3, #7
 8007208:	440b      	add	r3, r1
 800720a:	3384      	adds	r3, #132	; 0x84
 800720c:	4619      	mov	r1, r3
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	4313      	orrs	r3, r2
 8007212:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	01db      	lsls	r3, r3, #7
 800721e:	4413      	add	r3, r2
 8007220:	3384      	adds	r3, #132	; 0x84
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	4611      	mov	r1, r2
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	01d2      	lsls	r2, r2, #7
 800722e:	440a      	add	r2, r1
 8007230:	3284      	adds	r2, #132	; 0x84
 8007232:	f023 0307 	bic.w	r3, r3, #7
 8007236:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	461a      	mov	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	01db      	lsls	r3, r3, #7
 8007242:	4413      	add	r3, r2
 8007244:	3384      	adds	r3, #132	; 0x84
 8007246:	461a      	mov	r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007254:	021b      	lsls	r3, r3, #8
 8007256:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800725e:	041b      	lsls	r3, r3, #16
 8007260:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	061b      	lsls	r3, r3, #24
 8007268:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	01db      	lsls	r3, r3, #7
 8007274:	4413      	add	r3, r2
 8007276:	3384      	adds	r3, #132	; 0x84
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	01db      	lsls	r3, r3, #7
 8007284:	4413      	add	r3, r2
 8007286:	3384      	adds	r3, #132	; 0x84
 8007288:	461a      	mov	r2, r3
 800728a:	2300      	movs	r3, #0
 800728c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007294:	461a      	mov	r2, r3
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	431a      	orrs	r2, r3
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	431a      	orrs	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4619      	mov	r1, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	01db      	lsls	r3, r3, #7
 80072a8:	440b      	add	r3, r1
 80072aa:	3384      	adds	r3, #132	; 0x84
 80072ac:	4619      	mov	r1, r3
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	01db      	lsls	r3, r3, #7
 80072be:	4413      	add	r3, r2
 80072c0:	3384      	adds	r3, #132	; 0x84
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	4611      	mov	r1, r2
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	01d2      	lsls	r2, r2, #7
 80072ce:	440a      	add	r2, r1
 80072d0:	3284      	adds	r2, #132	; 0x84
 80072d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80072d6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	461a      	mov	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	01db      	lsls	r3, r3, #7
 80072e2:	4413      	add	r3, r2
 80072e4:	3384      	adds	r3, #132	; 0x84
 80072e6:	461a      	mov	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	01db      	lsls	r3, r3, #7
 80072f8:	4413      	add	r3, r2
 80072fa:	3384      	adds	r3, #132	; 0x84
 80072fc:	69da      	ldr	r2, [r3, #28]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4619      	mov	r1, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	01db      	lsls	r3, r3, #7
 8007308:	440b      	add	r3, r1
 800730a:	3384      	adds	r3, #132	; 0x84
 800730c:	4619      	mov	r1, r3
 800730e:	4b58      	ldr	r3, [pc, #352]	; (8007470 <LTDC_SetConfig+0x32c>)
 8007310:	4013      	ands	r3, r2
 8007312:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	68f9      	ldr	r1, [r7, #12]
 800731e:	6809      	ldr	r1, [r1, #0]
 8007320:	4608      	mov	r0, r1
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	01c9      	lsls	r1, r1, #7
 8007326:	4401      	add	r1, r0
 8007328:	3184      	adds	r1, #132	; 0x84
 800732a:	4313      	orrs	r3, r2
 800732c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	01db      	lsls	r3, r3, #7
 8007338:	4413      	add	r3, r2
 800733a:	3384      	adds	r3, #132	; 0x84
 800733c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	01db      	lsls	r3, r3, #7
 8007348:	4413      	add	r3, r2
 800734a:	3384      	adds	r3, #132	; 0x84
 800734c:	461a      	mov	r2, r3
 800734e:	2300      	movs	r3, #0
 8007350:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	01db      	lsls	r3, r3, #7
 800735c:	4413      	add	r3, r2
 800735e:	3384      	adds	r3, #132	; 0x84
 8007360:	461a      	mov	r2, r3
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d102      	bne.n	8007376 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007370:	2304      	movs	r3, #4
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	e01b      	b.n	80073ae <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d102      	bne.n	8007384 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800737e:	2303      	movs	r3, #3
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	e014      	b.n	80073ae <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	2b04      	cmp	r3, #4
 800738a:	d00b      	beq.n	80073a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007390:	2b02      	cmp	r3, #2
 8007392:	d007      	beq.n	80073a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007398:	2b03      	cmp	r3, #3
 800739a:	d003      	beq.n	80073a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80073a0:	2b07      	cmp	r3, #7
 80073a2:	d102      	bne.n	80073aa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80073a4:	2302      	movs	r3, #2
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	e001      	b.n	80073ae <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80073aa:	2301      	movs	r3, #1
 80073ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	01db      	lsls	r3, r3, #7
 80073b8:	4413      	add	r3, r2
 80073ba:	3384      	adds	r3, #132	; 0x84
 80073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	6812      	ldr	r2, [r2, #0]
 80073c2:	4611      	mov	r1, r2
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	01d2      	lsls	r2, r2, #7
 80073c8:	440a      	add	r2, r1
 80073ca:	3284      	adds	r2, #132	; 0x84
 80073cc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80073d0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	fb02 f303 	mul.w	r3, r2, r3
 80073dc:	041a      	lsls	r2, r3, #16
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6859      	ldr	r1, [r3, #4]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	1acb      	subs	r3, r1, r3
 80073e8:	69f9      	ldr	r1, [r7, #28]
 80073ea:	fb01 f303 	mul.w	r3, r1, r3
 80073ee:	3307      	adds	r3, #7
 80073f0:	68f9      	ldr	r1, [r7, #12]
 80073f2:	6809      	ldr	r1, [r1, #0]
 80073f4:	4608      	mov	r0, r1
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	01c9      	lsls	r1, r1, #7
 80073fa:	4401      	add	r1, r0
 80073fc:	3184      	adds	r1, #132	; 0x84
 80073fe:	4313      	orrs	r3, r2
 8007400:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	01db      	lsls	r3, r3, #7
 800740c:	4413      	add	r3, r2
 800740e:	3384      	adds	r3, #132	; 0x84
 8007410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4619      	mov	r1, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	01db      	lsls	r3, r3, #7
 800741c:	440b      	add	r3, r1
 800741e:	3384      	adds	r3, #132	; 0x84
 8007420:	4619      	mov	r1, r3
 8007422:	4b14      	ldr	r3, [pc, #80]	; (8007474 <LTDC_SetConfig+0x330>)
 8007424:	4013      	ands	r3, r2
 8007426:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	461a      	mov	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	01db      	lsls	r3, r3, #7
 8007432:	4413      	add	r3, r2
 8007434:	3384      	adds	r3, #132	; 0x84
 8007436:	461a      	mov	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	01db      	lsls	r3, r3, #7
 8007448:	4413      	add	r3, r2
 800744a:	3384      	adds	r3, #132	; 0x84
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	6812      	ldr	r2, [r2, #0]
 8007452:	4611      	mov	r1, r2
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	01d2      	lsls	r2, r2, #7
 8007458:	440a      	add	r2, r1
 800745a:	3284      	adds	r2, #132	; 0x84
 800745c:	f043 0301 	orr.w	r3, r3, #1
 8007460:	6013      	str	r3, [r2, #0]
}
 8007462:	bf00      	nop
 8007464:	3724      	adds	r7, #36	; 0x24
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	fffff8f8 	.word	0xfffff8f8
 8007474:	fffff800 	.word	0xfffff800

08007478 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af02      	add	r7, sp, #8
 800747e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8007484:	f7fa fe9c 	bl	80021c0 <HAL_GetTick>
 8007488:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	73fb      	strb	r3, [r7, #15]
 8007494:	e0a9      	b.n	80075ea <HAL_OSPI_Init+0x172>
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f040 80a2 	bne.w	80075ea <HAL_OSPI_Init+0x172>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fa f9f2 	bl	8001890 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80074ac:	f241 3188 	movw	r1, #5000	; 0x1388
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fa93 	bl	80079dc <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	4b4d      	ldr	r3, [pc, #308]	; (80075f4 <HAL_OSPI_Init+0x17c>)
 80074be:	4013      	ands	r3, r2
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	68d1      	ldr	r1, [r2, #12]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6912      	ldr	r2, [r2, #16]
 80074c8:	3a01      	subs	r2, #1
 80074ca:	0412      	lsls	r2, r2, #16
 80074cc:	4311      	orrs	r1, r2
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	6952      	ldr	r2, [r2, #20]
 80074d2:	3a01      	subs	r2, #1
 80074d4:	0212      	lsls	r2, r2, #8
 80074d6:	4311      	orrs	r1, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074dc:	0112      	lsls	r2, r2, #4
 80074de:	4311      	orrs	r1, r2
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074e4:	4311      	orrs	r1, r2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	69d2      	ldr	r2, [r2, #28]
 80074ea:	4311      	orrs	r1, r2
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6812      	ldr	r2, [r2, #0]
 80074f0:	430b      	orrs	r3, r1
 80074f2:	6093      	str	r3, [r2, #8]
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1a      	ldr	r2, [r3, #32]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007524:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	3b01      	subs	r3, #1
 8007536:	021a      	lsls	r2, r3, #8
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2200      	movs	r2, #0
 800754a:	2120      	movs	r1, #32
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 ff6b 	bl	8008428 <OSPI_WaitFlagStateUntilTimeout>
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d146      	bne.n	80075ea <HAL_OSPI_Init+0x172>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, 
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	1e5a      	subs	r2, r3, #1
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689a      	ldr	r2, [r3, #8]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007592:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0201 	orr.w	r2, r2, #1
 80075b8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d107      	bne.n	80075d2 <HAL_OSPI_Init+0x15a>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f042 0202 	orr.w	r2, r2, #2
 80075d0:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075da:	d103      	bne.n	80075e4 <HAL_OSPI_Init+0x16c>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	655a      	str	r2, [r3, #84]	; 0x54
 80075e2:	e002      	b.n	80075ea <HAL_OSPI_Init+0x172>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	f8e0f884 	.word	0xf8e0f884

080075f8 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08a      	sub	sp, #40	; 0x28
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007604:	f7fa fddc 	bl	80021c0 <HAL_GetTick>
 8007608:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007614:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d104      	bne.n	8007626 <HAL_OSPI_Command+0x2e>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007624:	d115      	bne.n	8007652 <HAL_OSPI_Command+0x5a>
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b14      	cmp	r3, #20
 800762a:	d107      	bne.n	800763c <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG) 
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d00e      	beq.n	8007652 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b03      	cmp	r3, #3
 800763a:	d00a      	beq.n	8007652 <HAL_OSPI_Command+0x5a>
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2b24      	cmp	r3, #36	; 0x24
 8007640:	d15b      	bne.n	80076fa <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  || 
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d003      	beq.n	8007652 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  || 
 800764e:	2b03      	cmp	r3, #3
 8007650:	d153      	bne.n	80076fa <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	2200      	movs	r2, #0
 800765a:	2120      	movs	r1, #32
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 fee3 	bl	8008428 <OSPI_WaitFlagStateUntilTimeout>
 8007662:	4603      	mov	r3, r0
 8007664:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8007666:	7ffb      	ldrb	r3, [r7, #31]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d14c      	bne.n	8007706 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8007672:	68b9      	ldr	r1, [r7, #8]
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 ff0f 	bl	8008498 <OSPI_ConfigCmd>
 800767a:	4603      	mov	r3, r0
 800767c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800767e:	7ffb      	ldrb	r3, [r7, #31]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d140      	bne.n	8007706 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10e      	bne.n	80076aa <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	2201      	movs	r2, #1
 8007694:	2102      	movs	r1, #2
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fec6 	bl	8008428 <OSPI_WaitFlagStateUntilTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2202      	movs	r2, #2
 80076a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80076a8:	e02d      	b.n	8007706 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d103      	bne.n	80076ba <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2204      	movs	r2, #4
 80076b6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80076b8:	e025      	b.n	8007706 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d10b      	bne.n	80076da <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c6:	2b24      	cmp	r3, #36	; 0x24
 80076c8:	d103      	bne.n	80076d2 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2204      	movs	r2, #4
 80076ce:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80076d0:	e019      	b.n	8007706 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2214      	movs	r2, #20
 80076d6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80076d8:	e015      	b.n	8007706 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d111      	bne.n	8007706 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e6:	2b14      	cmp	r3, #20
 80076e8:	d103      	bne.n	80076f2 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2204      	movs	r2, #4
 80076ee:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80076f0:	e009      	b.n	8007706 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2224      	movs	r2, #36	; 0x24
 80076f6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80076f8:	e005      	b.n	8007706 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2210      	movs	r2, #16
 8007702:	659a      	str	r2, [r3, #88]	; 0x58
 8007704:	e000      	b.n	8007708 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8007706:	bf00      	nop
  }

  /* Return function status */
  return status;
 8007708:	7ffb      	ldrb	r3, [r7, #31]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3720      	adds	r7, #32
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b08a      	sub	sp, #40	; 0x28
 8007716:	af02      	add	r7, sp, #8
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	60b9      	str	r1, [r7, #8]
 800771c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800771e:	f7fa fd4f 	bl	80021c0 <HAL_GetTick>
 8007722:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3350      	adds	r3, #80	; 0x50
 800772a:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d105      	bne.n	800773e <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2208      	movs	r2, #8
 800773a:	659a      	str	r2, [r3, #88]	; 0x58
 800773c:	e057      	b.n	80077ee <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007742:	2b04      	cmp	r3, #4
 8007744:	d14e      	bne.n	80077e4 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774c:	1c5a      	adds	r2, r3, #1
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	64da      	str	r2, [r3, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->pBuffPtr  = pData;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800776e:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	2201      	movs	r2, #1
 8007778:	2104      	movs	r1, #4
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 fe54 	bl	8008428 <OSPI_WaitFlagStateUntilTimeout>
 8007780:	4603      	mov	r3, r0
 8007782:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8007784:	7ffb      	ldrb	r3, [r7, #31]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d113      	bne.n	80077b2 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778e:	781a      	ldrb	r2, [r3, #0]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a2:	1e5a      	subs	r2, r3, #1
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	64da      	str	r2, [r3, #76]	; 0x4c
      } while (hospi->XferCount > 0U);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1df      	bne.n	8007770 <HAL_OSPI_Transmit+0x5e>
 80077b0:	e000      	b.n	80077b4 <HAL_OSPI_Transmit+0xa2>
          break;
 80077b2:	bf00      	nop

      if (status == HAL_OK)
 80077b4:	7ffb      	ldrb	r3, [r7, #31]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d119      	bne.n	80077ee <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2201      	movs	r2, #1
 80077c2:	2102      	movs	r1, #2
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 fe2f 	bl	8008428 <OSPI_WaitFlagStateUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80077ce:	7ffb      	ldrb	r3, [r7, #31]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10c      	bne.n	80077ee <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2202      	movs	r2, #2
 80077da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2202      	movs	r2, #2
 80077e0:	655a      	str	r2, [r3, #84]	; 0x54
 80077e2:	e004      	b.n	80077ee <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2210      	movs	r2, #16
 80077ec:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 80077ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3720      	adds	r7, #32
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08c      	sub	sp, #48	; 0x30
 80077fc:	af02      	add	r7, sp, #8
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007804:	f7fa fcdc 	bl	80021c0 <HAL_GetTick>
 8007808:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3350      	adds	r3, #80	; 0x50
 8007810:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007818:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8007822:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d106      	bne.n	8007838 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2208      	movs	r2, #8
 8007834:	659a      	str	r2, [r3, #88]	; 0x58
 8007836:	e07c      	b.n	8007932 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783c:	2b04      	cmp	r3, #4
 800783e:	d172      	bne.n	8007926 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	64da      	str	r2, [r3, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->pBuffPtr  = pData;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	645a      	str	r2, [r3, #68]	; 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800786c:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007876:	d104      	bne.n	8007882 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	649a      	str	r2, [r3, #72]	; 0x48
 8007880:	e011      	b.n	80078a6 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800788a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800788e:	2b00      	cmp	r3, #0
 8007890:	d004      	beq.n	800789c <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	649a      	str	r2, [r3, #72]	; 0x48
 800789a:	e004      	b.n	80078a6 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	2201      	movs	r2, #1
 80078ae:	2106      	movs	r1, #6
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fdb9 	bl	8008428 <OSPI_WaitFlagStateUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80078bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d114      	bne.n	80078ee <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	7812      	ldrb	r2, [r2, #0]
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078de:	1e5a      	subs	r2, r3, #1
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	64da      	str	r2, [r3, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1dc      	bne.n	80078a6 <HAL_OSPI_Receive+0xae>
 80078ec:	e000      	b.n	80078f0 <HAL_OSPI_Receive+0xf8>
          break;
 80078ee:	bf00      	nop

      if (status == HAL_OK)
 80078f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d11c      	bne.n	8007932 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	2201      	movs	r2, #1
 8007900:	2102      	movs	r1, #2
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 fd90 	bl	8008428 <OSPI_WaitFlagStateUntilTimeout>
 8007908:	4603      	mov	r3, r0
 800790a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800790e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10d      	bne.n	8007932 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2202      	movs	r2, #2
 800791c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2202      	movs	r2, #2
 8007922:	655a      	str	r2, [r3, #84]	; 0x54
 8007924:	e005      	b.n	8007932 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2210      	movs	r2, #16
 8007930:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 8007932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007936:	4618      	mov	r0, r3
 8007938:	3728      	adds	r7, #40	; 0x28
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af02      	add	r7, sp, #8
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800794a:	f7fa fc39 	bl	80021c0 <HAL_GetTick>
 800794e:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007954:	2b04      	cmp	r3, #4
 8007956:	d134      	bne.n	80079c2 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2200      	movs	r2, #0
 8007962:	2120      	movs	r1, #32
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fd5f 	bl	8008428 <OSPI_WaitFlagStateUntilTimeout>
 800796a:	4603      	mov	r3, r0
 800796c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d12b      	bne.n	80079cc <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2288      	movs	r2, #136	; 0x88
 8007978:	655a      	str	r2, [r3, #84]	; 0x54

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b08      	cmp	r3, #8
 8007980:	d111      	bne.n	80079a6 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	6852      	ldr	r2, [r2, #4]
 800798a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2210      	movs	r2, #16
 8007994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80079a4:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <HAL_OSPI_MemoryMapped+0x98>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	6812      	ldr	r2, [r2, #0]
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	e004      	b.n	80079cc <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2210      	movs	r2, #16
 80079ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Return function status */
  return status;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	cffffff7 	.word	0xcffffff7

080079dc <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b094      	sub	sp, #80	; 0x50
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4aa3      	ldr	r2, [pc, #652]	; (8007ca8 <HAL_OSPIM_Config+0x2ac>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d105      	bne.n	8007a2a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8007a28:	e004      	b.n	8007a34 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007a34:	2300      	movs	r3, #0
 8007a36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007a3a:	e01d      	b.n	8007a78 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8007a3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007a40:	3301      	adds	r3, #1
 8007a42:	b2d8      	uxtb	r0, r3
 8007a44:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007a48:	f107 0114 	add.w	r1, r7, #20
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	4413      	add	r3, r2
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	440b      	add	r3, r1
 8007a56:	4619      	mov	r1, r3
 8007a58:	f000 fe98 	bl	800878c <OSPIM_GetConfig>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2208      	movs	r2, #8
 8007a6c:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007a6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007a72:	3301      	adds	r3, #1
 8007a74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007a78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d9dd      	bls.n	8007a3c <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8007a80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 84c3 	bne.w	8008410 <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8007a8a:	4b87      	ldr	r3, [pc, #540]	; (8007ca8 <HAL_OSPIM_Config+0x2ac>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007a96:	4b84      	ldr	r3, [pc, #528]	; (8007ca8 <HAL_OSPIM_Config+0x2ac>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a83      	ldr	r2, [pc, #524]	; (8007ca8 <HAL_OSPIM_Config+0x2ac>)
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8007aa2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007aa6:	f043 0301 	orr.w	r3, r3, #1
 8007aaa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8007aae:	4b7f      	ldr	r3, [pc, #508]	; (8007cac <HAL_OSPIM_Config+0x2b0>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007aba:	4b7c      	ldr	r3, [pc, #496]	; (8007cac <HAL_OSPIM_Config+0x2b0>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a7b      	ldr	r2, [pc, #492]	; (8007cac <HAL_OSPIM_Config+0x2b0>)
 8007ac0:	f023 0301 	bic.w	r3, r3, #1
 8007ac4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8007ac6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007aca:	f043 0302 	orr.w	r3, r3, #2
 8007ace:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007ad2:	4977      	ldr	r1, [pc, #476]	; (8007cb0 <HAL_OSPIM_Config+0x2b4>)
 8007ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	4413      	add	r3, r2
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007ae2:	4413      	add	r3, r2
 8007ae4:	3b34      	subs	r3, #52	; 0x34
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	440b      	add	r3, r1
 8007aee:	6859      	ldr	r1, [r3, #4]
 8007af0:	486f      	ldr	r0, [pc, #444]	; (8007cb0 <HAL_OSPIM_Config+0x2b4>)
 8007af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007af4:	4613      	mov	r3, r2
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	4413      	add	r3, r2
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007b00:	4413      	add	r3, r2
 8007b02:	3b34      	subs	r3, #52	; 0x34
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3b01      	subs	r3, #1
 8007b08:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4403      	add	r3, r0
 8007b10:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007b12:	4b67      	ldr	r3, [pc, #412]	; (8007cb0 <HAL_OSPIM_Config+0x2b4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 80ca 	beq.w	8007cb4 <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007b20:	4b63      	ldr	r3, [pc, #396]	; (8007cb0 <HAL_OSPIM_Config+0x2b4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a62      	ldr	r2, [pc, #392]	; (8007cb0 <HAL_OSPIM_Config+0x2b4>)
 8007b26:	f023 0301 	bic.w	r3, r3, #1
 8007b2a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8007b2c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	f040 8178 	bne.w	8007e26 <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8007b36:	495e      	ldr	r1, [pc, #376]	; (8007cb0 <HAL_OSPIM_Config+0x2b4>)
 8007b38:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	4413      	add	r3, r2
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007b48:	4413      	add	r3, r2
 8007b4a:	3b3c      	subs	r3, #60	; 0x3c
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	440b      	add	r3, r1
 8007b54:	6859      	ldr	r1, [r3, #4]
 8007b56:	4856      	ldr	r0, [pc, #344]	; (8007cb0 <HAL_OSPIM_Config+0x2b4>)
 8007b58:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	4413      	add	r3, r2
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007b68:	4413      	add	r3, r2
 8007b6a:	3b3c      	subs	r3, #60	; 0x3c
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	f041 0202 	orr.w	r2, r1, #2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4403      	add	r3, r0
 8007b78:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007b7a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007b7e:	4613      	mov	r3, r2
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	4413      	add	r3, r2
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007b8a:	4413      	add	r3, r2
 8007b8c:	3b38      	subs	r3, #56	; 0x38
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d021      	beq.n	8007bd8 <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8007b94:	4946      	ldr	r1, [pc, #280]	; (8007cb0 <HAL_OSPIM_Config+0x2b4>)
 8007b96:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	4413      	add	r3, r2
 8007ba0:	00db      	lsls	r3, r3, #3
 8007ba2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007ba6:	4413      	add	r3, r2
 8007ba8:	3b38      	subs	r3, #56	; 0x38
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	6859      	ldr	r1, [r3, #4]
 8007bb4:	483e      	ldr	r0, [pc, #248]	; (8007cb0 <HAL_OSPIM_Config+0x2b4>)
 8007bb6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007bba:	4613      	mov	r3, r2
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	4413      	add	r3, r2
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007bc6:	4413      	add	r3, r2
 8007bc8:	3b38      	subs	r3, #56	; 0x38
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	f041 0220 	orr.w	r2, r1, #32
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4403      	add	r3, r0
 8007bd6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007bd8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007bdc:	4613      	mov	r3, r2
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	4413      	add	r3, r2
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007be8:	4413      	add	r3, r2
 8007bea:	3b30      	subs	r3, #48	; 0x30
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d025      	beq.n	8007c3e <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8007bf2:	492f      	ldr	r1, [pc, #188]	; (8007cb0 <HAL_OSPIM_Config+0x2b4>)
 8007bf4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	4413      	add	r3, r2
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007c04:	4413      	add	r3, r2
 8007c06:	3b30      	subs	r3, #48	; 0x30
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	440b      	add	r3, r1
 8007c14:	6859      	ldr	r1, [r3, #4]
 8007c16:	4826      	ldr	r0, [pc, #152]	; (8007cb0 <HAL_OSPIM_Config+0x2b4>)
 8007c18:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	4413      	add	r3, r2
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007c28:	4413      	add	r3, r2
 8007c2a:	3b30      	subs	r3, #48	; 0x30
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4403      	add	r3, r0
 8007c3c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007c3e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007c42:	4613      	mov	r3, r2
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	4413      	add	r3, r2
 8007c48:	00db      	lsls	r3, r3, #3
 8007c4a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007c4e:	4413      	add	r3, r2
 8007c50:	3b2c      	subs	r3, #44	; 0x2c
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 80e6 	beq.w	8007e26 <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8007c5a:	4915      	ldr	r1, [pc, #84]	; (8007cb0 <HAL_OSPIM_Config+0x2b4>)
 8007c5c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007c60:	4613      	mov	r3, r2
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	4413      	add	r3, r2
 8007c66:	00db      	lsls	r3, r3, #3
 8007c68:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3b2c      	subs	r3, #44	; 0x2c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	6859      	ldr	r1, [r3, #4]
 8007c7e:	480c      	ldr	r0, [pc, #48]	; (8007cb0 <HAL_OSPIM_Config+0x2b4>)
 8007c80:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007c84:	4613      	mov	r3, r2
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	4413      	add	r3, r2
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007c90:	4413      	add	r3, r2
 8007c92:	3b2c      	subs	r3, #44	; 0x2c
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4403      	add	r3, r0
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	e0be      	b.n	8007e26 <HAL_OSPIM_Config+0x42a>
 8007ca8:	52005000 	.word	0x52005000
 8007cac:	5200a000 	.word	0x5200a000
 8007cb0:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8007cb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	4413      	add	r3, r2
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007cc2:	4413      	add	r3, r2
 8007cc4:	3b3c      	subs	r3, #60	; 0x3c
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 80ac 	beq.w	8007e26 <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8007cce:	499d      	ldr	r1, [pc, #628]	; (8007f44 <HAL_OSPIM_Config+0x548>)
 8007cd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	4413      	add	r3, r2
 8007cd8:	00db      	lsls	r3, r3, #3
 8007cda:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007cde:	4413      	add	r3, r2
 8007ce0:	3b3c      	subs	r3, #60	; 0x3c
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	6859      	ldr	r1, [r3, #4]
 8007cec:	4895      	ldr	r0, [pc, #596]	; (8007f44 <HAL_OSPIM_Config+0x548>)
 8007cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	4413      	add	r3, r2
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007cfc:	4413      	add	r3, r2
 8007cfe:	3b3c      	subs	r3, #60	; 0x3c
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	f021 0201 	bic.w	r2, r1, #1
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4403      	add	r3, r0
 8007d0c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8007d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d10:	4613      	mov	r3, r2
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	4413      	add	r3, r2
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007d1c:	4413      	add	r3, r2
 8007d1e:	3b38      	subs	r3, #56	; 0x38
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d01f      	beq.n	8007d66 <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8007d26:	4987      	ldr	r1, [pc, #540]	; (8007f44 <HAL_OSPIM_Config+0x548>)
 8007d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	4413      	add	r3, r2
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007d36:	4413      	add	r3, r2
 8007d38:	3b38      	subs	r3, #56	; 0x38
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	6859      	ldr	r1, [r3, #4]
 8007d44:	487f      	ldr	r0, [pc, #508]	; (8007f44 <HAL_OSPIM_Config+0x548>)
 8007d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d48:	4613      	mov	r3, r2
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	4413      	add	r3, r2
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007d54:	4413      	add	r3, r2
 8007d56:	3b38      	subs	r3, #56	; 0x38
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	f021 0210 	bic.w	r2, r1, #16
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4403      	add	r3, r0
 8007d64:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d68:	4613      	mov	r3, r2
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	4413      	add	r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007d74:	4413      	add	r3, r2
 8007d76:	3b30      	subs	r3, #48	; 0x30
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d023      	beq.n	8007dc6 <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8007d7e:	4971      	ldr	r1, [pc, #452]	; (8007f44 <HAL_OSPIM_Config+0x548>)
 8007d80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d82:	4613      	mov	r3, r2
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	4413      	add	r3, r2
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007d8e:	4413      	add	r3, r2
 8007d90:	3b30      	subs	r3, #48	; 0x30
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	6859      	ldr	r1, [r3, #4]
 8007da0:	4868      	ldr	r0, [pc, #416]	; (8007f44 <HAL_OSPIM_Config+0x548>)
 8007da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007da4:	4613      	mov	r3, r2
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	4413      	add	r3, r2
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007db0:	4413      	add	r3, r2
 8007db2:	3b30      	subs	r3, #48	; 0x30
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4403      	add	r3, r0
 8007dc4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dc8:	4613      	mov	r3, r2
 8007dca:	005b      	lsls	r3, r3, #1
 8007dcc:	4413      	add	r3, r2
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007dd4:	4413      	add	r3, r2
 8007dd6:	3b2c      	subs	r3, #44	; 0x2c
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d023      	beq.n	8007e26 <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8007dde:	4959      	ldr	r1, [pc, #356]	; (8007f44 <HAL_OSPIM_Config+0x548>)
 8007de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007de2:	4613      	mov	r3, r2
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	4413      	add	r3, r2
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007dee:	4413      	add	r3, r2
 8007df0:	3b2c      	subs	r3, #44	; 0x2c
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	6859      	ldr	r1, [r3, #4]
 8007e00:	4850      	ldr	r0, [pc, #320]	; (8007f44 <HAL_OSPIM_Config+0x548>)
 8007e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e04:	4613      	mov	r3, r2
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	4413      	add	r3, r2
 8007e0a:	00db      	lsls	r3, r3, #3
 8007e0c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007e10:	4413      	add	r3, r2
 8007e12:	3b2c      	subs	r3, #44	; 0x2c
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4403      	add	r3, r0
 8007e24:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	6819      	ldr	r1, [r3, #0]
 8007e2a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007e2e:	4613      	mov	r3, r2
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	4413      	add	r3, r2
 8007e34:	00db      	lsls	r3, r3, #3
 8007e36:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007e3a:	4413      	add	r3, r2
 8007e3c:	3b3c      	subs	r3, #60	; 0x3c
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4299      	cmp	r1, r3
 8007e42:	d03c      	beq.n	8007ebe <HAL_OSPIM_Config+0x4c2>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	6859      	ldr	r1, [r3, #4]
 8007e48:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	4413      	add	r3, r2
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007e58:	4413      	add	r3, r2
 8007e5a:	3b38      	subs	r3, #56	; 0x38
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4299      	cmp	r1, r3
 8007e60:	d02d      	beq.n	8007ebe <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	6899      	ldr	r1, [r3, #8]
 8007e66:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	4413      	add	r3, r2
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007e76:	4413      	add	r3, r2
 8007e78:	3b34      	subs	r3, #52	; 0x34
 8007e7a:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007e7c:	4299      	cmp	r1, r3
 8007e7e:	d01e      	beq.n	8007ebe <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	68d9      	ldr	r1, [r3, #12]
 8007e84:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007e88:	4613      	mov	r3, r2
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	4413      	add	r3, r2
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007e94:	4413      	add	r3, r2
 8007e96:	3b30      	subs	r3, #48	; 0x30
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4299      	cmp	r1, r3
 8007e9c:	d00f      	beq.n	8007ebe <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	6919      	ldr	r1, [r3, #16]
 8007ea2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	4413      	add	r3, r2
 8007eac:	00db      	lsls	r3, r3, #3
 8007eae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007eb2:	4413      	add	r3, r2
 8007eb4:	3b2c      	subs	r3, #44	; 0x2c
 8007eb6:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007eb8:	4299      	cmp	r1, r3
 8007eba:	f040 811e 	bne.w	80080fa <HAL_OSPIM_Config+0x6fe>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   && 
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	6819      	ldr	r1, [r3, #0]
 8007ec2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	4413      	add	r3, r2
 8007ecc:	00db      	lsls	r3, r3, #3
 8007ece:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007ed2:	4413      	add	r3, r2
 8007ed4:	3b3c      	subs	r3, #60	; 0x3c
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4299      	cmp	r1, r3
 8007eda:	d135      	bne.n	8007f48 <HAL_OSPIM_Config+0x54c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	6859      	ldr	r1, [r3, #4]
 8007ee0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	4413      	add	r3, r2
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007ef0:	4413      	add	r3, r2
 8007ef2:	3b38      	subs	r3, #56	; 0x38
 8007ef4:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   && 
 8007ef6:	4299      	cmp	r1, r3
 8007ef8:	d126      	bne.n	8007f48 <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) && 
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	68d9      	ldr	r1, [r3, #12]
 8007efe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007f02:	4613      	mov	r3, r2
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	4413      	add	r3, r2
 8007f08:	00db      	lsls	r3, r3, #3
 8007f0a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007f0e:	4413      	add	r3, r2
 8007f10:	3b30      	subs	r3, #48	; 0x30
 8007f12:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007f14:	4299      	cmp	r1, r3
 8007f16:	d117      	bne.n	8007f48 <HAL_OSPIM_Config+0x54c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	6919      	ldr	r1, [r3, #16]
 8007f1c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007f20:	4613      	mov	r3, r2
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	4413      	add	r3, r2
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007f2c:	4413      	add	r3, r2
 8007f2e:	3b2c      	subs	r3, #44	; 0x2c
 8007f30:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) && 
 8007f32:	4299      	cmp	r1, r3
 8007f34:	d108      	bne.n	8007f48 <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007f36:	4b03      	ldr	r3, [pc, #12]	; (8007f44 <HAL_OSPIM_Config+0x548>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a02      	ldr	r2, [pc, #8]	; (8007f44 <HAL_OSPIM_Config+0x548>)
 8007f3c:	f043 0301 	orr.w	r3, r3, #1
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	e0da      	b.n	80080fa <HAL_OSPIM_Config+0x6fe>
 8007f44:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8007f48:	49c2      	ldr	r1, [pc, #776]	; (8008254 <HAL_OSPIM_Config+0x858>)
 8007f4a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007f4e:	4613      	mov	r3, r2
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	4413      	add	r3, r2
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007f5a:	4413      	add	r3, r2
 8007f5c:	3b3c      	subs	r3, #60	; 0x3c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3b01      	subs	r3, #1
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	6859      	ldr	r1, [r3, #4]
 8007f68:	48ba      	ldr	r0, [pc, #744]	; (8008254 <HAL_OSPIM_Config+0x858>)
 8007f6a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007f6e:	4613      	mov	r3, r2
 8007f70:	005b      	lsls	r3, r3, #1
 8007f72:	4413      	add	r3, r2
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007f7a:	4413      	add	r3, r2
 8007f7c:	3b3c      	subs	r3, #60	; 0x3c
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	f021 0201 	bic.w	r2, r1, #1
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4403      	add	r3, r0
 8007f8a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007f8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007f90:	4613      	mov	r3, r2
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	4413      	add	r3, r2
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007f9c:	4413      	add	r3, r2
 8007f9e:	3b38      	subs	r3, #56	; 0x38
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d021      	beq.n	8007fea <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8007fa6:	49ab      	ldr	r1, [pc, #684]	; (8008254 <HAL_OSPIM_Config+0x858>)
 8007fa8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007fac:	4613      	mov	r3, r2
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	4413      	add	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007fb8:	4413      	add	r3, r2
 8007fba:	3b38      	subs	r3, #56	; 0x38
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	440b      	add	r3, r1
 8007fc4:	6859      	ldr	r1, [r3, #4]
 8007fc6:	48a3      	ldr	r0, [pc, #652]	; (8008254 <HAL_OSPIM_Config+0x858>)
 8007fc8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007fcc:	4613      	mov	r3, r2
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	4413      	add	r3, r2
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007fd8:	4413      	add	r3, r2
 8007fda:	3b38      	subs	r3, #56	; 0x38
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	f021 0210 	bic.w	r2, r1, #16
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4403      	add	r3, r0
 8007fe8:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007fea:	499a      	ldr	r1, [pc, #616]	; (8008254 <HAL_OSPIM_Config+0x858>)
 8007fec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	4413      	add	r3, r2
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007ffc:	4413      	add	r3, r2
 8007ffe:	3b34      	subs	r3, #52	; 0x34
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3b01      	subs	r3, #1
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	6859      	ldr	r1, [r3, #4]
 800800a:	4892      	ldr	r0, [pc, #584]	; (8008254 <HAL_OSPIM_Config+0x858>)
 800800c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008010:	4613      	mov	r3, r2
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	4413      	add	r3, r2
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800801c:	4413      	add	r3, r2
 800801e:	3b34      	subs	r3, #52	; 0x34
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3b01      	subs	r3, #1
 8008024:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4403      	add	r3, r0
 800802c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800802e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008032:	4613      	mov	r3, r2
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	4413      	add	r3, r2
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800803e:	4413      	add	r3, r2
 8008040:	3b30      	subs	r3, #48	; 0x30
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d025      	beq.n	8008094 <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8008048:	4982      	ldr	r1, [pc, #520]	; (8008254 <HAL_OSPIM_Config+0x858>)
 800804a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800804e:	4613      	mov	r3, r2
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	4413      	add	r3, r2
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800805a:	4413      	add	r3, r2
 800805c:	3b30      	subs	r3, #48	; 0x30
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3b01      	subs	r3, #1
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	440b      	add	r3, r1
 800806a:	6859      	ldr	r1, [r3, #4]
 800806c:	4879      	ldr	r0, [pc, #484]	; (8008254 <HAL_OSPIM_Config+0x858>)
 800806e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008072:	4613      	mov	r3, r2
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	4413      	add	r3, r2
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800807e:	4413      	add	r3, r2
 8008080:	3b30      	subs	r3, #48	; 0x30
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3b01      	subs	r3, #1
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4403      	add	r3, r0
 8008092:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008094:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008098:	4613      	mov	r3, r2
 800809a:	005b      	lsls	r3, r3, #1
 800809c:	4413      	add	r3, r2
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80080a4:	4413      	add	r3, r2
 80080a6:	3b2c      	subs	r3, #44	; 0x2c
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d025      	beq.n	80080fa <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80080ae:	4969      	ldr	r1, [pc, #420]	; (8008254 <HAL_OSPIM_Config+0x858>)
 80080b0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80080b4:	4613      	mov	r3, r2
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	4413      	add	r3, r2
 80080ba:	00db      	lsls	r3, r3, #3
 80080bc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80080c0:	4413      	add	r3, r2
 80080c2:	3b2c      	subs	r3, #44	; 0x2c
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	6859      	ldr	r1, [r3, #4]
 80080d2:	4860      	ldr	r0, [pc, #384]	; (8008254 <HAL_OSPIM_Config+0x858>)
 80080d4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80080d8:	4613      	mov	r3, r2
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	4413      	add	r3, r2
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80080e4:	4413      	add	r3, r2
 80080e6:	3b2c      	subs	r3, #44	; 0x2c
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4403      	add	r3, r0
 80080f8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80080fa:	4a56      	ldr	r2, [pc, #344]	; (8008254 <HAL_OSPIM_Config+0x858>)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	3b01      	subs	r3, #1
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800810c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800810e:	025b      	lsls	r3, r3, #9
 8008110:	431a      	orrs	r2, r3
 8008112:	4950      	ldr	r1, [pc, #320]	; (8008254 <HAL_OSPIM_Config+0x858>)
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	3b01      	subs	r3, #1
 800811a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	440b      	add	r3, r1
 8008122:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	1e5a      	subs	r2, r3, #1
 800812a:	4b4a      	ldr	r3, [pc, #296]	; (8008254 <HAL_OSPIM_Config+0x858>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	0c1b      	lsrs	r3, r3, #16
 8008130:	b2db      	uxtb	r3, r3
 8008132:	429a      	cmp	r2, r3
 8008134:	d90a      	bls.n	800814c <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8008136:	4b47      	ldr	r3, [pc, #284]	; (8008254 <HAL_OSPIM_Config+0x858>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	3b01      	subs	r3, #1
 8008144:	041b      	lsls	r3, r3, #16
 8008146:	4943      	ldr	r1, [pc, #268]	; (8008254 <HAL_OSPIM_Config+0x858>)
 8008148:	4313      	orrs	r3, r2
 800814a:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800814c:	4b41      	ldr	r3, [pc, #260]	; (8008254 <HAL_OSPIM_Config+0x858>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 809b 	beq.w	8008290 <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800815a:	4a3e      	ldr	r2, [pc, #248]	; (8008254 <HAL_OSPIM_Config+0x858>)
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3b01      	subs	r3, #1
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f023 0203 	bic.w	r2, r3, #3
 800816c:	4939      	ldr	r1, [pc, #228]	; (8008254 <HAL_OSPIM_Config+0x858>)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3b01      	subs	r3, #1
 8008174:	f042 0201 	orr.w	r2, r2, #1
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	440b      	add	r3, r1
 800817c:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d011      	beq.n	80081aa <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8008186:	4a33      	ldr	r2, [pc, #204]	; (8008254 <HAL_OSPIM_Config+0x858>)
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	3b01      	subs	r3, #1
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008198:	492e      	ldr	r1, [pc, #184]	; (8008254 <HAL_OSPIM_Config+0x858>)
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	3b01      	subs	r3, #1
 80081a0:	f042 0210 	orr.w	r2, r2, #16
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d016      	beq.n	80081e4 <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 80081b6:	4a27      	ldr	r2, [pc, #156]	; (8008254 <HAL_OSPIM_Config+0x858>)
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	3b01      	subs	r3, #1
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80081cc:	4921      	ldr	r1, [pc, #132]	; (8008254 <HAL_OSPIM_Config+0x858>)
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	440b      	add	r3, r1
 80081e0:	605a      	str	r2, [r3, #4]
 80081e2:	e019      	b.n	8008218 <HAL_OSPIM_Config+0x81c>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d015      	beq.n	8008218 <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 80081ec:	4a19      	ldr	r2, [pc, #100]	; (8008254 <HAL_OSPIM_Config+0x858>)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008202:	4914      	ldr	r1, [pc, #80]	; (8008254 <HAL_OSPIM_Config+0x858>)
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	3b01      	subs	r3, #1
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d019      	beq.n	8008258 <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8008224:	4a0b      	ldr	r2, [pc, #44]	; (8008254 <HAL_OSPIM_Config+0x858>)
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	3b01      	subs	r3, #1
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800823a:	4906      	ldr	r1, [pc, #24]	; (8008254 <HAL_OSPIM_Config+0x858>)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	3b01      	subs	r3, #1
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	605a      	str	r2, [r3, #4]
 8008250:	e0c6      	b.n	80083e0 <HAL_OSPIM_Config+0x9e4>
 8008252:	bf00      	nop
 8008254:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 80bf 	beq.w	80083e0 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8008262:	4a6e      	ldr	r2, [pc, #440]	; (800841c <HAL_OSPIM_Config+0xa20>)
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	3b01      	subs	r3, #1
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008278:	4968      	ldr	r1, [pc, #416]	; (800841c <HAL_OSPIM_Config+0xa20>)
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	3b01      	subs	r3, #1
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	440b      	add	r3, r1
 800828c:	605a      	str	r2, [r3, #4]
 800828e:	e0a7      	b.n	80083e0 <HAL_OSPIM_Config+0x9e4>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), 
 8008290:	4a62      	ldr	r2, [pc, #392]	; (800841c <HAL_OSPIM_Config+0xa20>)
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3b01      	subs	r3, #1
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f023 0203 	bic.w	r2, r3, #3
 80082a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	431a      	orrs	r2, r3
 80082a8:	495c      	ldr	r1, [pc, #368]	; (800841c <HAL_OSPIM_Config+0xa20>)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	f042 0201 	orr.w	r2, r2, #1
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	440b      	add	r3, r1
 80082b8:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d014      	beq.n	80082ec <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), 
 80082c2:	4a56      	ldr	r2, [pc, #344]	; (800841c <HAL_OSPIM_Config+0xa20>)
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082d6:	015b      	lsls	r3, r3, #5
 80082d8:	431a      	orrs	r2, r3
 80082da:	4950      	ldr	r1, [pc, #320]	; (800841c <HAL_OSPIM_Config+0xa20>)
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	f042 0210 	orr.w	r2, r2, #16
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	440b      	add	r3, r1
 80082ea:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d019      	beq.n	800832c <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 80082f8:	4a48      	ldr	r2, [pc, #288]	; (800841c <HAL_OSPIM_Config+0xa20>)
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	3b01      	subs	r3, #1
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800830e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008310:	049b      	lsls	r3, r3, #18
 8008312:	431a      	orrs	r2, r3
 8008314:	4941      	ldr	r1, [pc, #260]	; (800841c <HAL_OSPIM_Config+0xa20>)
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	3b01      	subs	r3, #1
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	440b      	add	r3, r1
 8008328:	605a      	str	r2, [r3, #4]
 800832a:	e01c      	b.n	8008366 <HAL_OSPIM_Config+0x96a>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d018      	beq.n	8008366 <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 8008334:	4a39      	ldr	r2, [pc, #228]	; (800841c <HAL_OSPIM_Config+0xa20>)
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	3b01      	subs	r3, #1
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800834a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800834c:	069b      	lsls	r3, r3, #26
 800834e:	431a      	orrs	r2, r3
 8008350:	4932      	ldr	r1, [pc, #200]	; (800841c <HAL_OSPIM_Config+0xa20>)
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	3b01      	subs	r3, #1
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	440b      	add	r3, r1
 8008364:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d019      	beq.n	80083a6 <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8008372:	4a2a      	ldr	r2, [pc, #168]	; (800841c <HAL_OSPIM_Config+0xa20>)
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	3b01      	subs	r3, #1
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800838a:	049b      	lsls	r3, r3, #18
 800838c:	431a      	orrs	r2, r3
 800838e:	4923      	ldr	r1, [pc, #140]	; (800841c <HAL_OSPIM_Config+0xa20>)
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	3b01      	subs	r3, #1
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	440b      	add	r3, r1
 80083a2:	605a      	str	r2, [r3, #4]
 80083a4:	e01c      	b.n	80083e0 <HAL_OSPIM_Config+0x9e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d018      	beq.n	80083e0 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 80083ae:	4a1b      	ldr	r2, [pc, #108]	; (800841c <HAL_OSPIM_Config+0xa20>)
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80083c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083c6:	069b      	lsls	r3, r3, #26
 80083c8:	431a      	orrs	r2, r3
 80083ca:	4914      	ldr	r1, [pc, #80]	; (800841c <HAL_OSPIM_Config+0xa20>)
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80083e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d005      	beq.n	80083f8 <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80083ec:	4b0c      	ldr	r3, [pc, #48]	; (8008420 <HAL_OSPIM_Config+0xa24>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a0b      	ldr	r2, [pc, #44]	; (8008420 <HAL_OSPIM_Config+0xa24>)
 80083f2:	f043 0301 	orr.w	r3, r3, #1
 80083f6:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80083f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d005      	beq.n	8008410 <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8008404:	4b07      	ldr	r3, [pc, #28]	; (8008424 <HAL_OSPIM_Config+0xa28>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a06      	ldr	r2, [pc, #24]	; (8008424 <HAL_OSPIM_Config+0xa28>)
 800840a:	f043 0301 	orr.w	r3, r3, #1
 800840e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8008410:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008414:	4618      	mov	r0, r3
 8008416:	3750      	adds	r7, #80	; 0x50
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	5200b400 	.word	0x5200b400
 8008420:	52005000 	.word	0x52005000
 8008424:	5200a000 	.word	0x5200a000

08008428 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	603b      	str	r3, [r7, #0]
 8008434:	4613      	mov	r3, r2
 8008436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8008438:	e01a      	b.n	8008470 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008440:	d016      	beq.n	8008470 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008442:	f7f9 febd 	bl	80021c0 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	429a      	cmp	r2, r3
 8008450:	d302      	bcc.n	8008458 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10b      	bne.n	8008470 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800845e:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008464:	f043 0201 	orr.w	r2, r3, #1
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e00e      	b.n	800848e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6a1a      	ldr	r2, [r3, #32]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	4013      	ands	r3, r2
 800847a:	2b00      	cmp	r3, #0
 800847c:	bf14      	ite	ne
 800847e:	2301      	movne	r3, #1
 8008480:	2300      	moveq	r3, #0
 8008482:	b2db      	uxtb	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	429a      	cmp	r2, r3
 800848a:	d1d6      	bne.n	800843a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8008498:	b480      	push	{r7}
 800849a:	b089      	sub	sp, #36	; 0x24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg; 
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80084b4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10a      	bne.n	80084d4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d114      	bne.n	8008506 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80084e4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80084ee:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80084f8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	e02c      	b.n	8008560 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b03      	cmp	r3, #3
 800850c:	d114      	bne.n	8008538 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008516:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8008520:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800852a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	e013      	b.n	8008560 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008540:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800854a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8008554:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800855e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008568:	431a      	orrs	r2, r3
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008572:	2b00      	cmp	r3, #0
 8008574:	d012      	beq.n	800859c <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858e:	4319      	orrs	r1, r3
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008594:	430b      	orrs	r3, r1
 8008596:	431a      	orrs	r2, r3
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f023 021f 	bic.w	r2, r3, #31
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a8:	431a      	orrs	r2, r3
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d009      	beq.n	80085ca <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d105      	bne.n	80085ca <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3a01      	subs	r2, #1
 80085c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f000 8095 	beq.w	80086fe <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d053      	beq.n	8008684 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d01e      	beq.n	8008622 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	4b64      	ldr	r3, [pc, #400]	; (800877c <OSPI_ConfigCmd+0x2e4>)
 80085ea:	4013      	ands	r3, r2
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	68d1      	ldr	r1, [r2, #12]
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	6952      	ldr	r2, [r2, #20]
 80085f4:	4311      	orrs	r1, r2
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	6912      	ldr	r2, [r2, #16]
 80085fa:	4311      	orrs	r1, r2
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	69d2      	ldr	r2, [r2, #28]
 8008600:	4311      	orrs	r1, r2
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008606:	4311      	orrs	r1, r2
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	6a12      	ldr	r2, [r2, #32]
 800860c:	4311      	orrs	r1, r2
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008612:	4311      	orrs	r1, r2
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008618:	430a      	orrs	r2, r1
 800861a:	431a      	orrs	r2, r3
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	e026      	b.n	8008670 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	4b56      	ldr	r3, [pc, #344]	; (8008780 <OSPI_ConfigCmd+0x2e8>)
 8008628:	4013      	ands	r3, r2
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	68d1      	ldr	r1, [r2, #12]
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	6952      	ldr	r2, [r2, #20]
 8008632:	4311      	orrs	r1, r2
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	6912      	ldr	r2, [r2, #16]
 8008638:	4311      	orrs	r1, r2
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	69d2      	ldr	r2, [r2, #28]
 800863e:	4311      	orrs	r1, r2
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008644:	4311      	orrs	r1, r2
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	6a12      	ldr	r2, [r2, #32]
 800864a:	430a      	orrs	r2, r1
 800864c:	431a      	orrs	r2, r3
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800865a:	d109      	bne.n	8008670 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8008660:	2b08      	cmp	r3, #8
 8008662:	d105      	bne.n	8008670 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	6992      	ldr	r2, [r2, #24]
 8008680:	649a      	str	r2, [r3, #72]	; 0x48
 8008682:	e074      	b.n	800876e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	2b00      	cmp	r3, #0
 800868a:	d015      	beq.n	80086b8 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	4b3c      	ldr	r3, [pc, #240]	; (8008784 <OSPI_ConfigCmd+0x2ec>)
 8008692:	4013      	ands	r3, r2
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	68d1      	ldr	r1, [r2, #12]
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	6952      	ldr	r2, [r2, #20]
 800869c:	4311      	orrs	r1, r2
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	6912      	ldr	r2, [r2, #16]
 80086a2:	4311      	orrs	r1, r2
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086a8:	4311      	orrs	r1, r2
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80086ae:	430a      	orrs	r2, r1
 80086b0:	431a      	orrs	r2, r3
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	e01d      	b.n	80086f4 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	68d9      	ldr	r1, [r3, #12]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	4319      	orrs	r1, r3
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	430b      	orrs	r3, r1
 80086d0:	431a      	orrs	r2, r3
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086de:	d109      	bne.n	80086f4 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80086e4:	2b08      	cmp	r3, #8
 80086e6:	d105      	bne.n	80086f4 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	e037      	b.n	800876e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d02e      	beq.n	8008764 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870a:	2b00      	cmp	r3, #0
 800870c:	d015      	beq.n	800873a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	4b1d      	ldr	r3, [pc, #116]	; (8008788 <OSPI_ConfigCmd+0x2f0>)
 8008714:	4013      	ands	r3, r2
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	69d1      	ldr	r1, [r2, #28]
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800871e:	4311      	orrs	r1, r2
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	6a12      	ldr	r2, [r2, #32]
 8008724:	4311      	orrs	r1, r2
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800872a:	4311      	orrs	r1, r2
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008730:	430a      	orrs	r2, r1
 8008732:	431a      	orrs	r2, r3
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	e00e      	b.n	8008758 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	69d9      	ldr	r1, [r3, #28]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874a:	4319      	orrs	r1, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	6a1b      	ldr	r3, [r3, #32]
 8008750:	430b      	orrs	r3, r1
 8008752:	431a      	orrs	r2, r3
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	6992      	ldr	r2, [r2, #24]
 8008760:	649a      	str	r2, [r3, #72]	; 0x48
 8008762:	e004      	b.n	800876e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2208      	movs	r2, #8
 800876c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 800876e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3724      	adds	r7, #36	; 0x24
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	f0ffc0c0 	.word	0xf0ffc0c0
 8008780:	ffffc0c0 	.word	0xffffc0c0
 8008784:	f0ffffc0 	.word	0xf0ffffc0
 8008788:	f0ffc0ff 	.word	0xf0ffc0ff

0800878c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	6039      	str	r1, [r7, #0]
 8008796:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg; 
  uint32_t value = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d005      	beq.n	80087b2 <OSPIM_GetConfig+0x26>
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d802      	bhi.n	80087b2 <OSPIM_GetConfig+0x26>
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d102      	bne.n	80087b8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	75fb      	strb	r3, [r7, #23]
 80087b6:	e098      	b.n	80088ea <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2200      	movs	r2, #0
 80087c2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	2200      	movs	r2, #0
 80087c8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2200      	movs	r2, #0
 80087ce:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2200      	movs	r2, #0
 80087d4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d10b      	bne.n	80087f4 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80087dc:	4b46      	ldr	r3, [pc, #280]	; (80088f8 <OSPIM_GetConfig+0x16c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d102      	bne.n	80087ee <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC 
 80087e8:	4b44      	ldr	r3, [pc, #272]	; (80088fc <OSPIM_GetConfig+0x170>)
 80087ea:	613b      	str	r3, [r7, #16]
 80087ec:	e002      	b.n	80087f4 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80087ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087f2:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80087f4:	2300      	movs	r3, #0
 80087f6:	60fb      	str	r3, [r7, #12]
 80087f8:	e074      	b.n	80088e4 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80087fa:	4a3f      	ldr	r2, [pc, #252]	; (80088f8 <OSPIM_GetConfig+0x16c>)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00a      	beq.n	8008826 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	4053      	eors	r3, r2
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d103      	bne.n	8008826 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1c5a      	adds	r2, r3, #1
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f003 0310 	and.w	r3, r3, #16
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00a      	beq.n	8008846 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	4053      	eors	r3, r2
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	d103      	bne.n	8008846 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	1c5a      	adds	r2, r3, #1
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	4053      	eors	r3, r2
 8008856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800885a:	2b00      	cmp	r3, #0
 800885c:	d103      	bne.n	8008866 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d018      	beq.n	80088a2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	4053      	eors	r3, r2
 8008876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d111      	bne.n	80088a2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d106      	bne.n	8008896 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
 800888c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	60da      	str	r2, [r3, #12]
 8008894:	e005      	b.n	80088a2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3301      	adds	r3, #1
 800889a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d018      	beq.n	80088de <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	4053      	eors	r3, r2
 80088b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d111      	bne.n	80088de <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d106      	bne.n	80088d2 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3301      	adds	r3, #1
 80088c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	611a      	str	r2, [r3, #16]
 80088d0:	e005      	b.n	80088de <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3301      	adds	r3, #1
 80088d6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d987      	bls.n	80087fa <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	371c      	adds	r7, #28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	5200b400 	.word	0x5200b400
 80088fc:	04040222 	.word	0x04040222

08008900 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008908:	4b29      	ldr	r3, [pc, #164]	; (80089b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	f003 0307 	and.w	r3, r3, #7
 8008910:	2b06      	cmp	r3, #6
 8008912:	d00a      	beq.n	800892a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008914:	4b26      	ldr	r3, [pc, #152]	; (80089b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	429a      	cmp	r2, r3
 8008920:	d001      	beq.n	8008926 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e03f      	b.n	80089a6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	e03d      	b.n	80089a6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800892a:	4b21      	ldr	r3, [pc, #132]	; (80089b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8008932:	491f      	ldr	r1, [pc, #124]	; (80089b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4313      	orrs	r3, r2
 8008938:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800893a:	f7f9 fc41 	bl	80021c0 <HAL_GetTick>
 800893e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008940:	e009      	b.n	8008956 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008942:	f7f9 fc3d 	bl	80021c0 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008950:	d901      	bls.n	8008956 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e027      	b.n	80089a6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008956:	4b16      	ldr	r3, [pc, #88]	; (80089b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800895e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008962:	d1ee      	bne.n	8008942 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b1e      	cmp	r3, #30
 8008968:	d008      	beq.n	800897c <HAL_PWREx_ConfigSupply+0x7c>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b2e      	cmp	r3, #46	; 0x2e
 800896e:	d005      	beq.n	800897c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b1d      	cmp	r3, #29
 8008974:	d002      	beq.n	800897c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b2d      	cmp	r3, #45	; 0x2d
 800897a:	d113      	bne.n	80089a4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800897c:	f7f9 fc20 	bl	80021c0 <HAL_GetTick>
 8008980:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008982:	e009      	b.n	8008998 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008984:	f7f9 fc1c 	bl	80021c0 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008992:	d901      	bls.n	8008998 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e006      	b.n	80089a6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008998:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	f003 0311 	and.w	r3, r3, #17
 80089a0:	2b11      	cmp	r3, #17
 80089a2:	d1ef      	bne.n	8008984 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	58024800 	.word	0x58024800

080089b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08c      	sub	sp, #48	; 0x30
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e37a      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 8087 	beq.w	8008ae2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089d4:	4ba0      	ldr	r3, [pc, #640]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089de:	4b9e      	ldr	r3, [pc, #632]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80089e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e6:	2b10      	cmp	r3, #16
 80089e8:	d007      	beq.n	80089fa <HAL_RCC_OscConfig+0x46>
 80089ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ec:	2b18      	cmp	r3, #24
 80089ee:	d110      	bne.n	8008a12 <HAL_RCC_OscConfig+0x5e>
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d10b      	bne.n	8008a12 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089fa:	4b97      	ldr	r3, [pc, #604]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d06c      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x12c>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d168      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e354      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a1a:	d106      	bne.n	8008a2a <HAL_RCC_OscConfig+0x76>
 8008a1c:	4b8e      	ldr	r3, [pc, #568]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a8d      	ldr	r2, [pc, #564]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	e02e      	b.n	8008a88 <HAL_RCC_OscConfig+0xd4>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10c      	bne.n	8008a4c <HAL_RCC_OscConfig+0x98>
 8008a32:	4b89      	ldr	r3, [pc, #548]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a88      	ldr	r2, [pc, #544]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	4b86      	ldr	r3, [pc, #536]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a85      	ldr	r2, [pc, #532]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	e01d      	b.n	8008a88 <HAL_RCC_OscConfig+0xd4>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a54:	d10c      	bne.n	8008a70 <HAL_RCC_OscConfig+0xbc>
 8008a56:	4b80      	ldr	r3, [pc, #512]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a7f      	ldr	r2, [pc, #508]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	4b7d      	ldr	r3, [pc, #500]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a7c      	ldr	r2, [pc, #496]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	e00b      	b.n	8008a88 <HAL_RCC_OscConfig+0xd4>
 8008a70:	4b79      	ldr	r3, [pc, #484]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a78      	ldr	r2, [pc, #480]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	4b76      	ldr	r3, [pc, #472]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a75      	ldr	r2, [pc, #468]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d013      	beq.n	8008ab8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a90:	f7f9 fb96 	bl	80021c0 <HAL_GetTick>
 8008a94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a96:	e008      	b.n	8008aaa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a98:	f7f9 fb92 	bl	80021c0 <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	2b64      	cmp	r3, #100	; 0x64
 8008aa4:	d901      	bls.n	8008aaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e308      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008aaa:	4b6b      	ldr	r3, [pc, #428]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d0f0      	beq.n	8008a98 <HAL_RCC_OscConfig+0xe4>
 8008ab6:	e014      	b.n	8008ae2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab8:	f7f9 fb82 	bl	80021c0 <HAL_GetTick>
 8008abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ac0:	f7f9 fb7e 	bl	80021c0 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b64      	cmp	r3, #100	; 0x64
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e2f4      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ad2:	4b61      	ldr	r3, [pc, #388]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1f0      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x10c>
 8008ade:	e000      	b.n	8008ae2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d06d      	beq.n	8008bca <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008aee:	4b5a      	ldr	r3, [pc, #360]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008af6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008af8:	4b57      	ldr	r3, [pc, #348]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d007      	beq.n	8008b14 <HAL_RCC_OscConfig+0x160>
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	2b18      	cmp	r3, #24
 8008b08:	d11b      	bne.n	8008b42 <HAL_RCC_OscConfig+0x18e>
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	f003 0303 	and.w	r3, r3, #3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d116      	bne.n	8008b42 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b14:	4b50      	ldr	r3, [pc, #320]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d005      	beq.n	8008b2c <HAL_RCC_OscConfig+0x178>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e2c7      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b2c:	4b4a      	ldr	r3, [pc, #296]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	061b      	lsls	r3, r3, #24
 8008b3a:	4947      	ldr	r1, [pc, #284]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b40:	e043      	b.n	8008bca <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d026      	beq.n	8008b98 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008b4a:	4b43      	ldr	r3, [pc, #268]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f023 0219 	bic.w	r2, r3, #25
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	4940      	ldr	r1, [pc, #256]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b5c:	f7f9 fb30 	bl	80021c0 <HAL_GetTick>
 8008b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b62:	e008      	b.n	8008b76 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b64:	f7f9 fb2c 	bl	80021c0 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d901      	bls.n	8008b76 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e2a2      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b76:	4b38      	ldr	r3, [pc, #224]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0304 	and.w	r3, r3, #4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0f0      	beq.n	8008b64 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b82:	4b35      	ldr	r3, [pc, #212]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	061b      	lsls	r3, r3, #24
 8008b90:	4931      	ldr	r1, [pc, #196]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	604b      	str	r3, [r1, #4]
 8008b96:	e018      	b.n	8008bca <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b98:	4b2f      	ldr	r3, [pc, #188]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a2e      	ldr	r2, [pc, #184]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008b9e:	f023 0301 	bic.w	r3, r3, #1
 8008ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba4:	f7f9 fb0c 	bl	80021c0 <HAL_GetTick>
 8008ba8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008baa:	e008      	b.n	8008bbe <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bac:	f7f9 fb08 	bl	80021c0 <HAL_GetTick>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e27e      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008bbe:	4b26      	ldr	r3, [pc, #152]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0304 	and.w	r3, r3, #4
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1f0      	bne.n	8008bac <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0310 	and.w	r3, r3, #16
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d06c      	beq.n	8008cb0 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bd6:	4b20      	ldr	r3, [pc, #128]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bde:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008be0:	4b1d      	ldr	r3, [pc, #116]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	2b08      	cmp	r3, #8
 8008bea:	d007      	beq.n	8008bfc <HAL_RCC_OscConfig+0x248>
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	2b18      	cmp	r3, #24
 8008bf0:	d11b      	bne.n	8008c2a <HAL_RCC_OscConfig+0x276>
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f003 0303 	and.w	r3, r3, #3
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d116      	bne.n	8008c2a <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bfc:	4b16      	ldr	r3, [pc, #88]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d005      	beq.n	8008c14 <HAL_RCC_OscConfig+0x260>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	2b80      	cmp	r3, #128	; 0x80
 8008c0e:	d001      	beq.n	8008c14 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e253      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c14:	4b10      	ldr	r3, [pc, #64]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	061b      	lsls	r3, r3, #24
 8008c22:	490d      	ldr	r1, [pc, #52]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008c28:	e042      	b.n	8008cb0 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	69db      	ldr	r3, [r3, #28]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d025      	beq.n	8008c7e <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008c32:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a08      	ldr	r2, [pc, #32]	; (8008c58 <HAL_RCC_OscConfig+0x2a4>)
 8008c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c3e:	f7f9 fabf 	bl	80021c0 <HAL_GetTick>
 8008c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c44:	e00a      	b.n	8008c5c <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008c46:	f7f9 fabb 	bl	80021c0 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d903      	bls.n	8008c5c <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e231      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
 8008c58:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c5c:	4ba3      	ldr	r3, [pc, #652]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d0ee      	beq.n	8008c46 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c68:	4ba0      	ldr	r3, [pc, #640]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	061b      	lsls	r3, r3, #24
 8008c76:	499d      	ldr	r1, [pc, #628]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60cb      	str	r3, [r1, #12]
 8008c7c:	e018      	b.n	8008cb0 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c7e:	4b9b      	ldr	r3, [pc, #620]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a9a      	ldr	r2, [pc, #616]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008c84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c8a:	f7f9 fa99 	bl	80021c0 <HAL_GetTick>
 8008c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c90:	e008      	b.n	8008ca4 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008c92:	f7f9 fa95 	bl	80021c0 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e20b      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ca4:	4b91      	ldr	r3, [pc, #580]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1f0      	bne.n	8008c92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0308 	and.w	r3, r3, #8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d036      	beq.n	8008d2a <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d019      	beq.n	8008cf8 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cc4:	4b89      	ldr	r3, [pc, #548]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cc8:	4a88      	ldr	r2, [pc, #544]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008cca:	f043 0301 	orr.w	r3, r3, #1
 8008cce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cd0:	f7f9 fa76 	bl	80021c0 <HAL_GetTick>
 8008cd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cd6:	e008      	b.n	8008cea <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cd8:	f7f9 fa72 	bl	80021c0 <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d901      	bls.n	8008cea <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e1e8      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cea:	4b80      	ldr	r3, [pc, #512]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cee:	f003 0302 	and.w	r3, r3, #2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0f0      	beq.n	8008cd8 <HAL_RCC_OscConfig+0x324>
 8008cf6:	e018      	b.n	8008d2a <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cf8:	4b7c      	ldr	r3, [pc, #496]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cfc:	4a7b      	ldr	r2, [pc, #492]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008cfe:	f023 0301 	bic.w	r3, r3, #1
 8008d02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d04:	f7f9 fa5c 	bl	80021c0 <HAL_GetTick>
 8008d08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008d0a:	e008      	b.n	8008d1e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d0c:	f7f9 fa58 	bl	80021c0 <HAL_GetTick>
 8008d10:	4602      	mov	r2, r0
 8008d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d901      	bls.n	8008d1e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e1ce      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008d1e:	4b73      	ldr	r3, [pc, #460]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d22:	f003 0302 	and.w	r3, r3, #2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1f0      	bne.n	8008d0c <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d036      	beq.n	8008da4 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d019      	beq.n	8008d72 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d3e:	4b6b      	ldr	r3, [pc, #428]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a6a      	ldr	r2, [pc, #424]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008d44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d4a:	f7f9 fa39 	bl	80021c0 <HAL_GetTick>
 8008d4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d50:	e008      	b.n	8008d64 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008d52:	f7f9 fa35 	bl	80021c0 <HAL_GetTick>
 8008d56:	4602      	mov	r2, r0
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d901      	bls.n	8008d64 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e1ab      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d64:	4b61      	ldr	r3, [pc, #388]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0f0      	beq.n	8008d52 <HAL_RCC_OscConfig+0x39e>
 8008d70:	e018      	b.n	8008da4 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d72:	4b5e      	ldr	r3, [pc, #376]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a5d      	ldr	r2, [pc, #372]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d7e:	f7f9 fa1f 	bl	80021c0 <HAL_GetTick>
 8008d82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d84:	e008      	b.n	8008d98 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008d86:	f7f9 fa1b 	bl	80021c0 <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d901      	bls.n	8008d98 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e191      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d98:	4b54      	ldr	r3, [pc, #336]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1f0      	bne.n	8008d86 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 8081 	beq.w	8008eb4 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008db2:	4b4f      	ldr	r3, [pc, #316]	; (8008ef0 <HAL_RCC_OscConfig+0x53c>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a4e      	ldr	r2, [pc, #312]	; (8008ef0 <HAL_RCC_OscConfig+0x53c>)
 8008db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008dbe:	f7f9 f9ff 	bl	80021c0 <HAL_GetTick>
 8008dc2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dc4:	e008      	b.n	8008dd8 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008dc6:	f7f9 f9fb 	bl	80021c0 <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	2b64      	cmp	r3, #100	; 0x64
 8008dd2:	d901      	bls.n	8008dd8 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e171      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dd8:	4b45      	ldr	r3, [pc, #276]	; (8008ef0 <HAL_RCC_OscConfig+0x53c>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d0f0      	beq.n	8008dc6 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d106      	bne.n	8008dfa <HAL_RCC_OscConfig+0x446>
 8008dec:	4b3f      	ldr	r3, [pc, #252]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df0:	4a3e      	ldr	r2, [pc, #248]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008df2:	f043 0301 	orr.w	r3, r3, #1
 8008df6:	6713      	str	r3, [r2, #112]	; 0x70
 8008df8:	e02d      	b.n	8008e56 <HAL_RCC_OscConfig+0x4a2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10c      	bne.n	8008e1c <HAL_RCC_OscConfig+0x468>
 8008e02:	4b3a      	ldr	r3, [pc, #232]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e06:	4a39      	ldr	r2, [pc, #228]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008e08:	f023 0301 	bic.w	r3, r3, #1
 8008e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8008e0e:	4b37      	ldr	r3, [pc, #220]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e12:	4a36      	ldr	r2, [pc, #216]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008e14:	f023 0304 	bic.w	r3, r3, #4
 8008e18:	6713      	str	r3, [r2, #112]	; 0x70
 8008e1a:	e01c      	b.n	8008e56 <HAL_RCC_OscConfig+0x4a2>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	2b05      	cmp	r3, #5
 8008e22:	d10c      	bne.n	8008e3e <HAL_RCC_OscConfig+0x48a>
 8008e24:	4b31      	ldr	r3, [pc, #196]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e28:	4a30      	ldr	r2, [pc, #192]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008e2a:	f043 0304 	orr.w	r3, r3, #4
 8008e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e30:	4b2e      	ldr	r3, [pc, #184]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e34:	4a2d      	ldr	r2, [pc, #180]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008e36:	f043 0301 	orr.w	r3, r3, #1
 8008e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e3c:	e00b      	b.n	8008e56 <HAL_RCC_OscConfig+0x4a2>
 8008e3e:	4b2b      	ldr	r3, [pc, #172]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e42:	4a2a      	ldr	r2, [pc, #168]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008e44:	f023 0301 	bic.w	r3, r3, #1
 8008e48:	6713      	str	r3, [r2, #112]	; 0x70
 8008e4a:	4b28      	ldr	r3, [pc, #160]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e4e:	4a27      	ldr	r2, [pc, #156]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008e50:	f023 0304 	bic.w	r3, r3, #4
 8008e54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d015      	beq.n	8008e8a <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e5e:	f7f9 f9af 	bl	80021c0 <HAL_GetTick>
 8008e62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e64:	e00a      	b.n	8008e7c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e66:	f7f9 f9ab 	bl	80021c0 <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d901      	bls.n	8008e7c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e11f      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e7c:	4b1b      	ldr	r3, [pc, #108]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e80:	f003 0302 	and.w	r3, r3, #2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d0ee      	beq.n	8008e66 <HAL_RCC_OscConfig+0x4b2>
 8008e88:	e014      	b.n	8008eb4 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e8a:	f7f9 f999 	bl	80021c0 <HAL_GetTick>
 8008e8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e90:	e00a      	b.n	8008ea8 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e92:	f7f9 f995 	bl	80021c0 <HAL_GetTick>
 8008e96:	4602      	mov	r2, r0
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d901      	bls.n	8008ea8 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e109      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ea8:	4b10      	ldr	r3, [pc, #64]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eac:	f003 0302 	and.w	r3, r3, #2
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1ee      	bne.n	8008e92 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 80fe 	beq.w	80090ba <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008ebe:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ec6:	2b18      	cmp	r3, #24
 8008ec8:	f000 80b9 	beq.w	800903e <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	f040 809a 	bne.w	800900a <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ed6:	4b05      	ldr	r3, [pc, #20]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a04      	ldr	r2, [pc, #16]	; (8008eec <HAL_RCC_OscConfig+0x538>)
 8008edc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee2:	f7f9 f96d 	bl	80021c0 <HAL_GetTick>
 8008ee6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ee8:	e00d      	b.n	8008f06 <HAL_RCC_OscConfig+0x552>
 8008eea:	bf00      	nop
 8008eec:	58024400 	.word	0x58024400
 8008ef0:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ef4:	f7f9 f964 	bl	80021c0 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d901      	bls.n	8008f06 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e0da      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f06:	4b6f      	ldr	r3, [pc, #444]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1f0      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f12:	4b6c      	ldr	r3, [pc, #432]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f16:	4b6c      	ldr	r3, [pc, #432]	; (80090c8 <HAL_RCC_OscConfig+0x714>)
 8008f18:	4013      	ands	r3, r2
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008f22:	0112      	lsls	r2, r2, #4
 8008f24:	430a      	orrs	r2, r1
 8008f26:	4967      	ldr	r1, [pc, #412]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	628b      	str	r3, [r1, #40]	; 0x28
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f30:	3b01      	subs	r3, #1
 8008f32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	025b      	lsls	r3, r3, #9
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	3b01      	subs	r3, #1
 8008f48:	041b      	lsls	r3, r3, #16
 8008f4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f54:	3b01      	subs	r3, #1
 8008f56:	061b      	lsls	r3, r3, #24
 8008f58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f5c:	4959      	ldr	r1, [pc, #356]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008f62:	4b58      	ldr	r3, [pc, #352]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f66:	4a57      	ldr	r2, [pc, #348]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008f68:	f023 0301 	bic.w	r3, r3, #1
 8008f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f6e:	4b55      	ldr	r3, [pc, #340]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f72:	4b56      	ldr	r3, [pc, #344]	; (80090cc <HAL_RCC_OscConfig+0x718>)
 8008f74:	4013      	ands	r3, r2
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f7a:	00d2      	lsls	r2, r2, #3
 8008f7c:	4951      	ldr	r1, [pc, #324]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f82:	4b50      	ldr	r3, [pc, #320]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	f023 020c 	bic.w	r2, r3, #12
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	494d      	ldr	r1, [pc, #308]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f94:	4b4b      	ldr	r3, [pc, #300]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	f023 0202 	bic.w	r2, r3, #2
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa0:	4948      	ldr	r1, [pc, #288]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008fa6:	4b47      	ldr	r3, [pc, #284]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	4a46      	ldr	r2, [pc, #280]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fb2:	4b44      	ldr	r3, [pc, #272]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb6:	4a43      	ldr	r2, [pc, #268]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008fbe:	4b41      	ldr	r3, [pc, #260]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	4a40      	ldr	r2, [pc, #256]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008fca:	4b3e      	ldr	r3, [pc, #248]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fce:	4a3d      	ldr	r2, [pc, #244]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008fd0:	f043 0301 	orr.w	r3, r3, #1
 8008fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fd6:	4b3b      	ldr	r3, [pc, #236]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a3a      	ldr	r2, [pc, #232]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008fdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe2:	f7f9 f8ed 	bl	80021c0 <HAL_GetTick>
 8008fe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fe8:	e008      	b.n	8008ffc <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fea:	f7f9 f8e9 	bl	80021c0 <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d901      	bls.n	8008ffc <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e05f      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ffc:	4b31      	ldr	r3, [pc, #196]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0f0      	beq.n	8008fea <HAL_RCC_OscConfig+0x636>
 8009008:	e057      	b.n	80090ba <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800900a:	4b2e      	ldr	r3, [pc, #184]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a2d      	ldr	r2, [pc, #180]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8009010:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009016:	f7f9 f8d3 	bl	80021c0 <HAL_GetTick>
 800901a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800901c:	e008      	b.n	8009030 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800901e:	f7f9 f8cf 	bl	80021c0 <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	2b02      	cmp	r3, #2
 800902a:	d901      	bls.n	8009030 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e045      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009030:	4b24      	ldr	r3, [pc, #144]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1f0      	bne.n	800901e <HAL_RCC_OscConfig+0x66a>
 800903c:	e03d      	b.n	80090ba <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800903e:	4b21      	ldr	r3, [pc, #132]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8009040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009042:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009044:	4b1f      	ldr	r3, [pc, #124]	; (80090c4 <HAL_RCC_OscConfig+0x710>)
 8009046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009048:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	2b01      	cmp	r3, #1
 8009050:	d031      	beq.n	80090b6 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f003 0203 	and.w	r2, r3, #3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800905c:	429a      	cmp	r2, r3
 800905e:	d12a      	bne.n	80090b6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	091b      	lsrs	r3, r3, #4
 8009064:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800906c:	429a      	cmp	r2, r3
 800906e:	d122      	bne.n	80090b6 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800907c:	429a      	cmp	r2, r3
 800907e:	d11a      	bne.n	80090b6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	0a5b      	lsrs	r3, r3, #9
 8009084:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800908e:	429a      	cmp	r2, r3
 8009090:	d111      	bne.n	80090b6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	0c1b      	lsrs	r3, r3, #16
 8009096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d108      	bne.n	80090b6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	0e1b      	lsrs	r3, r3, #24
 80090a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d001      	beq.n	80090ba <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e000      	b.n	80090bc <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3730      	adds	r7, #48	; 0x30
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	58024400 	.word	0x58024400
 80090c8:	fffffc0c 	.word	0xfffffc0c
 80090cc:	ffff0007 	.word	0xffff0007

080090d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e19c      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090e4:	4b8a      	ldr	r3, [pc, #552]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 030f 	and.w	r3, r3, #15
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d910      	bls.n	8009114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090f2:	4b87      	ldr	r3, [pc, #540]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f023 020f 	bic.w	r2, r3, #15
 80090fa:	4985      	ldr	r1, [pc, #532]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	4313      	orrs	r3, r2
 8009100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009102:	4b83      	ldr	r3, [pc, #524]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 030f 	and.w	r3, r3, #15
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d001      	beq.n	8009114 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e184      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b00      	cmp	r3, #0
 800911e:	d010      	beq.n	8009142 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	691a      	ldr	r2, [r3, #16]
 8009124:	4b7b      	ldr	r3, [pc, #492]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800912c:	429a      	cmp	r2, r3
 800912e:	d908      	bls.n	8009142 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009130:	4b78      	ldr	r3, [pc, #480]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	4975      	ldr	r1, [pc, #468]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 800913e:	4313      	orrs	r3, r2
 8009140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0308 	and.w	r3, r3, #8
 800914a:	2b00      	cmp	r3, #0
 800914c:	d010      	beq.n	8009170 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	695a      	ldr	r2, [r3, #20]
 8009152:	4b70      	ldr	r3, [pc, #448]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800915a:	429a      	cmp	r2, r3
 800915c:	d908      	bls.n	8009170 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800915e:	4b6d      	ldr	r3, [pc, #436]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	496a      	ldr	r1, [pc, #424]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 800916c:	4313      	orrs	r3, r2
 800916e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	2b00      	cmp	r3, #0
 800917a:	d010      	beq.n	800919e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	699a      	ldr	r2, [r3, #24]
 8009180:	4b64      	ldr	r3, [pc, #400]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009188:	429a      	cmp	r2, r3
 800918a:	d908      	bls.n	800919e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800918c:	4b61      	ldr	r3, [pc, #388]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	495e      	ldr	r1, [pc, #376]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 800919a:	4313      	orrs	r3, r2
 800919c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d010      	beq.n	80091cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	69da      	ldr	r2, [r3, #28]
 80091ae:	4b59      	ldr	r3, [pc, #356]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d908      	bls.n	80091cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80091ba:	4b56      	ldr	r3, [pc, #344]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	4953      	ldr	r1, [pc, #332]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d010      	beq.n	80091fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68da      	ldr	r2, [r3, #12]
 80091dc:	4b4d      	ldr	r3, [pc, #308]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	f003 030f 	and.w	r3, r3, #15
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d908      	bls.n	80091fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091e8:	4b4a      	ldr	r3, [pc, #296]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	f023 020f 	bic.w	r2, r3, #15
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	4947      	ldr	r1, [pc, #284]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d055      	beq.n	80092b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009206:	4b43      	ldr	r3, [pc, #268]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	4940      	ldr	r1, [pc, #256]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009214:	4313      	orrs	r3, r2
 8009216:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	2b02      	cmp	r3, #2
 800921e:	d107      	bne.n	8009230 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009220:	4b3c      	ldr	r3, [pc, #240]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d121      	bne.n	8009270 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e0f6      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	2b03      	cmp	r3, #3
 8009236:	d107      	bne.n	8009248 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009238:	4b36      	ldr	r3, [pc, #216]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d115      	bne.n	8009270 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e0ea      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d107      	bne.n	8009260 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009250:	4b30      	ldr	r3, [pc, #192]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009258:	2b00      	cmp	r3, #0
 800925a:	d109      	bne.n	8009270 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e0de      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009260:	4b2c      	ldr	r3, [pc, #176]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0304 	and.w	r3, r3, #4
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e0d6      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009270:	4b28      	ldr	r3, [pc, #160]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	f023 0207 	bic.w	r2, r3, #7
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	4925      	ldr	r1, [pc, #148]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 800927e:	4313      	orrs	r3, r2
 8009280:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009282:	f7f8 ff9d 	bl	80021c0 <HAL_GetTick>
 8009286:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009288:	e00a      	b.n	80092a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800928a:	f7f8 ff99 	bl	80021c0 <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	f241 3288 	movw	r2, #5000	; 0x1388
 8009298:	4293      	cmp	r3, r2
 800929a:	d901      	bls.n	80092a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e0be      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092a0:	4b1c      	ldr	r3, [pc, #112]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d1eb      	bne.n	800928a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0302 	and.w	r3, r3, #2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d010      	beq.n	80092e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	4b14      	ldr	r3, [pc, #80]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	f003 030f 	and.w	r3, r3, #15
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d208      	bcs.n	80092e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092ce:	4b11      	ldr	r3, [pc, #68]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	f023 020f 	bic.w	r2, r3, #15
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	490e      	ldr	r1, [pc, #56]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80092dc:	4313      	orrs	r3, r2
 80092de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80092e0:	4b0b      	ldr	r3, [pc, #44]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 030f 	and.w	r3, r3, #15
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d214      	bcs.n	8009318 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092ee:	4b08      	ldr	r3, [pc, #32]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f023 020f 	bic.w	r2, r3, #15
 80092f6:	4906      	ldr	r1, [pc, #24]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092fe:	4b04      	ldr	r3, [pc, #16]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	429a      	cmp	r2, r3
 800930a:	d005      	beq.n	8009318 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e086      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
 8009310:	52002000 	.word	0x52002000
 8009314:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d010      	beq.n	8009346 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	691a      	ldr	r2, [r3, #16]
 8009328:	4b3f      	ldr	r3, [pc, #252]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009330:	429a      	cmp	r2, r3
 8009332:	d208      	bcs.n	8009346 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009334:	4b3c      	ldr	r3, [pc, #240]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	4939      	ldr	r1, [pc, #228]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009342:	4313      	orrs	r3, r2
 8009344:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 0308 	and.w	r3, r3, #8
 800934e:	2b00      	cmp	r3, #0
 8009350:	d010      	beq.n	8009374 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	695a      	ldr	r2, [r3, #20]
 8009356:	4b34      	ldr	r3, [pc, #208]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800935e:	429a      	cmp	r2, r3
 8009360:	d208      	bcs.n	8009374 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009362:	4b31      	ldr	r3, [pc, #196]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	492e      	ldr	r1, [pc, #184]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009370:	4313      	orrs	r3, r2
 8009372:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0310 	and.w	r3, r3, #16
 800937c:	2b00      	cmp	r3, #0
 800937e:	d010      	beq.n	80093a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	699a      	ldr	r2, [r3, #24]
 8009384:	4b28      	ldr	r3, [pc, #160]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800938c:	429a      	cmp	r2, r3
 800938e:	d208      	bcs.n	80093a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009390:	4b25      	ldr	r3, [pc, #148]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009392:	69db      	ldr	r3, [r3, #28]
 8009394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	4922      	ldr	r1, [pc, #136]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 0320 	and.w	r3, r3, #32
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d010      	beq.n	80093d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	69da      	ldr	r2, [r3, #28]
 80093b2:	4b1d      	ldr	r3, [pc, #116]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d208      	bcs.n	80093d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80093be:	4b1a      	ldr	r3, [pc, #104]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	4917      	ldr	r1, [pc, #92]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80093d0:	f000 f834 	bl	800943c <HAL_RCC_GetSysClockFreq>
 80093d4:	4602      	mov	r2, r0
 80093d6:	4b14      	ldr	r3, [pc, #80]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	0a1b      	lsrs	r3, r3, #8
 80093dc:	f003 030f 	and.w	r3, r3, #15
 80093e0:	4912      	ldr	r1, [pc, #72]	; (800942c <HAL_RCC_ClockConfig+0x35c>)
 80093e2:	5ccb      	ldrb	r3, [r1, r3]
 80093e4:	f003 031f 	and.w	r3, r3, #31
 80093e8:	fa22 f303 	lsr.w	r3, r2, r3
 80093ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093ee:	4b0e      	ldr	r3, [pc, #56]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	f003 030f 	and.w	r3, r3, #15
 80093f6:	4a0d      	ldr	r2, [pc, #52]	; (800942c <HAL_RCC_ClockConfig+0x35c>)
 80093f8:	5cd3      	ldrb	r3, [r2, r3]
 80093fa:	f003 031f 	and.w	r3, r3, #31
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	fa22 f303 	lsr.w	r3, r2, r3
 8009404:	4a0a      	ldr	r2, [pc, #40]	; (8009430 <HAL_RCC_ClockConfig+0x360>)
 8009406:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009408:	4a0a      	ldr	r2, [pc, #40]	; (8009434 <HAL_RCC_ClockConfig+0x364>)
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800940e:	4b0a      	ldr	r3, [pc, #40]	; (8009438 <HAL_RCC_ClockConfig+0x368>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4618      	mov	r0, r3
 8009414:	f7f8 fe8a 	bl	800212c <HAL_InitTick>
 8009418:	4603      	mov	r3, r0
 800941a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800941c:	7bfb      	ldrb	r3, [r7, #15]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	58024400 	.word	0x58024400
 800942c:	0800e888 	.word	0x0800e888
 8009430:	20000030 	.word	0x20000030
 8009434:	2000002c 	.word	0x2000002c
 8009438:	20000034 	.word	0x20000034

0800943c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800943c:	b480      	push	{r7}
 800943e:	b089      	sub	sp, #36	; 0x24
 8009440:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009442:	4bb3      	ldr	r3, [pc, #716]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800944a:	2b18      	cmp	r3, #24
 800944c:	f200 8155 	bhi.w	80096fa <HAL_RCC_GetSysClockFreq+0x2be>
 8009450:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009456:	bf00      	nop
 8009458:	080094bd 	.word	0x080094bd
 800945c:	080096fb 	.word	0x080096fb
 8009460:	080096fb 	.word	0x080096fb
 8009464:	080096fb 	.word	0x080096fb
 8009468:	080096fb 	.word	0x080096fb
 800946c:	080096fb 	.word	0x080096fb
 8009470:	080096fb 	.word	0x080096fb
 8009474:	080096fb 	.word	0x080096fb
 8009478:	080094e3 	.word	0x080094e3
 800947c:	080096fb 	.word	0x080096fb
 8009480:	080096fb 	.word	0x080096fb
 8009484:	080096fb 	.word	0x080096fb
 8009488:	080096fb 	.word	0x080096fb
 800948c:	080096fb 	.word	0x080096fb
 8009490:	080096fb 	.word	0x080096fb
 8009494:	080096fb 	.word	0x080096fb
 8009498:	080094e9 	.word	0x080094e9
 800949c:	080096fb 	.word	0x080096fb
 80094a0:	080096fb 	.word	0x080096fb
 80094a4:	080096fb 	.word	0x080096fb
 80094a8:	080096fb 	.word	0x080096fb
 80094ac:	080096fb 	.word	0x080096fb
 80094b0:	080096fb 	.word	0x080096fb
 80094b4:	080096fb 	.word	0x080096fb
 80094b8:	080094ef 	.word	0x080094ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094bc:	4b94      	ldr	r3, [pc, #592]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0320 	and.w	r3, r3, #32
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d009      	beq.n	80094dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094c8:	4b91      	ldr	r3, [pc, #580]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	08db      	lsrs	r3, r3, #3
 80094ce:	f003 0303 	and.w	r3, r3, #3
 80094d2:	4a90      	ldr	r2, [pc, #576]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094d4:	fa22 f303 	lsr.w	r3, r2, r3
 80094d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80094da:	e111      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094dc:	4b8d      	ldr	r3, [pc, #564]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094de:	61bb      	str	r3, [r7, #24]
    break;
 80094e0:	e10e      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80094e2:	4b8d      	ldr	r3, [pc, #564]	; (8009718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094e4:	61bb      	str	r3, [r7, #24]
    break;
 80094e6:	e10b      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80094e8:	4b8c      	ldr	r3, [pc, #560]	; (800971c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80094ea:	61bb      	str	r3, [r7, #24]
    break;
 80094ec:	e108      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094ee:	4b88      	ldr	r3, [pc, #544]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80094f8:	4b85      	ldr	r3, [pc, #532]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fc:	091b      	lsrs	r3, r3, #4
 80094fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009502:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009504:	4b82      	ldr	r3, [pc, #520]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800950e:	4b80      	ldr	r3, [pc, #512]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009512:	08db      	lsrs	r3, r3, #3
 8009514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	fb02 f303 	mul.w	r3, r2, r3
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009526:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 80e1 	beq.w	80096f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2b02      	cmp	r3, #2
 8009536:	f000 8083 	beq.w	8009640 <HAL_RCC_GetSysClockFreq+0x204>
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2b02      	cmp	r3, #2
 800953e:	f200 80a1 	bhi.w	8009684 <HAL_RCC_GetSysClockFreq+0x248>
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d003      	beq.n	8009550 <HAL_RCC_GetSysClockFreq+0x114>
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d056      	beq.n	80095fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800954e:	e099      	b.n	8009684 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009550:	4b6f      	ldr	r3, [pc, #444]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0320 	and.w	r3, r3, #32
 8009558:	2b00      	cmp	r3, #0
 800955a:	d02d      	beq.n	80095b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800955c:	4b6c      	ldr	r3, [pc, #432]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	08db      	lsrs	r3, r3, #3
 8009562:	f003 0303 	and.w	r3, r3, #3
 8009566:	4a6b      	ldr	r2, [pc, #428]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009568:	fa22 f303 	lsr.w	r3, r2, r3
 800956c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	ee07 3a90 	vmov	s15, r3
 8009574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009586:	4b62      	ldr	r3, [pc, #392]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009596:	ed97 6a02 	vldr	s12, [r7, #8]
 800959a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800959e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80095b6:	e087      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	ee07 3a90 	vmov	s15, r3
 80095be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009724 <HAL_RCC_GetSysClockFreq+0x2e8>
 80095c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ca:	4b51      	ldr	r3, [pc, #324]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095da:	ed97 6a02 	vldr	s12, [r7, #8]
 80095de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095fa:	e065      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009606:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009728 <HAL_RCC_GetSysClockFreq+0x2ec>
 800960a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800960e:	4b40      	ldr	r3, [pc, #256]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009622:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009720 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800962a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800963a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800963e:	e043      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800972c <HAL_RCC_GetSysClockFreq+0x2f0>
 800964e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009652:	4b2f      	ldr	r3, [pc, #188]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009662:	ed97 6a02 	vldr	s12, [r7, #8]
 8009666:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800966a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800966e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800967a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009682:	e021      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009728 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009696:	4b1e      	ldr	r3, [pc, #120]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80096aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80096c8:	4b11      	ldr	r3, [pc, #68]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096cc:	0a5b      	lsrs	r3, r3, #9
 80096ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d2:	3301      	adds	r3, #1
 80096d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	ee07 3a90 	vmov	s15, r3
 80096dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80096e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ec:	ee17 3a90 	vmov	r3, s15
 80096f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80096f2:	e005      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80096f4:	2300      	movs	r3, #0
 80096f6:	61bb      	str	r3, [r7, #24]
    break;
 80096f8:	e002      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80096fa:	4b07      	ldr	r3, [pc, #28]	; (8009718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80096fc:	61bb      	str	r3, [r7, #24]
    break;
 80096fe:	bf00      	nop
  }

  return sysclockfreq;
 8009700:	69bb      	ldr	r3, [r7, #24]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3724      	adds	r7, #36	; 0x24
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	58024400 	.word	0x58024400
 8009714:	03d09000 	.word	0x03d09000
 8009718:	003d0900 	.word	0x003d0900
 800971c:	017d7840 	.word	0x017d7840
 8009720:	46000000 	.word	0x46000000
 8009724:	4c742400 	.word	0x4c742400
 8009728:	4a742400 	.word	0x4a742400
 800972c:	4bbebc20 	.word	0x4bbebc20

08009730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009736:	f7ff fe81 	bl	800943c <HAL_RCC_GetSysClockFreq>
 800973a:	4602      	mov	r2, r0
 800973c:	4b10      	ldr	r3, [pc, #64]	; (8009780 <HAL_RCC_GetHCLKFreq+0x50>)
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	0a1b      	lsrs	r3, r3, #8
 8009742:	f003 030f 	and.w	r3, r3, #15
 8009746:	490f      	ldr	r1, [pc, #60]	; (8009784 <HAL_RCC_GetHCLKFreq+0x54>)
 8009748:	5ccb      	ldrb	r3, [r1, r3]
 800974a:	f003 031f 	and.w	r3, r3, #31
 800974e:	fa22 f303 	lsr.w	r3, r2, r3
 8009752:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009754:	4b0a      	ldr	r3, [pc, #40]	; (8009780 <HAL_RCC_GetHCLKFreq+0x50>)
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	f003 030f 	and.w	r3, r3, #15
 800975c:	4a09      	ldr	r2, [pc, #36]	; (8009784 <HAL_RCC_GetHCLKFreq+0x54>)
 800975e:	5cd3      	ldrb	r3, [r2, r3]
 8009760:	f003 031f 	and.w	r3, r3, #31
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	fa22 f303 	lsr.w	r3, r2, r3
 800976a:	4a07      	ldr	r2, [pc, #28]	; (8009788 <HAL_RCC_GetHCLKFreq+0x58>)
 800976c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800976e:	4a07      	ldr	r2, [pc, #28]	; (800978c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009774:	4b04      	ldr	r3, [pc, #16]	; (8009788 <HAL_RCC_GetHCLKFreq+0x58>)
 8009776:	681b      	ldr	r3, [r3, #0]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	58024400 	.word	0x58024400
 8009784:	0800e888 	.word	0x0800e888
 8009788:	20000030 	.word	0x20000030
 800978c:	2000002c 	.word	0x2000002c

08009790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009794:	f7ff ffcc 	bl	8009730 <HAL_RCC_GetHCLKFreq>
 8009798:	4602      	mov	r2, r0
 800979a:	4b06      	ldr	r3, [pc, #24]	; (80097b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800979c:	69db      	ldr	r3, [r3, #28]
 800979e:	091b      	lsrs	r3, r3, #4
 80097a0:	f003 0307 	and.w	r3, r3, #7
 80097a4:	4904      	ldr	r1, [pc, #16]	; (80097b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80097a6:	5ccb      	ldrb	r3, [r1, r3]
 80097a8:	f003 031f 	and.w	r3, r3, #31
 80097ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	58024400 	.word	0x58024400
 80097b8:	0800e888 	.word	0x0800e888

080097bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80097c0:	f7ff ffb6 	bl	8009730 <HAL_RCC_GetHCLKFreq>
 80097c4:	4602      	mov	r2, r0
 80097c6:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	0a1b      	lsrs	r3, r3, #8
 80097cc:	f003 0307 	and.w	r3, r3, #7
 80097d0:	4904      	ldr	r1, [pc, #16]	; (80097e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80097d2:	5ccb      	ldrb	r3, [r1, r3]
 80097d4:	f003 031f 	and.w	r3, r3, #31
 80097d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097dc:	4618      	mov	r0, r3
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	58024400 	.word	0x58024400
 80097e4:	0800e888 	.word	0x0800e888

080097e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80097f0:	2300      	movs	r3, #0
 80097f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80097f4:	2300      	movs	r3, #0
 80097f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d03f      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009808:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800980c:	d02a      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800980e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009812:	d824      	bhi.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009814:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009818:	d018      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800981a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800981e:	d81e      	bhi.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009820:	2b00      	cmp	r3, #0
 8009822:	d003      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009828:	d007      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800982a:	e018      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800982c:	4bab      	ldr	r3, [pc, #684]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800982e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009830:	4aaa      	ldr	r2, [pc, #680]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009836:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009838:	e015      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	3304      	adds	r3, #4
 800983e:	2102      	movs	r1, #2
 8009840:	4618      	mov	r0, r3
 8009842:	f001 f989 	bl	800ab58 <RCCEx_PLL2_Config>
 8009846:	4603      	mov	r3, r0
 8009848:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800984a:	e00c      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	3324      	adds	r3, #36	; 0x24
 8009850:	2102      	movs	r1, #2
 8009852:	4618      	mov	r0, r3
 8009854:	f001 fa32 	bl	800acbc <RCCEx_PLL3_Config>
 8009858:	4603      	mov	r3, r0
 800985a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800985c:	e003      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	75fb      	strb	r3, [r7, #23]
      break;
 8009862:	e000      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009866:	7dfb      	ldrb	r3, [r7, #23]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d109      	bne.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800986c:	4b9b      	ldr	r3, [pc, #620]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800986e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009878:	4998      	ldr	r1, [pc, #608]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800987a:	4313      	orrs	r3, r2
 800987c:	650b      	str	r3, [r1, #80]	; 0x50
 800987e:	e001      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009880:	7dfb      	ldrb	r3, [r7, #23]
 8009882:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800988c:	2b00      	cmp	r3, #0
 800988e:	d03d      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009894:	2b04      	cmp	r3, #4
 8009896:	d826      	bhi.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009898:	a201      	add	r2, pc, #4	; (adr r2, 80098a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800989a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989e:	bf00      	nop
 80098a0:	080098b5 	.word	0x080098b5
 80098a4:	080098c3 	.word	0x080098c3
 80098a8:	080098d5 	.word	0x080098d5
 80098ac:	080098ed 	.word	0x080098ed
 80098b0:	080098ed 	.word	0x080098ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098b4:	4b89      	ldr	r3, [pc, #548]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	4a88      	ldr	r2, [pc, #544]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098c0:	e015      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3304      	adds	r3, #4
 80098c6:	2100      	movs	r1, #0
 80098c8:	4618      	mov	r0, r3
 80098ca:	f001 f945 	bl	800ab58 <RCCEx_PLL2_Config>
 80098ce:	4603      	mov	r3, r0
 80098d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098d2:	e00c      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3324      	adds	r3, #36	; 0x24
 80098d8:	2100      	movs	r1, #0
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 f9ee 	bl	800acbc <RCCEx_PLL3_Config>
 80098e0:	4603      	mov	r3, r0
 80098e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098e4:	e003      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	75fb      	strb	r3, [r7, #23]
      break;
 80098ea:	e000      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80098ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d109      	bne.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098f4:	4b79      	ldr	r3, [pc, #484]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f8:	f023 0207 	bic.w	r2, r3, #7
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009900:	4976      	ldr	r1, [pc, #472]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009902:	4313      	orrs	r3, r2
 8009904:	650b      	str	r3, [r1, #80]	; 0x50
 8009906:	e001      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009908:	7dfb      	ldrb	r3, [r7, #23]
 800990a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009914:	2b00      	cmp	r3, #0
 8009916:	d051      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800991e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009922:	d036      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009924:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009928:	d830      	bhi.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800992a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800992e:	d032      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009930:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009934:	d82a      	bhi.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009936:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800993a:	d02e      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800993c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009940:	d824      	bhi.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009946:	d018      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800994c:	d81e      	bhi.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009956:	d007      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009958:	e018      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800995a:	4b60      	ldr	r3, [pc, #384]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800995c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995e:	4a5f      	ldr	r2, [pc, #380]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009964:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009966:	e019      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3304      	adds	r3, #4
 800996c:	2100      	movs	r1, #0
 800996e:	4618      	mov	r0, r3
 8009970:	f001 f8f2 	bl	800ab58 <RCCEx_PLL2_Config>
 8009974:	4603      	mov	r3, r0
 8009976:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009978:	e010      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3324      	adds	r3, #36	; 0x24
 800997e:	2100      	movs	r1, #0
 8009980:	4618      	mov	r0, r3
 8009982:	f001 f99b 	bl	800acbc <RCCEx_PLL3_Config>
 8009986:	4603      	mov	r3, r0
 8009988:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800998a:	e007      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	75fb      	strb	r3, [r7, #23]
      break;
 8009990:	e004      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009992:	bf00      	nop
 8009994:	e002      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009996:	bf00      	nop
 8009998:	e000      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800999a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800999c:	7dfb      	ldrb	r3, [r7, #23]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10a      	bne.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80099a2:	4b4e      	ldr	r3, [pc, #312]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099a6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80099b0:	494a      	ldr	r1, [pc, #296]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	658b      	str	r3, [r1, #88]	; 0x58
 80099b6:	e001      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b8:	7dfb      	ldrb	r3, [r7, #23]
 80099ba:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d051      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099ce:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80099d2:	d036      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80099d4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80099d8:	d830      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80099da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099de:	d032      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80099e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099e4:	d82a      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80099e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099ea:	d02e      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80099ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099f0:	d824      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80099f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099f6:	d018      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x242>
 80099f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099fc:	d81e      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009a02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a06:	d007      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009a08:	e018      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a0a:	4b34      	ldr	r3, [pc, #208]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	4a33      	ldr	r2, [pc, #204]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a16:	e019      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f001 f89a 	bl	800ab58 <RCCEx_PLL2_Config>
 8009a24:	4603      	mov	r3, r0
 8009a26:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009a28:	e010      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3324      	adds	r3, #36	; 0x24
 8009a2e:	2100      	movs	r1, #0
 8009a30:	4618      	mov	r0, r3
 8009a32:	f001 f943 	bl	800acbc <RCCEx_PLL3_Config>
 8009a36:	4603      	mov	r3, r0
 8009a38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a3a:	e007      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a40:	e004      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009a42:	bf00      	nop
 8009a44:	e002      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009a46:	bf00      	nop
 8009a48:	e000      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009a52:	4b22      	ldr	r3, [pc, #136]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a56:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a60:	491e      	ldr	r1, [pc, #120]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a62:	4313      	orrs	r3, r2
 8009a64:	658b      	str	r3, [r1, #88]	; 0x58
 8009a66:	e001      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a68:	7dfb      	ldrb	r3, [r7, #23]
 8009a6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d035      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a7c:	2b30      	cmp	r3, #48	; 0x30
 8009a7e:	d01c      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a80:	2b30      	cmp	r3, #48	; 0x30
 8009a82:	d817      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009a84:	2b20      	cmp	r3, #32
 8009a86:	d00c      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009a88:	2b20      	cmp	r3, #32
 8009a8a:	d813      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d016      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8009a90:	2b10      	cmp	r3, #16
 8009a92:	d10f      	bne.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a94:	4b11      	ldr	r3, [pc, #68]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	4a10      	ldr	r2, [pc, #64]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009aa0:	e00e      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	2102      	movs	r1, #2
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f001 f855 	bl	800ab58 <RCCEx_PLL2_Config>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009ab2:	e005      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab8:	e002      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8009aba:	bf00      	nop
 8009abc:	e000      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8009abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10c      	bne.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009ac6:	4b05      	ldr	r3, [pc, #20]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ad2:	4902      	ldr	r1, [pc, #8]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009ad8:	e004      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009ada:	bf00      	nop
 8009adc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae0:	7dfb      	ldrb	r3, [r7, #23]
 8009ae2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d047      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009af8:	d030      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009afe:	d82a      	bhi.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009b00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b04:	d02c      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009b06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b0a:	d824      	bhi.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b10:	d018      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b16:	d81e      	bhi.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b20:	d007      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009b22:	e018      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b24:	4bac      	ldr	r3, [pc, #688]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b28:	4aab      	ldr	r2, [pc, #684]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009b30:	e017      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	3304      	adds	r3, #4
 8009b36:	2100      	movs	r1, #0
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f001 f80d 	bl	800ab58 <RCCEx_PLL2_Config>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009b42:	e00e      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3324      	adds	r3, #36	; 0x24
 8009b48:	2100      	movs	r1, #0
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f001 f8b6 	bl	800acbc <RCCEx_PLL3_Config>
 8009b50:	4603      	mov	r3, r0
 8009b52:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009b54:	e005      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	75fb      	strb	r3, [r7, #23]
      break;
 8009b5a:	e002      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009b5c:	bf00      	nop
 8009b5e:	e000      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b62:	7dfb      	ldrb	r3, [r7, #23]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d109      	bne.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009b68:	4b9b      	ldr	r3, [pc, #620]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b6c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b74:	4998      	ldr	r1, [pc, #608]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	650b      	str	r3, [r1, #80]	; 0x50
 8009b7a:	e001      	b.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
 8009b7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d049      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b94:	d02e      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009b96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b9a:	d828      	bhi.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009b9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ba0:	d02a      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009ba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ba6:	d822      	bhi.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ba8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009bac:	d026      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009bae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009bb2:	d81c      	bhi.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bb8:	d010      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009bba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bbe:	d816      	bhi.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d01d      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bc8:	d111      	bne.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	3304      	adds	r3, #4
 8009bce:	2101      	movs	r1, #1
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 ffc1 	bl	800ab58 <RCCEx_PLL2_Config>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009bda:	e012      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	3324      	adds	r3, #36	; 0x24
 8009be0:	2101      	movs	r1, #1
 8009be2:	4618      	mov	r0, r3
 8009be4:	f001 f86a 	bl	800acbc <RCCEx_PLL3_Config>
 8009be8:	4603      	mov	r3, r0
 8009bea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009bec:	e009      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf2:	e006      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009bf4:	bf00      	nop
 8009bf6:	e004      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009bf8:	bf00      	nop
 8009bfa:	e002      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009bfc:	bf00      	nop
 8009bfe:	e000      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c02:	7dfb      	ldrb	r3, [r7, #23]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d109      	bne.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009c08:	4b73      	ldr	r3, [pc, #460]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c0c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c14:	4970      	ldr	r1, [pc, #448]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009c16:	4313      	orrs	r3, r2
 8009c18:	650b      	str	r3, [r1, #80]	; 0x50
 8009c1a:	e001      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
 8009c1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d04b      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009c32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c36:	d02e      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c3c:	d828      	bhi.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c42:	d02a      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c48:	d822      	bhi.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009c4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c4e:	d026      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009c50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c54:	d81c      	bhi.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c5a:	d010      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c60:	d816      	bhi.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d01d      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c6a:	d111      	bne.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	3304      	adds	r3, #4
 8009c70:	2101      	movs	r1, #1
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 ff70 	bl	800ab58 <RCCEx_PLL2_Config>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009c7c:	e012      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	3324      	adds	r3, #36	; 0x24
 8009c82:	2101      	movs	r1, #1
 8009c84:	4618      	mov	r0, r3
 8009c86:	f001 f819 	bl	800acbc <RCCEx_PLL3_Config>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009c8e:	e009      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	75fb      	strb	r3, [r7, #23]
      break;
 8009c94:	e006      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009c96:	bf00      	nop
 8009c98:	e004      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009c9a:	bf00      	nop
 8009c9c:	e002      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009c9e:	bf00      	nop
 8009ca0:	e000      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009ca2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ca4:	7dfb      	ldrb	r3, [r7, #23]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10a      	bne.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009caa:	4b4b      	ldr	r3, [pc, #300]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009cb8:	4947      	ldr	r1, [pc, #284]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	658b      	str	r3, [r1, #88]	; 0x58
 8009cbe:	e001      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc0:	7dfb      	ldrb	r3, [r7, #23]
 8009cc2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d02f      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cd8:	d00e      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cde:	d814      	bhi.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d015      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ce8:	d10f      	bne.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cea:	4b3b      	ldr	r3, [pc, #236]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cee:	4a3a      	ldr	r2, [pc, #232]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009cf6:	e00c      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 ff2a 	bl	800ab58 <RCCEx_PLL2_Config>
 8009d04:	4603      	mov	r3, r0
 8009d06:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009d08:	e003      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d0e:	e000      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d12:	7dfb      	ldrb	r3, [r7, #23]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d109      	bne.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d18:	4b2f      	ldr	r3, [pc, #188]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d24:	492c      	ldr	r1, [pc, #176]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009d26:	4313      	orrs	r3, r2
 8009d28:	650b      	str	r3, [r1, #80]	; 0x50
 8009d2a:	e001      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d2c:	7dfb      	ldrb	r3, [r7, #23]
 8009d2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d032      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d40:	2b03      	cmp	r3, #3
 8009d42:	d81b      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009d44:	a201      	add	r2, pc, #4	; (adr r2, 8009d4c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4a:	bf00      	nop
 8009d4c:	08009d83 	.word	0x08009d83
 8009d50:	08009d5d 	.word	0x08009d5d
 8009d54:	08009d6b 	.word	0x08009d6b
 8009d58:	08009d83 	.word	0x08009d83
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d5c:	4b1e      	ldr	r3, [pc, #120]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d60:	4a1d      	ldr	r2, [pc, #116]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009d68:	e00c      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	2102      	movs	r1, #2
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 fef1 	bl	800ab58 <RCCEx_PLL2_Config>
 8009d76:	4603      	mov	r3, r0
 8009d78:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009d7a:	e003      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d80:	e000      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d109      	bne.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009d8a:	4b13      	ldr	r3, [pc, #76]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d8e:	f023 0203 	bic.w	r2, r3, #3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d96:	4910      	ldr	r1, [pc, #64]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009d9c:	e001      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d9e:	7dfb      	ldrb	r3, [r7, #23]
 8009da0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f000 808a 	beq.w	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009db0:	4b0a      	ldr	r3, [pc, #40]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a09      	ldr	r2, [pc, #36]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009dbc:	f7f8 fa00 	bl	80021c0 <HAL_GetTick>
 8009dc0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dc2:	e00d      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dc4:	f7f8 f9fc 	bl	80021c0 <HAL_GetTick>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	2b64      	cmp	r3, #100	; 0x64
 8009dd0:	d906      	bls.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	75fb      	strb	r3, [r7, #23]
        break;
 8009dd6:	e009      	b.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009dd8:	58024400 	.word	0x58024400
 8009ddc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009de0:	4bb9      	ldr	r3, [pc, #740]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d0eb      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d166      	bne.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009df2:	4bb6      	ldr	r3, [pc, #728]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009df4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009dfc:	4053      	eors	r3, r2
 8009dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d013      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e06:	4bb1      	ldr	r3, [pc, #708]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e0e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e10:	4bae      	ldr	r3, [pc, #696]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e14:	4aad      	ldr	r2, [pc, #692]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e1a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009e1c:	4bab      	ldr	r3, [pc, #684]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e20:	4aaa      	ldr	r2, [pc, #680]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e26:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009e28:	4aa8      	ldr	r2, [pc, #672]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e38:	d115      	bne.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e3a:	f7f8 f9c1 	bl	80021c0 <HAL_GetTick>
 8009e3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e40:	e00b      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e42:	f7f8 f9bd 	bl	80021c0 <HAL_GetTick>
 8009e46:	4602      	mov	r2, r0
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d902      	bls.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8009e54:	2303      	movs	r3, #3
 8009e56:	75fb      	strb	r3, [r7, #23]
            break;
 8009e58:	e005      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e5a:	4b9c      	ldr	r3, [pc, #624]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e5e:	f003 0302 	and.w	r3, r3, #2
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d0ed      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d126      	bne.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e7a:	d10d      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8009e7c:	4b93      	ldr	r3, [pc, #588]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e8a:	0919      	lsrs	r1, r3, #4
 8009e8c:	4b90      	ldr	r3, [pc, #576]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8009e8e:	400b      	ands	r3, r1
 8009e90:	498e      	ldr	r1, [pc, #568]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e92:	4313      	orrs	r3, r2
 8009e94:	610b      	str	r3, [r1, #16]
 8009e96:	e005      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8009e98:	4b8c      	ldr	r3, [pc, #560]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	4a8b      	ldr	r2, [pc, #556]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009ea2:	6113      	str	r3, [r2, #16]
 8009ea4:	4b89      	ldr	r3, [pc, #548]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009ea6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eb2:	4986      	ldr	r1, [pc, #536]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	670b      	str	r3, [r1, #112]	; 0x70
 8009eb8:	e004      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009eba:	7dfb      	ldrb	r3, [r7, #23]
 8009ebc:	75bb      	strb	r3, [r7, #22]
 8009ebe:	e001      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
 8009ec2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 0301 	and.w	r3, r3, #1
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d07e      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ed4:	2b28      	cmp	r3, #40	; 0x28
 8009ed6:	d867      	bhi.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8009ed8:	a201      	add	r2, pc, #4	; (adr r2, 8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8009eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ede:	bf00      	nop
 8009ee0:	08009faf 	.word	0x08009faf
 8009ee4:	08009fa9 	.word	0x08009fa9
 8009ee8:	08009fa9 	.word	0x08009fa9
 8009eec:	08009fa9 	.word	0x08009fa9
 8009ef0:	08009fa9 	.word	0x08009fa9
 8009ef4:	08009fa9 	.word	0x08009fa9
 8009ef8:	08009fa9 	.word	0x08009fa9
 8009efc:	08009fa9 	.word	0x08009fa9
 8009f00:	08009f85 	.word	0x08009f85
 8009f04:	08009fa9 	.word	0x08009fa9
 8009f08:	08009fa9 	.word	0x08009fa9
 8009f0c:	08009fa9 	.word	0x08009fa9
 8009f10:	08009fa9 	.word	0x08009fa9
 8009f14:	08009fa9 	.word	0x08009fa9
 8009f18:	08009fa9 	.word	0x08009fa9
 8009f1c:	08009fa9 	.word	0x08009fa9
 8009f20:	08009f97 	.word	0x08009f97
 8009f24:	08009fa9 	.word	0x08009fa9
 8009f28:	08009fa9 	.word	0x08009fa9
 8009f2c:	08009fa9 	.word	0x08009fa9
 8009f30:	08009fa9 	.word	0x08009fa9
 8009f34:	08009fa9 	.word	0x08009fa9
 8009f38:	08009fa9 	.word	0x08009fa9
 8009f3c:	08009fa9 	.word	0x08009fa9
 8009f40:	08009faf 	.word	0x08009faf
 8009f44:	08009fa9 	.word	0x08009fa9
 8009f48:	08009fa9 	.word	0x08009fa9
 8009f4c:	08009fa9 	.word	0x08009fa9
 8009f50:	08009fa9 	.word	0x08009fa9
 8009f54:	08009fa9 	.word	0x08009fa9
 8009f58:	08009fa9 	.word	0x08009fa9
 8009f5c:	08009fa9 	.word	0x08009fa9
 8009f60:	08009faf 	.word	0x08009faf
 8009f64:	08009fa9 	.word	0x08009fa9
 8009f68:	08009fa9 	.word	0x08009fa9
 8009f6c:	08009fa9 	.word	0x08009fa9
 8009f70:	08009fa9 	.word	0x08009fa9
 8009f74:	08009fa9 	.word	0x08009fa9
 8009f78:	08009fa9 	.word	0x08009fa9
 8009f7c:	08009fa9 	.word	0x08009fa9
 8009f80:	08009faf 	.word	0x08009faf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3304      	adds	r3, #4
 8009f88:	2101      	movs	r1, #1
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f000 fde4 	bl	800ab58 <RCCEx_PLL2_Config>
 8009f90:	4603      	mov	r3, r0
 8009f92:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009f94:	e00c      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	3324      	adds	r3, #36	; 0x24
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 fe8d 	bl	800acbc <RCCEx_PLL3_Config>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009fa6:	e003      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	75fb      	strb	r3, [r7, #23]
      break;
 8009fac:	e000      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8009fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fb0:	7dfb      	ldrb	r3, [r7, #23]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d109      	bne.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009fb6:	4b45      	ldr	r3, [pc, #276]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fc2:	4942      	ldr	r1, [pc, #264]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	654b      	str	r3, [r1, #84]	; 0x54
 8009fc8:	e001      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0302 	and.w	r3, r3, #2
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d037      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fde:	2b05      	cmp	r3, #5
 8009fe0:	d820      	bhi.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8009fe2:	a201      	add	r2, pc, #4	; (adr r2, 8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8009fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe8:	0800a02b 	.word	0x0800a02b
 8009fec:	0800a001 	.word	0x0800a001
 8009ff0:	0800a013 	.word	0x0800a013
 8009ff4:	0800a02b 	.word	0x0800a02b
 8009ff8:	0800a02b 	.word	0x0800a02b
 8009ffc:	0800a02b 	.word	0x0800a02b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3304      	adds	r3, #4
 800a004:	2101      	movs	r1, #1
 800a006:	4618      	mov	r0, r3
 800a008:	f000 fda6 	bl	800ab58 <RCCEx_PLL2_Config>
 800a00c:	4603      	mov	r3, r0
 800a00e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a010:	e00c      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	3324      	adds	r3, #36	; 0x24
 800a016:	2101      	movs	r1, #1
 800a018:	4618      	mov	r0, r3
 800a01a:	f000 fe4f 	bl	800acbc <RCCEx_PLL3_Config>
 800a01e:	4603      	mov	r3, r0
 800a020:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a022:	e003      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	75fb      	strb	r3, [r7, #23]
      break;
 800a028:	e000      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800a02a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d109      	bne.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a032:	4b26      	ldr	r3, [pc, #152]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a036:	f023 0207 	bic.w	r2, r3, #7
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a03e:	4923      	ldr	r1, [pc, #140]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a040:	4313      	orrs	r3, r2
 800a042:	654b      	str	r3, [r1, #84]	; 0x54
 800a044:	e001      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 0304 	and.w	r3, r3, #4
 800a052:	2b00      	cmp	r3, #0
 800a054:	d040      	beq.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a05c:	2b05      	cmp	r3, #5
 800a05e:	d821      	bhi.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800a060:	a201      	add	r2, pc, #4	; (adr r2, 800a068 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800a062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a066:	bf00      	nop
 800a068:	0800a0ab 	.word	0x0800a0ab
 800a06c:	0800a081 	.word	0x0800a081
 800a070:	0800a093 	.word	0x0800a093
 800a074:	0800a0ab 	.word	0x0800a0ab
 800a078:	0800a0ab 	.word	0x0800a0ab
 800a07c:	0800a0ab 	.word	0x0800a0ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3304      	adds	r3, #4
 800a084:	2101      	movs	r1, #1
 800a086:	4618      	mov	r0, r3
 800a088:	f000 fd66 	bl	800ab58 <RCCEx_PLL2_Config>
 800a08c:	4603      	mov	r3, r0
 800a08e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a090:	e00c      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	3324      	adds	r3, #36	; 0x24
 800a096:	2101      	movs	r1, #1
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 fe0f 	bl	800acbc <RCCEx_PLL3_Config>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a0a2:	e003      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a8:	e000      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800a0aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d110      	bne.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a0b2:	4b06      	ldr	r3, [pc, #24]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b6:	f023 0207 	bic.w	r2, r3, #7
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0c0:	4902      	ldr	r1, [pc, #8]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	658b      	str	r3, [r1, #88]	; 0x58
 800a0c6:	e007      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a0c8:	58024800 	.word	0x58024800
 800a0cc:	58024400 	.word	0x58024400
 800a0d0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0320 	and.w	r3, r3, #32
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d04b      	beq.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0ee:	d02e      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a0f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0f4:	d828      	bhi.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0fa:	d02a      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a0fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a100:	d822      	bhi.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a102:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a106:	d026      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a108:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a10c:	d81c      	bhi.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a10e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a112:	d010      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800a114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a118:	d816      	bhi.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d01d      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a11e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a122:	d111      	bne.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3304      	adds	r3, #4
 800a128:	2100      	movs	r1, #0
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 fd14 	bl	800ab58 <RCCEx_PLL2_Config>
 800a130:	4603      	mov	r3, r0
 800a132:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a134:	e012      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	3324      	adds	r3, #36	; 0x24
 800a13a:	2102      	movs	r1, #2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fdbd 	bl	800acbc <RCCEx_PLL3_Config>
 800a142:	4603      	mov	r3, r0
 800a144:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a146:	e009      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	75fb      	strb	r3, [r7, #23]
      break;
 800a14c:	e006      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a14e:	bf00      	nop
 800a150:	e004      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a152:	bf00      	nop
 800a154:	e002      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a156:	bf00      	nop
 800a158:	e000      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a15a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10a      	bne.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a162:	4bb2      	ldr	r3, [pc, #712]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a166:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a170:	49ae      	ldr	r1, [pc, #696]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a172:	4313      	orrs	r3, r2
 800a174:	654b      	str	r3, [r1, #84]	; 0x54
 800a176:	e001      	b.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a178:	7dfb      	ldrb	r3, [r7, #23]
 800a17a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a184:	2b00      	cmp	r3, #0
 800a186:	d04b      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a18e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a192:	d02e      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a194:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a198:	d828      	bhi.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a19a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a19e:	d02a      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a1a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1a4:	d822      	bhi.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a1a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1aa:	d026      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a1ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1b0:	d81c      	bhi.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a1b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1b6:	d010      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800a1b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1bc:	d816      	bhi.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d01d      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800a1c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1c6:	d111      	bne.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fcc2 	bl	800ab58 <RCCEx_PLL2_Config>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a1d8:	e012      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3324      	adds	r3, #36	; 0x24
 800a1de:	2102      	movs	r1, #2
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 fd6b 	bl	800acbc <RCCEx_PLL3_Config>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a1ea:	e009      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a1f0:	e006      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a1f2:	bf00      	nop
 800a1f4:	e004      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a1f6:	bf00      	nop
 800a1f8:	e002      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a1fa:	bf00      	nop
 800a1fc:	e000      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a1fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a200:	7dfb      	ldrb	r3, [r7, #23]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10a      	bne.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a206:	4b89      	ldr	r3, [pc, #548]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a20a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a214:	4985      	ldr	r1, [pc, #532]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a216:	4313      	orrs	r3, r2
 800a218:	658b      	str	r3, [r1, #88]	; 0x58
 800a21a:	e001      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21c:	7dfb      	ldrb	r3, [r7, #23]
 800a21e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d04b      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a232:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a236:	d02e      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a238:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a23c:	d828      	bhi.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a23e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a242:	d02a      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a248:	d822      	bhi.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a24a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a24e:	d026      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a250:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a254:	d81c      	bhi.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a25a:	d010      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800a25c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a260:	d816      	bhi.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a262:	2b00      	cmp	r3, #0
 800a264:	d01d      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800a266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a26a:	d111      	bne.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	3304      	adds	r3, #4
 800a270:	2100      	movs	r1, #0
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fc70 	bl	800ab58 <RCCEx_PLL2_Config>
 800a278:	4603      	mov	r3, r0
 800a27a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a27c:	e012      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	3324      	adds	r3, #36	; 0x24
 800a282:	2102      	movs	r1, #2
 800a284:	4618      	mov	r0, r3
 800a286:	f000 fd19 	bl	800acbc <RCCEx_PLL3_Config>
 800a28a:	4603      	mov	r3, r0
 800a28c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a28e:	e009      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	75fb      	strb	r3, [r7, #23]
      break;
 800a294:	e006      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a296:	bf00      	nop
 800a298:	e004      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a29a:	bf00      	nop
 800a29c:	e002      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a29e:	bf00      	nop
 800a2a0:	e000      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a2a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2a4:	7dfb      	ldrb	r3, [r7, #23]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10a      	bne.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a2aa:	4b60      	ldr	r3, [pc, #384]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2b8:	495c      	ldr	r1, [pc, #368]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	658b      	str	r3, [r1, #88]	; 0x58
 800a2be:	e001      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2c0:	7dfb      	ldrb	r3, [r7, #23]
 800a2c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0308 	and.w	r3, r3, #8
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d018      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2d8:	d10a      	bne.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	3324      	adds	r3, #36	; 0x24
 800a2de:	2102      	movs	r1, #2
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 fceb 	bl	800acbc <RCCEx_PLL3_Config>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a2f0:	4b4e      	ldr	r3, [pc, #312]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a2f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2fc:	494b      	ldr	r1, [pc, #300]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 0310 	and.w	r3, r3, #16
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d01a      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a318:	d10a      	bne.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	3324      	adds	r3, #36	; 0x24
 800a31e:	2102      	movs	r1, #2
 800a320:	4618      	mov	r0, r3
 800a322:	f000 fccb 	bl	800acbc <RCCEx_PLL3_Config>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a330:	4b3e      	ldr	r3, [pc, #248]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a33e:	493b      	ldr	r1, [pc, #236]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a340:	4313      	orrs	r3, r2
 800a342:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d034      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a35a:	d01d      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a35c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a360:	d817      	bhi.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a36a:	d009      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a36c:	e011      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	3304      	adds	r3, #4
 800a372:	2100      	movs	r1, #0
 800a374:	4618      	mov	r0, r3
 800a376:	f000 fbef 	bl	800ab58 <RCCEx_PLL2_Config>
 800a37a:	4603      	mov	r3, r0
 800a37c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a37e:	e00c      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	3324      	adds	r3, #36	; 0x24
 800a384:	2102      	movs	r1, #2
 800a386:	4618      	mov	r0, r3
 800a388:	f000 fc98 	bl	800acbc <RCCEx_PLL3_Config>
 800a38c:	4603      	mov	r3, r0
 800a38e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a390:	e003      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	75fb      	strb	r3, [r7, #23]
      break;
 800a396:	e000      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a39a:	7dfb      	ldrb	r3, [r7, #23]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10a      	bne.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a3a0:	4b22      	ldr	r3, [pc, #136]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a3a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3ae:	491f      	ldr	r1, [pc, #124]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	658b      	str	r3, [r1, #88]	; 0x58
 800a3b4:	e001      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d036      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a3d0:	d01c      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a3d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a3d6:	d816      	bhi.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a3d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3dc:	d003      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a3de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3e2:	d007      	beq.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a3e4:	e00f      	b.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3e6:	4b11      	ldr	r3, [pc, #68]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ea:	4a10      	ldr	r2, [pc, #64]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a3ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a3f2:	e00c      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	3324      	adds	r3, #36	; 0x24
 800a3f8:	2101      	movs	r1, #1
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 fc5e 	bl	800acbc <RCCEx_PLL3_Config>
 800a400:	4603      	mov	r3, r0
 800a402:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a404:	e003      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	75fb      	strb	r3, [r7, #23]
      break;
 800a40a:	e000      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a40c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10d      	bne.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a414:	4b05      	ldr	r3, [pc, #20]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a418:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a422:	4902      	ldr	r1, [pc, #8]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a424:	4313      	orrs	r3, r2
 800a426:	654b      	str	r3, [r1, #84]	; 0x54
 800a428:	e004      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800a42a:	bf00      	nop
 800a42c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a430:	7dfb      	ldrb	r3, [r7, #23]
 800a432:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d029      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a444:	2b00      	cmp	r3, #0
 800a446:	d003      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a44c:	d007      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a44e:	e00f      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a450:	4b61      	ldr	r3, [pc, #388]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a454:	4a60      	ldr	r2, [pc, #384]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a45a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a45c:	e00b      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	3304      	adds	r3, #4
 800a462:	2102      	movs	r1, #2
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fb77 	bl	800ab58 <RCCEx_PLL2_Config>
 800a46a:	4603      	mov	r3, r0
 800a46c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a46e:	e002      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	75fb      	strb	r3, [r7, #23]
      break;
 800a474:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a476:	7dfb      	ldrb	r3, [r7, #23]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d109      	bne.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a47c:	4b56      	ldr	r3, [pc, #344]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a47e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a488:	4953      	ldr	r1, [pc, #332]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a48a:	4313      	orrs	r3, r2
 800a48c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a48e:	e001      	b.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a490:	7dfb      	ldrb	r3, [r7, #23]
 800a492:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00a      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	3324      	adds	r3, #36	; 0x24
 800a4a4:	2102      	movs	r1, #2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 fc08 	bl	800acbc <RCCEx_PLL3_Config>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d030      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4ca:	d017      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a4cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4d0:	d811      	bhi.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a4d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4d6:	d013      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800a4d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4dc:	d80b      	bhi.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d010      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800a4e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4e6:	d106      	bne.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4e8:	4b3b      	ldr	r3, [pc, #236]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ec:	4a3a      	ldr	r2, [pc, #232]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a4ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a4f4:	e007      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a4fa:	e004      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a4fc:	bf00      	nop
 800a4fe:	e002      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a500:	bf00      	nop
 800a502:	e000      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a504:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a506:	7dfb      	ldrb	r3, [r7, #23]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d109      	bne.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a50c:	4b32      	ldr	r3, [pc, #200]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a50e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a518:	492f      	ldr	r1, [pc, #188]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a51a:	4313      	orrs	r3, r2
 800a51c:	654b      	str	r3, [r1, #84]	; 0x54
 800a51e:	e001      	b.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a520:	7dfb      	ldrb	r3, [r7, #23]
 800a522:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d008      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a530:	4b29      	ldr	r3, [pc, #164]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a534:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a53c:	4926      	ldr	r1, [pc, #152]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d008      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a54e:	4b22      	ldr	r3, [pc, #136]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a552:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a55a:	491f      	ldr	r1, [pc, #124]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a55c:	4313      	orrs	r3, r2
 800a55e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00d      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a56c:	4b1a      	ldr	r3, [pc, #104]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	4a19      	ldr	r2, [pc, #100]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a572:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a576:	6113      	str	r3, [r2, #16]
 800a578:	4b17      	ldr	r3, [pc, #92]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a57a:	691a      	ldr	r2, [r3, #16]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a582:	4915      	ldr	r1, [pc, #84]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a584:	4313      	orrs	r3, r2
 800a586:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	da08      	bge.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a590:	4b11      	ldr	r3, [pc, #68]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a594:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a59c:	490e      	ldr	r1, [pc, #56]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d009      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a5ae:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5bc:	4906      	ldr	r1, [pc, #24]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a5c2:	7dbb      	ldrb	r3, [r7, #22]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d101      	bne.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	e000      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3718      	adds	r7, #24
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	58024400 	.word	0x58024400

0800a5dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a5e0:	f7ff f8a6 	bl	8009730 <HAL_RCC_GetHCLKFreq>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	4b06      	ldr	r3, [pc, #24]	; (800a600 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	091b      	lsrs	r3, r3, #4
 800a5ec:	f003 0307 	and.w	r3, r3, #7
 800a5f0:	4904      	ldr	r1, [pc, #16]	; (800a604 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a5f2:	5ccb      	ldrb	r3, [r1, r3]
 800a5f4:	f003 031f 	and.w	r3, r3, #31
 800a5f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	58024400 	.word	0x58024400
 800a604:	0800e888 	.word	0x0800e888

0800a608 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a608:	b480      	push	{r7}
 800a60a:	b089      	sub	sp, #36	; 0x24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a610:	4ba1      	ldr	r3, [pc, #644]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a614:	f003 0303 	and.w	r3, r3, #3
 800a618:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a61a:	4b9f      	ldr	r3, [pc, #636]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61e:	0b1b      	lsrs	r3, r3, #12
 800a620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a624:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a626:	4b9c      	ldr	r3, [pc, #624]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62a:	091b      	lsrs	r3, r3, #4
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a632:	4b99      	ldr	r3, [pc, #612]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a636:	08db      	lsrs	r3, r3, #3
 800a638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a63c:	693a      	ldr	r2, [r7, #16]
 800a63e:	fb02 f303 	mul.w	r3, r2, r3
 800a642:	ee07 3a90 	vmov	s15, r3
 800a646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a64a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2b00      	cmp	r3, #0
 800a652:	f000 8111 	beq.w	800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	f000 8083 	beq.w	800a764 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	2b02      	cmp	r3, #2
 800a662:	f200 80a1 	bhi.w	800a7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d003      	beq.n	800a674 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d056      	beq.n	800a720 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a672:	e099      	b.n	800a7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a674:	4b88      	ldr	r3, [pc, #544]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0320 	and.w	r3, r3, #32
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d02d      	beq.n	800a6dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a680:	4b85      	ldr	r3, [pc, #532]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	08db      	lsrs	r3, r3, #3
 800a686:	f003 0303 	and.w	r3, r3, #3
 800a68a:	4a84      	ldr	r2, [pc, #528]	; (800a89c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a68c:	fa22 f303 	lsr.w	r3, r2, r3
 800a690:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	ee07 3a90 	vmov	s15, r3
 800a698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	ee07 3a90 	vmov	s15, r3
 800a6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6aa:	4b7b      	ldr	r3, [pc, #492]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b2:	ee07 3a90 	vmov	s15, r3
 800a6b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6be:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a6da:	e087      	b.n	800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	ee07 3a90 	vmov	s15, r3
 800a6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a6ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ee:	4b6a      	ldr	r3, [pc, #424]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a702:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a70a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a70e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a71e:	e065      	b.n	800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	ee07 3a90 	vmov	s15, r3
 800a726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a72e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a732:	4b59      	ldr	r3, [pc, #356]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a73a:	ee07 3a90 	vmov	s15, r3
 800a73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a742:	ed97 6a03 	vldr	s12, [r7, #12]
 800a746:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a74a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a74e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a75a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a75e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a762:	e043      	b.n	800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	ee07 3a90 	vmov	s15, r3
 800a76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a8ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a776:	4b48      	ldr	r3, [pc, #288]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a786:	ed97 6a03 	vldr	s12, [r7, #12]
 800a78a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a78e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7a6:	e021      	b.n	800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	ee07 3a90 	vmov	s15, r3
 800a7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ba:	4b37      	ldr	r3, [pc, #220]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c2:	ee07 3a90 	vmov	s15, r3
 800a7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a7ec:	4b2a      	ldr	r3, [pc, #168]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f0:	0a5b      	lsrs	r3, r3, #9
 800a7f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7f6:	ee07 3a90 	vmov	s15, r3
 800a7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a802:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a806:	edd7 6a07 	vldr	s13, [r7, #28]
 800a80a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a80e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a812:	ee17 2a90 	vmov	r2, s15
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a81a:	4b1f      	ldr	r3, [pc, #124]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81e:	0c1b      	lsrs	r3, r3, #16
 800a820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a824:	ee07 3a90 	vmov	s15, r3
 800a828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a82c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a830:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a834:	edd7 6a07 	vldr	s13, [r7, #28]
 800a838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a83c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a840:	ee17 2a90 	vmov	r2, s15
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a848:	4b13      	ldr	r3, [pc, #76]	; (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84c:	0e1b      	lsrs	r3, r3, #24
 800a84e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a852:	ee07 3a90 	vmov	s15, r3
 800a856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a85a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a85e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a862:	edd7 6a07 	vldr	s13, [r7, #28]
 800a866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a86a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a86e:	ee17 2a90 	vmov	r2, s15
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a876:	e008      	b.n	800a88a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	609a      	str	r2, [r3, #8]
}
 800a88a:	bf00      	nop
 800a88c:	3724      	adds	r7, #36	; 0x24
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	58024400 	.word	0x58024400
 800a89c:	03d09000 	.word	0x03d09000
 800a8a0:	46000000 	.word	0x46000000
 800a8a4:	4c742400 	.word	0x4c742400
 800a8a8:	4a742400 	.word	0x4a742400
 800a8ac:	4bbebc20 	.word	0x4bbebc20

0800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b089      	sub	sp, #36	; 0x24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8b8:	4ba1      	ldr	r3, [pc, #644]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8bc:	f003 0303 	and.w	r3, r3, #3
 800a8c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a8c2:	4b9f      	ldr	r3, [pc, #636]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c6:	0d1b      	lsrs	r3, r3, #20
 800a8c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a8ce:	4b9c      	ldr	r3, [pc, #624]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d2:	0a1b      	lsrs	r3, r3, #8
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a8da:	4b99      	ldr	r3, [pc, #612]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8de:	08db      	lsrs	r3, r3, #3
 800a8e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8e4:	693a      	ldr	r2, [r7, #16]
 800a8e6:	fb02 f303 	mul.w	r3, r2, r3
 800a8ea:	ee07 3a90 	vmov	s15, r3
 800a8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 8111 	beq.w	800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	2b02      	cmp	r3, #2
 800a902:	f000 8083 	beq.w	800aa0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	2b02      	cmp	r3, #2
 800a90a:	f200 80a1 	bhi.w	800aa50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d003      	beq.n	800a91c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d056      	beq.n	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a91a:	e099      	b.n	800aa50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a91c:	4b88      	ldr	r3, [pc, #544]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 0320 	and.w	r3, r3, #32
 800a924:	2b00      	cmp	r3, #0
 800a926:	d02d      	beq.n	800a984 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a928:	4b85      	ldr	r3, [pc, #532]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	08db      	lsrs	r3, r3, #3
 800a92e:	f003 0303 	and.w	r3, r3, #3
 800a932:	4a84      	ldr	r2, [pc, #528]	; (800ab44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a934:	fa22 f303 	lsr.w	r3, r2, r3
 800a938:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	ee07 3a90 	vmov	s15, r3
 800a940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	ee07 3a90 	vmov	s15, r3
 800a94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a952:	4b7b      	ldr	r3, [pc, #492]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a95a:	ee07 3a90 	vmov	s15, r3
 800a95e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a962:	ed97 6a03 	vldr	s12, [r7, #12]
 800a966:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a96a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a96e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a97a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a97e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a982:	e087      	b.n	800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	ee07 3a90 	vmov	s15, r3
 800a98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a98e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ab4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a996:	4b6a      	ldr	r3, [pc, #424]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a99e:	ee07 3a90 	vmov	s15, r3
 800a9a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9c6:	e065      	b.n	800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	ee07 3a90 	vmov	s15, r3
 800a9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ab50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a9d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9da:	4b59      	ldr	r3, [pc, #356]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e2:	ee07 3a90 	vmov	s15, r3
 800a9e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa0a:	e043      	b.n	800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ab54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aa1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa1e:	4b48      	ldr	r3, [pc, #288]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa26:	ee07 3a90 	vmov	s15, r3
 800aa2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa32:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa4e:	e021      	b.n	800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	ee07 3a90 	vmov	s15, r3
 800aa56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ab50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa62:	4b37      	ldr	r3, [pc, #220]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa72:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa76:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800aa94:	4b2a      	ldr	r3, [pc, #168]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa98:	0a5b      	lsrs	r3, r3, #9
 800aa9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa9e:	ee07 3a90 	vmov	s15, r3
 800aaa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaae:	edd7 6a07 	vldr	s13, [r7, #28]
 800aab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaba:	ee17 2a90 	vmov	r2, s15
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800aac2:	4b1f      	ldr	r3, [pc, #124]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac6:	0c1b      	lsrs	r3, r3, #16
 800aac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aacc:	ee07 3a90 	vmov	s15, r3
 800aad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aad8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aadc:	edd7 6a07 	vldr	s13, [r7, #28]
 800aae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aae8:	ee17 2a90 	vmov	r2, s15
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800aaf0:	4b13      	ldr	r3, [pc, #76]	; (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf4:	0e1b      	lsrs	r3, r3, #24
 800aaf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aafa:	ee07 3a90 	vmov	s15, r3
 800aafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab16:	ee17 2a90 	vmov	r2, s15
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ab1e:	e008      	b.n	800ab32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	609a      	str	r2, [r3, #8]
}
 800ab32:	bf00      	nop
 800ab34:	3724      	adds	r7, #36	; 0x24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	58024400 	.word	0x58024400
 800ab44:	03d09000 	.word	0x03d09000
 800ab48:	46000000 	.word	0x46000000
 800ab4c:	4c742400 	.word	0x4c742400
 800ab50:	4a742400 	.word	0x4a742400
 800ab54:	4bbebc20 	.word	0x4bbebc20

0800ab58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ab66:	4b53      	ldr	r3, [pc, #332]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ab68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6a:	f003 0303 	and.w	r3, r3, #3
 800ab6e:	2b03      	cmp	r3, #3
 800ab70:	d101      	bne.n	800ab76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e099      	b.n	800acaa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ab76:	4b4f      	ldr	r3, [pc, #316]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a4e      	ldr	r2, [pc, #312]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ab7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ab80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab82:	f7f7 fb1d 	bl	80021c0 <HAL_GetTick>
 800ab86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ab88:	e008      	b.n	800ab9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ab8a:	f7f7 fb19 	bl	80021c0 <HAL_GetTick>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d901      	bls.n	800ab9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e086      	b.n	800acaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ab9c:	4b45      	ldr	r3, [pc, #276]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1f0      	bne.n	800ab8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aba8:	4b42      	ldr	r3, [pc, #264]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800abaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	031b      	lsls	r3, r3, #12
 800abb6:	493f      	ldr	r1, [pc, #252]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800abb8:	4313      	orrs	r3, r2
 800abba:	628b      	str	r3, [r1, #40]	; 0x28
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	3b01      	subs	r3, #1
 800abc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	3b01      	subs	r3, #1
 800abcc:	025b      	lsls	r3, r3, #9
 800abce:	b29b      	uxth	r3, r3
 800abd0:	431a      	orrs	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	3b01      	subs	r3, #1
 800abd8:	041b      	lsls	r3, r3, #16
 800abda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800abde:	431a      	orrs	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	3b01      	subs	r3, #1
 800abe6:	061b      	lsls	r3, r3, #24
 800abe8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800abec:	4931      	ldr	r1, [pc, #196]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800abee:	4313      	orrs	r3, r2
 800abf0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800abf2:	4b30      	ldr	r3, [pc, #192]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800abf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	492d      	ldr	r1, [pc, #180]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac00:	4313      	orrs	r3, r2
 800ac02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ac04:	4b2b      	ldr	r3, [pc, #172]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac08:	f023 0220 	bic.w	r2, r3, #32
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	4928      	ldr	r1, [pc, #160]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac12:	4313      	orrs	r3, r2
 800ac14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ac16:	4b27      	ldr	r3, [pc, #156]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1a:	4a26      	ldr	r2, [pc, #152]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac1c:	f023 0310 	bic.w	r3, r3, #16
 800ac20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ac22:	4b24      	ldr	r3, [pc, #144]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac26:	4b24      	ldr	r3, [pc, #144]	; (800acb8 <RCCEx_PLL2_Config+0x160>)
 800ac28:	4013      	ands	r3, r2
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	69d2      	ldr	r2, [r2, #28]
 800ac2e:	00d2      	lsls	r2, r2, #3
 800ac30:	4920      	ldr	r1, [pc, #128]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac32:	4313      	orrs	r3, r2
 800ac34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ac36:	4b1f      	ldr	r3, [pc, #124]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3a:	4a1e      	ldr	r2, [pc, #120]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac3c:	f043 0310 	orr.w	r3, r3, #16
 800ac40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d106      	bne.n	800ac56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ac48:	4b1a      	ldr	r3, [pc, #104]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4c:	4a19      	ldr	r2, [pc, #100]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac52:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac54:	e00f      	b.n	800ac76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d106      	bne.n	800ac6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ac5c:	4b15      	ldr	r3, [pc, #84]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac60:	4a14      	ldr	r2, [pc, #80]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac66:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac68:	e005      	b.n	800ac76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ac6a:	4b12      	ldr	r3, [pc, #72]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6e:	4a11      	ldr	r2, [pc, #68]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ac76:	4b0f      	ldr	r3, [pc, #60]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a0e      	ldr	r2, [pc, #56]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ac80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac82:	f7f7 fa9d 	bl	80021c0 <HAL_GetTick>
 800ac86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ac88:	e008      	b.n	800ac9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ac8a:	f7f7 fa99 	bl	80021c0 <HAL_GetTick>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d901      	bls.n	800ac9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e006      	b.n	800acaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ac9c:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d0f0      	beq.n	800ac8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	58024400 	.word	0x58024400
 800acb8:	ffff0007 	.word	0xffff0007

0800acbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800acca:	4b53      	ldr	r3, [pc, #332]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800accc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acce:	f003 0303 	and.w	r3, r3, #3
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d101      	bne.n	800acda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e099      	b.n	800ae0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800acda:	4b4f      	ldr	r3, [pc, #316]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a4e      	ldr	r2, [pc, #312]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ace0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ace4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ace6:	f7f7 fa6b 	bl	80021c0 <HAL_GetTick>
 800acea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800acec:	e008      	b.n	800ad00 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800acee:	f7f7 fa67 	bl	80021c0 <HAL_GetTick>
 800acf2:	4602      	mov	r2, r0
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d901      	bls.n	800ad00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800acfc:	2303      	movs	r3, #3
 800acfe:	e086      	b.n	800ae0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad00:	4b45      	ldr	r3, [pc, #276]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1f0      	bne.n	800acee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ad0c:	4b42      	ldr	r3, [pc, #264]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	051b      	lsls	r3, r3, #20
 800ad1a:	493f      	ldr	r1, [pc, #252]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	628b      	str	r3, [r1, #40]	; 0x28
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	3b01      	subs	r3, #1
 800ad26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	025b      	lsls	r3, r3, #9
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	431a      	orrs	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	041b      	lsls	r3, r3, #16
 800ad3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ad42:	431a      	orrs	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	061b      	lsls	r3, r3, #24
 800ad4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad50:	4931      	ldr	r1, [pc, #196]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ad56:	4b30      	ldr	r3, [pc, #192]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	695b      	ldr	r3, [r3, #20]
 800ad62:	492d      	ldr	r1, [pc, #180]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad64:	4313      	orrs	r3, r2
 800ad66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ad68:	4b2b      	ldr	r3, [pc, #172]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	4928      	ldr	r1, [pc, #160]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad76:	4313      	orrs	r3, r2
 800ad78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ad7a:	4b27      	ldr	r3, [pc, #156]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7e:	4a26      	ldr	r2, [pc, #152]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ad86:	4b24      	ldr	r3, [pc, #144]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad8a:	4b24      	ldr	r3, [pc, #144]	; (800ae1c <RCCEx_PLL3_Config+0x160>)
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	69d2      	ldr	r2, [r2, #28]
 800ad92:	00d2      	lsls	r2, r2, #3
 800ad94:	4920      	ldr	r1, [pc, #128]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad96:	4313      	orrs	r3, r2
 800ad98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ad9a:	4b1f      	ldr	r3, [pc, #124]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9e:	4a1e      	ldr	r2, [pc, #120]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ada0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ada4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d106      	bne.n	800adba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800adac:	4b1a      	ldr	r3, [pc, #104]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	4a19      	ldr	r2, [pc, #100]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800adb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800adb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800adb8:	e00f      	b.n	800adda <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d106      	bne.n	800adce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800adc0:	4b15      	ldr	r3, [pc, #84]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	4a14      	ldr	r2, [pc, #80]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800adc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800adca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800adcc:	e005      	b.n	800adda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800adce:	4b12      	ldr	r3, [pc, #72]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800add0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add2:	4a11      	ldr	r2, [pc, #68]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800add4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800add8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800adda:	4b0f      	ldr	r3, [pc, #60]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a0e      	ldr	r2, [pc, #56]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ade0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ade4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ade6:	f7f7 f9eb 	bl	80021c0 <HAL_GetTick>
 800adea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800adec:	e008      	b.n	800ae00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800adee:	f7f7 f9e7 	bl	80021c0 <HAL_GetTick>
 800adf2:	4602      	mov	r2, r0
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d901      	bls.n	800ae00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800adfc:	2303      	movs	r3, #3
 800adfe:	e006      	b.n	800ae0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ae00:	4b05      	ldr	r3, [pc, #20]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0f0      	beq.n	800adee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	58024400 	.word	0x58024400
 800ae1c:	ffff0007 	.word	0xffff0007

0800ae20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e049      	b.n	800aec6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d106      	bne.n	800ae4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7f7 f800 	bl	8001e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2202      	movs	r2, #2
 800ae50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	4610      	mov	r0, r2
 800ae60:	f000 fbb6 	bl	800b5d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2201      	movs	r2, #1
 800ae68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b082      	sub	sp, #8
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e049      	b.n	800af74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d106      	bne.n	800aefa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f841 	bl	800af7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2202      	movs	r2, #2
 800aefe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	3304      	adds	r3, #4
 800af0a:	4619      	mov	r1, r3
 800af0c:	4610      	mov	r0, r2
 800af0e:	f000 fb5f 	bl	800b5d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2201      	movs	r2, #1
 800af66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d109      	bne.n	800afb4 <HAL_TIM_PWM_Start+0x24>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	bf14      	ite	ne
 800afac:	2301      	movne	r3, #1
 800afae:	2300      	moveq	r3, #0
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	e03c      	b.n	800b02e <HAL_TIM_PWM_Start+0x9e>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	2b04      	cmp	r3, #4
 800afb8:	d109      	bne.n	800afce <HAL_TIM_PWM_Start+0x3e>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	bf14      	ite	ne
 800afc6:	2301      	movne	r3, #1
 800afc8:	2300      	moveq	r3, #0
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	e02f      	b.n	800b02e <HAL_TIM_PWM_Start+0x9e>
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2b08      	cmp	r3, #8
 800afd2:	d109      	bne.n	800afe8 <HAL_TIM_PWM_Start+0x58>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	2b01      	cmp	r3, #1
 800afde:	bf14      	ite	ne
 800afe0:	2301      	movne	r3, #1
 800afe2:	2300      	moveq	r3, #0
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	e022      	b.n	800b02e <HAL_TIM_PWM_Start+0x9e>
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2b0c      	cmp	r3, #12
 800afec:	d109      	bne.n	800b002 <HAL_TIM_PWM_Start+0x72>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	bf14      	ite	ne
 800affa:	2301      	movne	r3, #1
 800affc:	2300      	moveq	r3, #0
 800affe:	b2db      	uxtb	r3, r3
 800b000:	e015      	b.n	800b02e <HAL_TIM_PWM_Start+0x9e>
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b10      	cmp	r3, #16
 800b006:	d109      	bne.n	800b01c <HAL_TIM_PWM_Start+0x8c>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b01      	cmp	r3, #1
 800b012:	bf14      	ite	ne
 800b014:	2301      	movne	r3, #1
 800b016:	2300      	moveq	r3, #0
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	e008      	b.n	800b02e <HAL_TIM_PWM_Start+0x9e>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b01      	cmp	r3, #1
 800b026:	bf14      	ite	ne
 800b028:	2301      	movne	r3, #1
 800b02a:	2300      	moveq	r3, #0
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e0ab      	b.n	800b18e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d104      	bne.n	800b046 <HAL_TIM_PWM_Start+0xb6>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2202      	movs	r2, #2
 800b040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b044:	e023      	b.n	800b08e <HAL_TIM_PWM_Start+0xfe>
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2b04      	cmp	r3, #4
 800b04a:	d104      	bne.n	800b056 <HAL_TIM_PWM_Start+0xc6>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2202      	movs	r2, #2
 800b050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b054:	e01b      	b.n	800b08e <HAL_TIM_PWM_Start+0xfe>
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2b08      	cmp	r3, #8
 800b05a:	d104      	bne.n	800b066 <HAL_TIM_PWM_Start+0xd6>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2202      	movs	r2, #2
 800b060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b064:	e013      	b.n	800b08e <HAL_TIM_PWM_Start+0xfe>
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2b0c      	cmp	r3, #12
 800b06a:	d104      	bne.n	800b076 <HAL_TIM_PWM_Start+0xe6>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2202      	movs	r2, #2
 800b070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b074:	e00b      	b.n	800b08e <HAL_TIM_PWM_Start+0xfe>
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b10      	cmp	r3, #16
 800b07a:	d104      	bne.n	800b086 <HAL_TIM_PWM_Start+0xf6>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2202      	movs	r2, #2
 800b080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b084:	e003      	b.n	800b08e <HAL_TIM_PWM_Start+0xfe>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2202      	movs	r2, #2
 800b08a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2201      	movs	r2, #1
 800b094:	6839      	ldr	r1, [r7, #0]
 800b096:	4618      	mov	r0, r3
 800b098:	f000 feac 	bl	800bdf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a3d      	ldr	r2, [pc, #244]	; (800b198 <HAL_TIM_PWM_Start+0x208>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d013      	beq.n	800b0ce <HAL_TIM_PWM_Start+0x13e>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a3c      	ldr	r2, [pc, #240]	; (800b19c <HAL_TIM_PWM_Start+0x20c>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d00e      	beq.n	800b0ce <HAL_TIM_PWM_Start+0x13e>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a3a      	ldr	r2, [pc, #232]	; (800b1a0 <HAL_TIM_PWM_Start+0x210>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d009      	beq.n	800b0ce <HAL_TIM_PWM_Start+0x13e>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a39      	ldr	r2, [pc, #228]	; (800b1a4 <HAL_TIM_PWM_Start+0x214>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d004      	beq.n	800b0ce <HAL_TIM_PWM_Start+0x13e>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a37      	ldr	r2, [pc, #220]	; (800b1a8 <HAL_TIM_PWM_Start+0x218>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d101      	bne.n	800b0d2 <HAL_TIM_PWM_Start+0x142>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e000      	b.n	800b0d4 <HAL_TIM_PWM_Start+0x144>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d007      	beq.n	800b0e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b0e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a2a      	ldr	r2, [pc, #168]	; (800b198 <HAL_TIM_PWM_Start+0x208>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d02c      	beq.n	800b14c <HAL_TIM_PWM_Start+0x1bc>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0fa:	d027      	beq.n	800b14c <HAL_TIM_PWM_Start+0x1bc>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a2a      	ldr	r2, [pc, #168]	; (800b1ac <HAL_TIM_PWM_Start+0x21c>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d022      	beq.n	800b14c <HAL_TIM_PWM_Start+0x1bc>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a29      	ldr	r2, [pc, #164]	; (800b1b0 <HAL_TIM_PWM_Start+0x220>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d01d      	beq.n	800b14c <HAL_TIM_PWM_Start+0x1bc>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a27      	ldr	r2, [pc, #156]	; (800b1b4 <HAL_TIM_PWM_Start+0x224>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d018      	beq.n	800b14c <HAL_TIM_PWM_Start+0x1bc>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a1f      	ldr	r2, [pc, #124]	; (800b19c <HAL_TIM_PWM_Start+0x20c>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d013      	beq.n	800b14c <HAL_TIM_PWM_Start+0x1bc>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a23      	ldr	r2, [pc, #140]	; (800b1b8 <HAL_TIM_PWM_Start+0x228>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d00e      	beq.n	800b14c <HAL_TIM_PWM_Start+0x1bc>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a1b      	ldr	r2, [pc, #108]	; (800b1a0 <HAL_TIM_PWM_Start+0x210>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d009      	beq.n	800b14c <HAL_TIM_PWM_Start+0x1bc>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a1f      	ldr	r2, [pc, #124]	; (800b1bc <HAL_TIM_PWM_Start+0x22c>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d004      	beq.n	800b14c <HAL_TIM_PWM_Start+0x1bc>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a1e      	ldr	r2, [pc, #120]	; (800b1c0 <HAL_TIM_PWM_Start+0x230>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d115      	bne.n	800b178 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	689a      	ldr	r2, [r3, #8]
 800b152:	4b1c      	ldr	r3, [pc, #112]	; (800b1c4 <HAL_TIM_PWM_Start+0x234>)
 800b154:	4013      	ands	r3, r2
 800b156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b06      	cmp	r3, #6
 800b15c:	d015      	beq.n	800b18a <HAL_TIM_PWM_Start+0x1fa>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b164:	d011      	beq.n	800b18a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f042 0201 	orr.w	r2, r2, #1
 800b174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b176:	e008      	b.n	800b18a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f042 0201 	orr.w	r2, r2, #1
 800b186:	601a      	str	r2, [r3, #0]
 800b188:	e000      	b.n	800b18c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b18a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	40010000 	.word	0x40010000
 800b19c:	40010400 	.word	0x40010400
 800b1a0:	40014000 	.word	0x40014000
 800b1a4:	40014400 	.word	0x40014400
 800b1a8:	40014800 	.word	0x40014800
 800b1ac:	40000400 	.word	0x40000400
 800b1b0:	40000800 	.word	0x40000800
 800b1b4:	40000c00 	.word	0x40000c00
 800b1b8:	40001800 	.word	0x40001800
 800b1bc:	4000e000 	.word	0x4000e000
 800b1c0:	4000e400 	.word	0x4000e400
 800b1c4:	00010007 	.word	0x00010007

0800b1c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d101      	bne.n	800b1e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b1de:	2302      	movs	r3, #2
 800b1e0:	e0fd      	b.n	800b3de <HAL_TIM_PWM_ConfigChannel+0x216>
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2b14      	cmp	r3, #20
 800b1ee:	f200 80f0 	bhi.w	800b3d2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b1f2:	a201      	add	r2, pc, #4	; (adr r2, 800b1f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f8:	0800b24d 	.word	0x0800b24d
 800b1fc:	0800b3d3 	.word	0x0800b3d3
 800b200:	0800b3d3 	.word	0x0800b3d3
 800b204:	0800b3d3 	.word	0x0800b3d3
 800b208:	0800b28d 	.word	0x0800b28d
 800b20c:	0800b3d3 	.word	0x0800b3d3
 800b210:	0800b3d3 	.word	0x0800b3d3
 800b214:	0800b3d3 	.word	0x0800b3d3
 800b218:	0800b2cf 	.word	0x0800b2cf
 800b21c:	0800b3d3 	.word	0x0800b3d3
 800b220:	0800b3d3 	.word	0x0800b3d3
 800b224:	0800b3d3 	.word	0x0800b3d3
 800b228:	0800b30f 	.word	0x0800b30f
 800b22c:	0800b3d3 	.word	0x0800b3d3
 800b230:	0800b3d3 	.word	0x0800b3d3
 800b234:	0800b3d3 	.word	0x0800b3d3
 800b238:	0800b351 	.word	0x0800b351
 800b23c:	0800b3d3 	.word	0x0800b3d3
 800b240:	0800b3d3 	.word	0x0800b3d3
 800b244:	0800b3d3 	.word	0x0800b3d3
 800b248:	0800b391 	.word	0x0800b391
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68b9      	ldr	r1, [r7, #8]
 800b252:	4618      	mov	r0, r3
 800b254:	f000 fa62 	bl	800b71c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	699a      	ldr	r2, [r3, #24]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f042 0208 	orr.w	r2, r2, #8
 800b266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	699a      	ldr	r2, [r3, #24]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f022 0204 	bic.w	r2, r2, #4
 800b276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	6999      	ldr	r1, [r3, #24]
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	691a      	ldr	r2, [r3, #16]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	430a      	orrs	r2, r1
 800b288:	619a      	str	r2, [r3, #24]
      break;
 800b28a:	e0a3      	b.n	800b3d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68b9      	ldr	r1, [r7, #8]
 800b292:	4618      	mov	r0, r3
 800b294:	f000 fad2 	bl	800b83c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	699a      	ldr	r2, [r3, #24]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	699a      	ldr	r2, [r3, #24]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	6999      	ldr	r1, [r3, #24]
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	021a      	lsls	r2, r3, #8
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	430a      	orrs	r2, r1
 800b2ca:	619a      	str	r2, [r3, #24]
      break;
 800b2cc:	e082      	b.n	800b3d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68b9      	ldr	r1, [r7, #8]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f000 fb3b 	bl	800b950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	69da      	ldr	r2, [r3, #28]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f042 0208 	orr.w	r2, r2, #8
 800b2e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	69da      	ldr	r2, [r3, #28]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f022 0204 	bic.w	r2, r2, #4
 800b2f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	69d9      	ldr	r1, [r3, #28]
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	691a      	ldr	r2, [r3, #16]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	430a      	orrs	r2, r1
 800b30a:	61da      	str	r2, [r3, #28]
      break;
 800b30c:	e062      	b.n	800b3d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68b9      	ldr	r1, [r7, #8]
 800b314:	4618      	mov	r0, r3
 800b316:	f000 fba1 	bl	800ba5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	69da      	ldr	r2, [r3, #28]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	69da      	ldr	r2, [r3, #28]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	69d9      	ldr	r1, [r3, #28]
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	021a      	lsls	r2, r3, #8
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	430a      	orrs	r2, r1
 800b34c:	61da      	str	r2, [r3, #28]
      break;
 800b34e:	e041      	b.n	800b3d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68b9      	ldr	r1, [r7, #8]
 800b356:	4618      	mov	r0, r3
 800b358:	f000 fbe8 	bl	800bb2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f042 0208 	orr.w	r2, r2, #8
 800b36a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f022 0204 	bic.w	r2, r2, #4
 800b37a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	691a      	ldr	r2, [r3, #16]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	430a      	orrs	r2, r1
 800b38c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b38e:	e021      	b.n	800b3d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68b9      	ldr	r1, [r7, #8]
 800b396:	4618      	mov	r0, r3
 800b398:	f000 fc2a 	bl	800bbf0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	021a      	lsls	r2, r3, #8
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	430a      	orrs	r2, r1
 800b3ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b3d0:	e000      	b.n	800b3d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b3d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop

0800b3e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d101      	bne.n	800b400 <HAL_TIM_ConfigClockSource+0x18>
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	e0db      	b.n	800b5b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2202      	movs	r2, #2
 800b40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	4b69      	ldr	r3, [pc, #420]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800b41c:	4013      	ands	r3, r2
 800b41e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b426:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a63      	ldr	r2, [pc, #396]	; (800b5c4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b436:	4293      	cmp	r3, r2
 800b438:	f000 80a9 	beq.w	800b58e <HAL_TIM_ConfigClockSource+0x1a6>
 800b43c:	4a61      	ldr	r2, [pc, #388]	; (800b5c4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	f200 80ae 	bhi.w	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
 800b444:	4a60      	ldr	r2, [pc, #384]	; (800b5c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b446:	4293      	cmp	r3, r2
 800b448:	f000 80a1 	beq.w	800b58e <HAL_TIM_ConfigClockSource+0x1a6>
 800b44c:	4a5e      	ldr	r2, [pc, #376]	; (800b5c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	f200 80a6 	bhi.w	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
 800b454:	4a5d      	ldr	r2, [pc, #372]	; (800b5cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800b456:	4293      	cmp	r3, r2
 800b458:	f000 8099 	beq.w	800b58e <HAL_TIM_ConfigClockSource+0x1a6>
 800b45c:	4a5b      	ldr	r2, [pc, #364]	; (800b5cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	f200 809e 	bhi.w	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
 800b464:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b468:	f000 8091 	beq.w	800b58e <HAL_TIM_ConfigClockSource+0x1a6>
 800b46c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b470:	f200 8096 	bhi.w	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
 800b474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b478:	f000 8089 	beq.w	800b58e <HAL_TIM_ConfigClockSource+0x1a6>
 800b47c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b480:	f200 808e 	bhi.w	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
 800b484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b488:	d03e      	beq.n	800b508 <HAL_TIM_ConfigClockSource+0x120>
 800b48a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b48e:	f200 8087 	bhi.w	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
 800b492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b496:	f000 8085 	beq.w	800b5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b49e:	d87f      	bhi.n	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
 800b4a0:	2b70      	cmp	r3, #112	; 0x70
 800b4a2:	d01a      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0xf2>
 800b4a4:	2b70      	cmp	r3, #112	; 0x70
 800b4a6:	d87b      	bhi.n	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
 800b4a8:	2b60      	cmp	r3, #96	; 0x60
 800b4aa:	d050      	beq.n	800b54e <HAL_TIM_ConfigClockSource+0x166>
 800b4ac:	2b60      	cmp	r3, #96	; 0x60
 800b4ae:	d877      	bhi.n	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
 800b4b0:	2b50      	cmp	r3, #80	; 0x50
 800b4b2:	d03c      	beq.n	800b52e <HAL_TIM_ConfigClockSource+0x146>
 800b4b4:	2b50      	cmp	r3, #80	; 0x50
 800b4b6:	d873      	bhi.n	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
 800b4b8:	2b40      	cmp	r3, #64	; 0x40
 800b4ba:	d058      	beq.n	800b56e <HAL_TIM_ConfigClockSource+0x186>
 800b4bc:	2b40      	cmp	r3, #64	; 0x40
 800b4be:	d86f      	bhi.n	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
 800b4c0:	2b30      	cmp	r3, #48	; 0x30
 800b4c2:	d064      	beq.n	800b58e <HAL_TIM_ConfigClockSource+0x1a6>
 800b4c4:	2b30      	cmp	r3, #48	; 0x30
 800b4c6:	d86b      	bhi.n	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
 800b4c8:	2b20      	cmp	r3, #32
 800b4ca:	d060      	beq.n	800b58e <HAL_TIM_ConfigClockSource+0x1a6>
 800b4cc:	2b20      	cmp	r3, #32
 800b4ce:	d867      	bhi.n	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d05c      	beq.n	800b58e <HAL_TIM_ConfigClockSource+0x1a6>
 800b4d4:	2b10      	cmp	r3, #16
 800b4d6:	d05a      	beq.n	800b58e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b4d8:	e062      	b.n	800b5a0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	6899      	ldr	r1, [r3, #8]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	f000 fc63 	bl	800bdb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	609a      	str	r2, [r3, #8]
      break;
 800b506:	e04e      	b.n	800b5a6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6818      	ldr	r0, [r3, #0]
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	6899      	ldr	r1, [r3, #8]
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	685a      	ldr	r2, [r3, #4]
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	f000 fc4c 	bl	800bdb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	689a      	ldr	r2, [r3, #8]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b52a:	609a      	str	r2, [r3, #8]
      break;
 800b52c:	e03b      	b.n	800b5a6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6818      	ldr	r0, [r3, #0]
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	6859      	ldr	r1, [r3, #4]
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	461a      	mov	r2, r3
 800b53c:	f000 fbbc 	bl	800bcb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2150      	movs	r1, #80	; 0x50
 800b546:	4618      	mov	r0, r3
 800b548:	f000 fc16 	bl	800bd78 <TIM_ITRx_SetConfig>
      break;
 800b54c:	e02b      	b.n	800b5a6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6818      	ldr	r0, [r3, #0]
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	6859      	ldr	r1, [r3, #4]
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	461a      	mov	r2, r3
 800b55c:	f000 fbdb 	bl	800bd16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2160      	movs	r1, #96	; 0x60
 800b566:	4618      	mov	r0, r3
 800b568:	f000 fc06 	bl	800bd78 <TIM_ITRx_SetConfig>
      break;
 800b56c:	e01b      	b.n	800b5a6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	6859      	ldr	r1, [r3, #4]
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	461a      	mov	r2, r3
 800b57c:	f000 fb9c 	bl	800bcb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2140      	movs	r1, #64	; 0x40
 800b586:	4618      	mov	r0, r3
 800b588:	f000 fbf6 	bl	800bd78 <TIM_ITRx_SetConfig>
      break;
 800b58c:	e00b      	b.n	800b5a6 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4619      	mov	r1, r3
 800b598:	4610      	mov	r0, r2
 800b59a:	f000 fbed 	bl	800bd78 <TIM_ITRx_SetConfig>
        break;
 800b59e:	e002      	b.n	800b5a6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800b5a0:	bf00      	nop
 800b5a2:	e000      	b.n	800b5a6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800b5a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	ffceff88 	.word	0xffceff88
 800b5c4:	00100040 	.word	0x00100040
 800b5c8:	00100030 	.word	0x00100030
 800b5cc:	00100020 	.word	0x00100020

0800b5d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a44      	ldr	r2, [pc, #272]	; (800b6f4 <TIM_Base_SetConfig+0x124>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d013      	beq.n	800b610 <TIM_Base_SetConfig+0x40>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ee:	d00f      	beq.n	800b610 <TIM_Base_SetConfig+0x40>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a41      	ldr	r2, [pc, #260]	; (800b6f8 <TIM_Base_SetConfig+0x128>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d00b      	beq.n	800b610 <TIM_Base_SetConfig+0x40>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a40      	ldr	r2, [pc, #256]	; (800b6fc <TIM_Base_SetConfig+0x12c>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d007      	beq.n	800b610 <TIM_Base_SetConfig+0x40>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a3f      	ldr	r2, [pc, #252]	; (800b700 <TIM_Base_SetConfig+0x130>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d003      	beq.n	800b610 <TIM_Base_SetConfig+0x40>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a3e      	ldr	r2, [pc, #248]	; (800b704 <TIM_Base_SetConfig+0x134>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d108      	bne.n	800b622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	4313      	orrs	r3, r2
 800b620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a33      	ldr	r2, [pc, #204]	; (800b6f4 <TIM_Base_SetConfig+0x124>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d027      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b630:	d023      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a30      	ldr	r2, [pc, #192]	; (800b6f8 <TIM_Base_SetConfig+0x128>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d01f      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a2f      	ldr	r2, [pc, #188]	; (800b6fc <TIM_Base_SetConfig+0x12c>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d01b      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a2e      	ldr	r2, [pc, #184]	; (800b700 <TIM_Base_SetConfig+0x130>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d017      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a2d      	ldr	r2, [pc, #180]	; (800b704 <TIM_Base_SetConfig+0x134>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d013      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a2c      	ldr	r2, [pc, #176]	; (800b708 <TIM_Base_SetConfig+0x138>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d00f      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a2b      	ldr	r2, [pc, #172]	; (800b70c <TIM_Base_SetConfig+0x13c>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d00b      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a2a      	ldr	r2, [pc, #168]	; (800b710 <TIM_Base_SetConfig+0x140>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d007      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a29      	ldr	r2, [pc, #164]	; (800b714 <TIM_Base_SetConfig+0x144>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d003      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a28      	ldr	r2, [pc, #160]	; (800b718 <TIM_Base_SetConfig+0x148>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d108      	bne.n	800b68c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	4313      	orrs	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	4313      	orrs	r3, r2
 800b698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	689a      	ldr	r2, [r3, #8]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a10      	ldr	r2, [pc, #64]	; (800b6f4 <TIM_Base_SetConfig+0x124>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d00f      	beq.n	800b6d8 <TIM_Base_SetConfig+0x108>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a12      	ldr	r2, [pc, #72]	; (800b704 <TIM_Base_SetConfig+0x134>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d00b      	beq.n	800b6d8 <TIM_Base_SetConfig+0x108>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a11      	ldr	r2, [pc, #68]	; (800b708 <TIM_Base_SetConfig+0x138>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d007      	beq.n	800b6d8 <TIM_Base_SetConfig+0x108>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a10      	ldr	r2, [pc, #64]	; (800b70c <TIM_Base_SetConfig+0x13c>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d003      	beq.n	800b6d8 <TIM_Base_SetConfig+0x108>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a0f      	ldr	r2, [pc, #60]	; (800b710 <TIM_Base_SetConfig+0x140>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d103      	bne.n	800b6e0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	691a      	ldr	r2, [r3, #16]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	615a      	str	r2, [r3, #20]
}
 800b6e6:	bf00      	nop
 800b6e8:	3714      	adds	r7, #20
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	40010000 	.word	0x40010000
 800b6f8:	40000400 	.word	0x40000400
 800b6fc:	40000800 	.word	0x40000800
 800b700:	40000c00 	.word	0x40000c00
 800b704:	40010400 	.word	0x40010400
 800b708:	40014000 	.word	0x40014000
 800b70c:	40014400 	.word	0x40014400
 800b710:	40014800 	.word	0x40014800
 800b714:	4000e000 	.word	0x4000e000
 800b718:	4000e400 	.word	0x4000e400

0800b71c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	f023 0201 	bic.w	r2, r3, #1
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	4b37      	ldr	r3, [pc, #220]	; (800b824 <TIM_OC1_SetConfig+0x108>)
 800b748:	4013      	ands	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f023 0303 	bic.w	r3, r3, #3
 800b752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f023 0302 	bic.w	r3, r3, #2
 800b764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a2d      	ldr	r2, [pc, #180]	; (800b828 <TIM_OC1_SetConfig+0x10c>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d00f      	beq.n	800b798 <TIM_OC1_SetConfig+0x7c>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a2c      	ldr	r2, [pc, #176]	; (800b82c <TIM_OC1_SetConfig+0x110>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d00b      	beq.n	800b798 <TIM_OC1_SetConfig+0x7c>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a2b      	ldr	r2, [pc, #172]	; (800b830 <TIM_OC1_SetConfig+0x114>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d007      	beq.n	800b798 <TIM_OC1_SetConfig+0x7c>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a2a      	ldr	r2, [pc, #168]	; (800b834 <TIM_OC1_SetConfig+0x118>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d003      	beq.n	800b798 <TIM_OC1_SetConfig+0x7c>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a29      	ldr	r2, [pc, #164]	; (800b838 <TIM_OC1_SetConfig+0x11c>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d10c      	bne.n	800b7b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	f023 0308 	bic.w	r3, r3, #8
 800b79e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	697a      	ldr	r2, [r7, #20]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f023 0304 	bic.w	r3, r3, #4
 800b7b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a1c      	ldr	r2, [pc, #112]	; (800b828 <TIM_OC1_SetConfig+0x10c>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d00f      	beq.n	800b7da <TIM_OC1_SetConfig+0xbe>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a1b      	ldr	r2, [pc, #108]	; (800b82c <TIM_OC1_SetConfig+0x110>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d00b      	beq.n	800b7da <TIM_OC1_SetConfig+0xbe>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a1a      	ldr	r2, [pc, #104]	; (800b830 <TIM_OC1_SetConfig+0x114>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d007      	beq.n	800b7da <TIM_OC1_SetConfig+0xbe>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a19      	ldr	r2, [pc, #100]	; (800b834 <TIM_OC1_SetConfig+0x118>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d003      	beq.n	800b7da <TIM_OC1_SetConfig+0xbe>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a18      	ldr	r2, [pc, #96]	; (800b838 <TIM_OC1_SetConfig+0x11c>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d111      	bne.n	800b7fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b7e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	695b      	ldr	r3, [r3, #20]
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	693a      	ldr	r2, [r7, #16]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	697a      	ldr	r2, [r7, #20]
 800b816:	621a      	str	r2, [r3, #32]
}
 800b818:	bf00      	nop
 800b81a:	371c      	adds	r7, #28
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	fffeff8f 	.word	0xfffeff8f
 800b828:	40010000 	.word	0x40010000
 800b82c:	40010400 	.word	0x40010400
 800b830:	40014000 	.word	0x40014000
 800b834:	40014400 	.word	0x40014400
 800b838:	40014800 	.word	0x40014800

0800b83c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b087      	sub	sp, #28
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a1b      	ldr	r3, [r3, #32]
 800b84a:	f023 0210 	bic.w	r2, r3, #16
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	699b      	ldr	r3, [r3, #24]
 800b862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	4b34      	ldr	r3, [pc, #208]	; (800b938 <TIM_OC2_SetConfig+0xfc>)
 800b868:	4013      	ands	r3, r2
 800b86a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	021b      	lsls	r3, r3, #8
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	f023 0320 	bic.w	r3, r3, #32
 800b886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	011b      	lsls	r3, r3, #4
 800b88e:	697a      	ldr	r2, [r7, #20]
 800b890:	4313      	orrs	r3, r2
 800b892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	4a29      	ldr	r2, [pc, #164]	; (800b93c <TIM_OC2_SetConfig+0x100>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d003      	beq.n	800b8a4 <TIM_OC2_SetConfig+0x68>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4a28      	ldr	r2, [pc, #160]	; (800b940 <TIM_OC2_SetConfig+0x104>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d10d      	bne.n	800b8c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	011b      	lsls	r3, r3, #4
 800b8b2:	697a      	ldr	r2, [r7, #20]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a1e      	ldr	r2, [pc, #120]	; (800b93c <TIM_OC2_SetConfig+0x100>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d00f      	beq.n	800b8e8 <TIM_OC2_SetConfig+0xac>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a1d      	ldr	r2, [pc, #116]	; (800b940 <TIM_OC2_SetConfig+0x104>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d00b      	beq.n	800b8e8 <TIM_OC2_SetConfig+0xac>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a1c      	ldr	r2, [pc, #112]	; (800b944 <TIM_OC2_SetConfig+0x108>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d007      	beq.n	800b8e8 <TIM_OC2_SetConfig+0xac>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a1b      	ldr	r2, [pc, #108]	; (800b948 <TIM_OC2_SetConfig+0x10c>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d003      	beq.n	800b8e8 <TIM_OC2_SetConfig+0xac>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a1a      	ldr	r2, [pc, #104]	; (800b94c <TIM_OC2_SetConfig+0x110>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d113      	bne.n	800b910 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b8ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b8f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	695b      	ldr	r3, [r3, #20]
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	693a      	ldr	r2, [r7, #16]
 800b900:	4313      	orrs	r3, r2
 800b902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	693a      	ldr	r2, [r7, #16]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	693a      	ldr	r2, [r7, #16]
 800b914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	685a      	ldr	r2, [r3, #4]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	697a      	ldr	r2, [r7, #20]
 800b928:	621a      	str	r2, [r3, #32]
}
 800b92a:	bf00      	nop
 800b92c:	371c      	adds	r7, #28
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	feff8fff 	.word	0xfeff8fff
 800b93c:	40010000 	.word	0x40010000
 800b940:	40010400 	.word	0x40010400
 800b944:	40014000 	.word	0x40014000
 800b948:	40014400 	.word	0x40014400
 800b94c:	40014800 	.word	0x40014800

0800b950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b950:	b480      	push	{r7}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a1b      	ldr	r3, [r3, #32]
 800b96a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	69db      	ldr	r3, [r3, #28]
 800b976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f023 0303 	bic.w	r3, r3, #3
 800b986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	4313      	orrs	r3, r2
 800b990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	021b      	lsls	r3, r3, #8
 800b9a0:	697a      	ldr	r2, [r7, #20]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a27      	ldr	r2, [pc, #156]	; (800ba48 <TIM_OC3_SetConfig+0xf8>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d003      	beq.n	800b9b6 <TIM_OC3_SetConfig+0x66>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a26      	ldr	r2, [pc, #152]	; (800ba4c <TIM_OC3_SetConfig+0xfc>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d10d      	bne.n	800b9d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	021b      	lsls	r3, r3, #8
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a1c      	ldr	r2, [pc, #112]	; (800ba48 <TIM_OC3_SetConfig+0xf8>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d00f      	beq.n	800b9fa <TIM_OC3_SetConfig+0xaa>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a1b      	ldr	r2, [pc, #108]	; (800ba4c <TIM_OC3_SetConfig+0xfc>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d00b      	beq.n	800b9fa <TIM_OC3_SetConfig+0xaa>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a1a      	ldr	r2, [pc, #104]	; (800ba50 <TIM_OC3_SetConfig+0x100>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d007      	beq.n	800b9fa <TIM_OC3_SetConfig+0xaa>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a19      	ldr	r2, [pc, #100]	; (800ba54 <TIM_OC3_SetConfig+0x104>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d003      	beq.n	800b9fa <TIM_OC3_SetConfig+0xaa>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a18      	ldr	r2, [pc, #96]	; (800ba58 <TIM_OC3_SetConfig+0x108>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d113      	bne.n	800ba22 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	695b      	ldr	r3, [r3, #20]
 800ba0e:	011b      	lsls	r3, r3, #4
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	699b      	ldr	r3, [r3, #24]
 800ba1a:	011b      	lsls	r3, r3, #4
 800ba1c:	693a      	ldr	r2, [r7, #16]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	697a      	ldr	r2, [r7, #20]
 800ba3a:	621a      	str	r2, [r3, #32]
}
 800ba3c:	bf00      	nop
 800ba3e:	371c      	adds	r7, #28
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	40010000 	.word	0x40010000
 800ba4c:	40010400 	.word	0x40010400
 800ba50:	40014000 	.word	0x40014000
 800ba54:	40014400 	.word	0x40014400
 800ba58:	40014800 	.word	0x40014800

0800ba5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b087      	sub	sp, #28
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a1b      	ldr	r3, [r3, #32]
 800ba76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	69db      	ldr	r3, [r3, #28]
 800ba82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	021b      	lsls	r3, r3, #8
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800baa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	031b      	lsls	r3, r3, #12
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a18      	ldr	r2, [pc, #96]	; (800bb18 <TIM_OC4_SetConfig+0xbc>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d00f      	beq.n	800badc <TIM_OC4_SetConfig+0x80>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a17      	ldr	r2, [pc, #92]	; (800bb1c <TIM_OC4_SetConfig+0xc0>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d00b      	beq.n	800badc <TIM_OC4_SetConfig+0x80>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a16      	ldr	r2, [pc, #88]	; (800bb20 <TIM_OC4_SetConfig+0xc4>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d007      	beq.n	800badc <TIM_OC4_SetConfig+0x80>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a15      	ldr	r2, [pc, #84]	; (800bb24 <TIM_OC4_SetConfig+0xc8>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d003      	beq.n	800badc <TIM_OC4_SetConfig+0x80>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a14      	ldr	r2, [pc, #80]	; (800bb28 <TIM_OC4_SetConfig+0xcc>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d109      	bne.n	800baf0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	019b      	lsls	r3, r3, #6
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	4313      	orrs	r3, r2
 800baee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	685a      	ldr	r2, [r3, #4]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	621a      	str	r2, [r3, #32]
}
 800bb0a:	bf00      	nop
 800bb0c:	371c      	adds	r7, #28
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	40010000 	.word	0x40010000
 800bb1c:	40010400 	.word	0x40010400
 800bb20:	40014000 	.word	0x40014000
 800bb24:	40014400 	.word	0x40014400
 800bb28:	40014800 	.word	0x40014800

0800bb2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a1b      	ldr	r3, [r3, #32]
 800bb46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bb6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	041b      	lsls	r3, r3, #16
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4a17      	ldr	r2, [pc, #92]	; (800bbdc <TIM_OC5_SetConfig+0xb0>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d00f      	beq.n	800bba2 <TIM_OC5_SetConfig+0x76>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	4a16      	ldr	r2, [pc, #88]	; (800bbe0 <TIM_OC5_SetConfig+0xb4>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d00b      	beq.n	800bba2 <TIM_OC5_SetConfig+0x76>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4a15      	ldr	r2, [pc, #84]	; (800bbe4 <TIM_OC5_SetConfig+0xb8>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d007      	beq.n	800bba2 <TIM_OC5_SetConfig+0x76>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	4a14      	ldr	r2, [pc, #80]	; (800bbe8 <TIM_OC5_SetConfig+0xbc>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d003      	beq.n	800bba2 <TIM_OC5_SetConfig+0x76>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	4a13      	ldr	r2, [pc, #76]	; (800bbec <TIM_OC5_SetConfig+0xc0>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d109      	bne.n	800bbb6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bba8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	695b      	ldr	r3, [r3, #20]
 800bbae:	021b      	lsls	r3, r3, #8
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	68fa      	ldr	r2, [r7, #12]
 800bbc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	621a      	str	r2, [r3, #32]
}
 800bbd0:	bf00      	nop
 800bbd2:	371c      	adds	r7, #28
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	40010000 	.word	0x40010000
 800bbe0:	40010400 	.word	0x40010400
 800bbe4:	40014000 	.word	0x40014000
 800bbe8:	40014400 	.word	0x40014400
 800bbec:	40014800 	.word	0x40014800

0800bbf0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	021b      	lsls	r3, r3, #8
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	051b      	lsls	r3, r3, #20
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a18      	ldr	r2, [pc, #96]	; (800bca4 <TIM_OC6_SetConfig+0xb4>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d00f      	beq.n	800bc68 <TIM_OC6_SetConfig+0x78>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a17      	ldr	r2, [pc, #92]	; (800bca8 <TIM_OC6_SetConfig+0xb8>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d00b      	beq.n	800bc68 <TIM_OC6_SetConfig+0x78>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a16      	ldr	r2, [pc, #88]	; (800bcac <TIM_OC6_SetConfig+0xbc>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d007      	beq.n	800bc68 <TIM_OC6_SetConfig+0x78>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a15      	ldr	r2, [pc, #84]	; (800bcb0 <TIM_OC6_SetConfig+0xc0>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d003      	beq.n	800bc68 <TIM_OC6_SetConfig+0x78>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4a14      	ldr	r2, [pc, #80]	; (800bcb4 <TIM_OC6_SetConfig+0xc4>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d109      	bne.n	800bc7c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bc6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	695b      	ldr	r3, [r3, #20]
 800bc74:	029b      	lsls	r3, r3, #10
 800bc76:	697a      	ldr	r2, [r7, #20]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	693a      	ldr	r2, [r7, #16]
 800bc94:	621a      	str	r2, [r3, #32]
}
 800bc96:	bf00      	nop
 800bc98:	371c      	adds	r7, #28
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	40010000 	.word	0x40010000
 800bca8:	40010400 	.word	0x40010400
 800bcac:	40014000 	.word	0x40014000
 800bcb0:	40014400 	.word	0x40014400
 800bcb4:	40014800 	.word	0x40014800

0800bcb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b087      	sub	sp, #28
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6a1b      	ldr	r3, [r3, #32]
 800bcc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6a1b      	ldr	r3, [r3, #32]
 800bcce:	f023 0201 	bic.w	r2, r3, #1
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	011b      	lsls	r3, r3, #4
 800bce8:	693a      	ldr	r2, [r7, #16]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	f023 030a 	bic.w	r3, r3, #10
 800bcf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	693a      	ldr	r2, [r7, #16]
 800bd02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	621a      	str	r2, [r3, #32]
}
 800bd0a:	bf00      	nop
 800bd0c:	371c      	adds	r7, #28
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr

0800bd16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd16:	b480      	push	{r7}
 800bd18:	b087      	sub	sp, #28
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	60f8      	str	r0, [r7, #12]
 800bd1e:	60b9      	str	r1, [r7, #8]
 800bd20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6a1b      	ldr	r3, [r3, #32]
 800bd26:	f023 0210 	bic.w	r2, r3, #16
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6a1b      	ldr	r3, [r3, #32]
 800bd38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	031b      	lsls	r3, r3, #12
 800bd46:	697a      	ldr	r2, [r7, #20]
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bd52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	011b      	lsls	r3, r3, #4
 800bd58:	693a      	ldr	r2, [r7, #16]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	693a      	ldr	r2, [r7, #16]
 800bd68:	621a      	str	r2, [r3, #32]
}
 800bd6a:	bf00      	nop
 800bd6c:	371c      	adds	r7, #28
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
	...

0800bd78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	4b09      	ldr	r3, [pc, #36]	; (800bdb0 <TIM_ITRx_SetConfig+0x38>)
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	f043 0307 	orr.w	r3, r3, #7
 800bd9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	609a      	str	r2, [r3, #8]
}
 800bda2:	bf00      	nop
 800bda4:	3714      	adds	r7, #20
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	ffcfff8f 	.word	0xffcfff8f

0800bdb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
 800bdc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	021a      	lsls	r2, r3, #8
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	431a      	orrs	r2, r3
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	697a      	ldr	r2, [r7, #20]
 800bde6:	609a      	str	r2, [r3, #8]
}
 800bde8:	bf00      	nop
 800bdea:	371c      	adds	r7, #28
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b087      	sub	sp, #28
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	f003 031f 	and.w	r3, r3, #31
 800be06:	2201      	movs	r2, #1
 800be08:	fa02 f303 	lsl.w	r3, r2, r3
 800be0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6a1a      	ldr	r2, [r3, #32]
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	43db      	mvns	r3, r3
 800be16:	401a      	ands	r2, r3
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6a1a      	ldr	r2, [r3, #32]
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	f003 031f 	and.w	r3, r3, #31
 800be26:	6879      	ldr	r1, [r7, #4]
 800be28:	fa01 f303 	lsl.w	r3, r1, r3
 800be2c:	431a      	orrs	r2, r3
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	621a      	str	r2, [r3, #32]
}
 800be32:	bf00      	nop
 800be34:	371c      	adds	r7, #28
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr
	...

0800be40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be50:	2b01      	cmp	r3, #1
 800be52:	d101      	bne.n	800be58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be54:	2302      	movs	r3, #2
 800be56:	e077      	b.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2201      	movs	r2, #1
 800be5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2202      	movs	r2, #2
 800be64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a35      	ldr	r2, [pc, #212]	; (800bf54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d004      	beq.n	800be8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a34      	ldr	r2, [pc, #208]	; (800bf58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d108      	bne.n	800be9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800be92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bea4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	4313      	orrs	r3, r2
 800beae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a25      	ldr	r2, [pc, #148]	; (800bf54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d02c      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beca:	d027      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a22      	ldr	r2, [pc, #136]	; (800bf5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d022      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a21      	ldr	r2, [pc, #132]	; (800bf60 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d01d      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a1f      	ldr	r2, [pc, #124]	; (800bf64 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d018      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a1a      	ldr	r2, [pc, #104]	; (800bf58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d013      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a1b      	ldr	r2, [pc, #108]	; (800bf68 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d00e      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a1a      	ldr	r2, [pc, #104]	; (800bf6c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d009      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a18      	ldr	r2, [pc, #96]	; (800bf70 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d004      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a17      	ldr	r2, [pc, #92]	; (800bf74 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d10c      	bne.n	800bf36 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	40010000 	.word	0x40010000
 800bf58:	40010400 	.word	0x40010400
 800bf5c:	40000400 	.word	0x40000400
 800bf60:	40000800 	.word	0x40000800
 800bf64:	40000c00 	.word	0x40000c00
 800bf68:	40001800 	.word	0x40001800
 800bf6c:	40014000 	.word	0x40014000
 800bf70:	4000e000 	.word	0x4000e000
 800bf74:	4000e400 	.word	0x4000e400

0800bf78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d101      	bne.n	800bf8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	e042      	b.n	800c010 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d106      	bne.n	800bfa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f7f5 fff9 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2224      	movs	r2, #36	; 0x24
 800bfa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f022 0201 	bic.w	r2, r2, #1
 800bfb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f8c2 	bl	800c144 <UART_SetConfig>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d101      	bne.n	800bfca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e022      	b.n	800c010 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d002      	beq.n	800bfd8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 ff14 	bl	800ce00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bfe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	689a      	ldr	r2, [r3, #8]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f042 0201 	orr.w	r2, r2, #1
 800c006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 ff9b 	bl	800cf44 <UART_CheckIdleState>
 800c00e:	4603      	mov	r3, r0
}
 800c010:	4618      	mov	r0, r3
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08a      	sub	sp, #40	; 0x28
 800c01c:	af02      	add	r7, sp, #8
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	603b      	str	r3, [r7, #0]
 800c024:	4613      	mov	r3, r2
 800c026:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c02e:	2b20      	cmp	r3, #32
 800c030:	f040 8083 	bne.w	800c13a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d002      	beq.n	800c040 <HAL_UART_Transmit+0x28>
 800c03a:	88fb      	ldrh	r3, [r7, #6]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d101      	bne.n	800c044 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c040:	2301      	movs	r3, #1
 800c042:	e07b      	b.n	800c13c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d101      	bne.n	800c052 <HAL_UART_Transmit+0x3a>
 800c04e:	2302      	movs	r3, #2
 800c050:	e074      	b.n	800c13c <HAL_UART_Transmit+0x124>
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2201      	movs	r2, #1
 800c056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2200      	movs	r2, #0
 800c05e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2221      	movs	r2, #33	; 0x21
 800c066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c06a:	f7f6 f8a9 	bl	80021c0 <HAL_GetTick>
 800c06e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	88fa      	ldrh	r2, [r7, #6]
 800c074:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	88fa      	ldrh	r2, [r7, #6]
 800c07c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c088:	d108      	bne.n	800c09c <HAL_UART_Transmit+0x84>
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d104      	bne.n	800c09c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c092:	2300      	movs	r3, #0
 800c094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	61bb      	str	r3, [r7, #24]
 800c09a:	e003      	b.n	800c0a4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c0ac:	e02c      	b.n	800c108 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	9300      	str	r3, [sp, #0]
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2180      	movs	r1, #128	; 0x80
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f000 ff8e 	bl	800cfda <UART_WaitOnFlagUntilTimeout>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d001      	beq.n	800c0c8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c0c4:	2303      	movs	r3, #3
 800c0c6:	e039      	b.n	800c13c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10b      	bne.n	800c0e6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	881b      	ldrh	r3, [r3, #0]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	3302      	adds	r3, #2
 800c0e2:	61bb      	str	r3, [r7, #24]
 800c0e4:	e007      	b.n	800c0f6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	781a      	ldrb	r2, [r3, #0]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	3b01      	subs	r3, #1
 800c100:	b29a      	uxth	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c10e:	b29b      	uxth	r3, r3
 800c110:	2b00      	cmp	r3, #0
 800c112:	d1cc      	bne.n	800c0ae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	2200      	movs	r2, #0
 800c11c:	2140      	movs	r1, #64	; 0x40
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f000 ff5b 	bl	800cfda <UART_WaitOnFlagUntilTimeout>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d001      	beq.n	800c12e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c12a:	2303      	movs	r3, #3
 800c12c:	e006      	b.n	800c13c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2220      	movs	r2, #32
 800c132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c136:	2300      	movs	r3, #0
 800c138:	e000      	b.n	800c13c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c13a:	2302      	movs	r3, #2
  }
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3720      	adds	r7, #32
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c144:	b5b0      	push	{r4, r5, r7, lr}
 800c146:	b08e      	sub	sp, #56	; 0x38
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	689a      	ldr	r2, [r3, #8]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	431a      	orrs	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	431a      	orrs	r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	4313      	orrs	r3, r2
 800c168:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	4bbf      	ldr	r3, [pc, #764]	; (800c470 <UART_SetConfig+0x32c>)
 800c172:	4013      	ands	r3, r2
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	6812      	ldr	r2, [r2, #0]
 800c178:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c17a:	430b      	orrs	r3, r1
 800c17c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	68da      	ldr	r2, [r3, #12]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	430a      	orrs	r2, r1
 800c192:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	699b      	ldr	r3, [r3, #24]
 800c198:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4ab5      	ldr	r2, [pc, #724]	; (800c474 <UART_SetConfig+0x330>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d004      	beq.n	800c1ae <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a1b      	ldr	r3, [r3, #32]
 800c1a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	689a      	ldr	r2, [r3, #8]
 800c1b4:	4bb0      	ldr	r3, [pc, #704]	; (800c478 <UART_SetConfig+0x334>)
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	6812      	ldr	r2, [r2, #0]
 800c1bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c1be:	430b      	orrs	r3, r1
 800c1c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c8:	f023 010f 	bic.w	r1, r3, #15
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	430a      	orrs	r2, r1
 800c1d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4aa7      	ldr	r2, [pc, #668]	; (800c47c <UART_SetConfig+0x338>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d176      	bne.n	800c2d0 <UART_SetConfig+0x18c>
 800c1e2:	4ba7      	ldr	r3, [pc, #668]	; (800c480 <UART_SetConfig+0x33c>)
 800c1e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1ea:	2b28      	cmp	r3, #40	; 0x28
 800c1ec:	d86c      	bhi.n	800c2c8 <UART_SetConfig+0x184>
 800c1ee:	a201      	add	r2, pc, #4	; (adr r2, 800c1f4 <UART_SetConfig+0xb0>)
 800c1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f4:	0800c299 	.word	0x0800c299
 800c1f8:	0800c2c9 	.word	0x0800c2c9
 800c1fc:	0800c2c9 	.word	0x0800c2c9
 800c200:	0800c2c9 	.word	0x0800c2c9
 800c204:	0800c2c9 	.word	0x0800c2c9
 800c208:	0800c2c9 	.word	0x0800c2c9
 800c20c:	0800c2c9 	.word	0x0800c2c9
 800c210:	0800c2c9 	.word	0x0800c2c9
 800c214:	0800c2a1 	.word	0x0800c2a1
 800c218:	0800c2c9 	.word	0x0800c2c9
 800c21c:	0800c2c9 	.word	0x0800c2c9
 800c220:	0800c2c9 	.word	0x0800c2c9
 800c224:	0800c2c9 	.word	0x0800c2c9
 800c228:	0800c2c9 	.word	0x0800c2c9
 800c22c:	0800c2c9 	.word	0x0800c2c9
 800c230:	0800c2c9 	.word	0x0800c2c9
 800c234:	0800c2a9 	.word	0x0800c2a9
 800c238:	0800c2c9 	.word	0x0800c2c9
 800c23c:	0800c2c9 	.word	0x0800c2c9
 800c240:	0800c2c9 	.word	0x0800c2c9
 800c244:	0800c2c9 	.word	0x0800c2c9
 800c248:	0800c2c9 	.word	0x0800c2c9
 800c24c:	0800c2c9 	.word	0x0800c2c9
 800c250:	0800c2c9 	.word	0x0800c2c9
 800c254:	0800c2b1 	.word	0x0800c2b1
 800c258:	0800c2c9 	.word	0x0800c2c9
 800c25c:	0800c2c9 	.word	0x0800c2c9
 800c260:	0800c2c9 	.word	0x0800c2c9
 800c264:	0800c2c9 	.word	0x0800c2c9
 800c268:	0800c2c9 	.word	0x0800c2c9
 800c26c:	0800c2c9 	.word	0x0800c2c9
 800c270:	0800c2c9 	.word	0x0800c2c9
 800c274:	0800c2b9 	.word	0x0800c2b9
 800c278:	0800c2c9 	.word	0x0800c2c9
 800c27c:	0800c2c9 	.word	0x0800c2c9
 800c280:	0800c2c9 	.word	0x0800c2c9
 800c284:	0800c2c9 	.word	0x0800c2c9
 800c288:	0800c2c9 	.word	0x0800c2c9
 800c28c:	0800c2c9 	.word	0x0800c2c9
 800c290:	0800c2c9 	.word	0x0800c2c9
 800c294:	0800c2c1 	.word	0x0800c2c1
 800c298:	2301      	movs	r3, #1
 800c29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c29e:	e326      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c2a0:	2304      	movs	r3, #4
 800c2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2a6:	e322      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c2a8:	2308      	movs	r3, #8
 800c2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ae:	e31e      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c2b0:	2310      	movs	r3, #16
 800c2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2b6:	e31a      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c2b8:	2320      	movs	r3, #32
 800c2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2be:	e316      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c2c0:	2340      	movs	r3, #64	; 0x40
 800c2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2c6:	e312      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c2c8:	2380      	movs	r3, #128	; 0x80
 800c2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ce:	e30e      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a6b      	ldr	r2, [pc, #428]	; (800c484 <UART_SetConfig+0x340>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d130      	bne.n	800c33c <UART_SetConfig+0x1f8>
 800c2da:	4b69      	ldr	r3, [pc, #420]	; (800c480 <UART_SetConfig+0x33c>)
 800c2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2de:	f003 0307 	and.w	r3, r3, #7
 800c2e2:	2b05      	cmp	r3, #5
 800c2e4:	d826      	bhi.n	800c334 <UART_SetConfig+0x1f0>
 800c2e6:	a201      	add	r2, pc, #4	; (adr r2, 800c2ec <UART_SetConfig+0x1a8>)
 800c2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ec:	0800c305 	.word	0x0800c305
 800c2f0:	0800c30d 	.word	0x0800c30d
 800c2f4:	0800c315 	.word	0x0800c315
 800c2f8:	0800c31d 	.word	0x0800c31d
 800c2fc:	0800c325 	.word	0x0800c325
 800c300:	0800c32d 	.word	0x0800c32d
 800c304:	2300      	movs	r3, #0
 800c306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c30a:	e2f0      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c30c:	2304      	movs	r3, #4
 800c30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c312:	e2ec      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c314:	2308      	movs	r3, #8
 800c316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c31a:	e2e8      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c31c:	2310      	movs	r3, #16
 800c31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c322:	e2e4      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c324:	2320      	movs	r3, #32
 800c326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c32a:	e2e0      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c32c:	2340      	movs	r3, #64	; 0x40
 800c32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c332:	e2dc      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c334:	2380      	movs	r3, #128	; 0x80
 800c336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c33a:	e2d8      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a51      	ldr	r2, [pc, #324]	; (800c488 <UART_SetConfig+0x344>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d130      	bne.n	800c3a8 <UART_SetConfig+0x264>
 800c346:	4b4e      	ldr	r3, [pc, #312]	; (800c480 <UART_SetConfig+0x33c>)
 800c348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c34a:	f003 0307 	and.w	r3, r3, #7
 800c34e:	2b05      	cmp	r3, #5
 800c350:	d826      	bhi.n	800c3a0 <UART_SetConfig+0x25c>
 800c352:	a201      	add	r2, pc, #4	; (adr r2, 800c358 <UART_SetConfig+0x214>)
 800c354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c358:	0800c371 	.word	0x0800c371
 800c35c:	0800c379 	.word	0x0800c379
 800c360:	0800c381 	.word	0x0800c381
 800c364:	0800c389 	.word	0x0800c389
 800c368:	0800c391 	.word	0x0800c391
 800c36c:	0800c399 	.word	0x0800c399
 800c370:	2300      	movs	r3, #0
 800c372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c376:	e2ba      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c378:	2304      	movs	r3, #4
 800c37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c37e:	e2b6      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c380:	2308      	movs	r3, #8
 800c382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c386:	e2b2      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c388:	2310      	movs	r3, #16
 800c38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c38e:	e2ae      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c390:	2320      	movs	r3, #32
 800c392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c396:	e2aa      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c398:	2340      	movs	r3, #64	; 0x40
 800c39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c39e:	e2a6      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c3a0:	2380      	movs	r3, #128	; 0x80
 800c3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3a6:	e2a2      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a37      	ldr	r2, [pc, #220]	; (800c48c <UART_SetConfig+0x348>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d130      	bne.n	800c414 <UART_SetConfig+0x2d0>
 800c3b2:	4b33      	ldr	r3, [pc, #204]	; (800c480 <UART_SetConfig+0x33c>)
 800c3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3b6:	f003 0307 	and.w	r3, r3, #7
 800c3ba:	2b05      	cmp	r3, #5
 800c3bc:	d826      	bhi.n	800c40c <UART_SetConfig+0x2c8>
 800c3be:	a201      	add	r2, pc, #4	; (adr r2, 800c3c4 <UART_SetConfig+0x280>)
 800c3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c4:	0800c3dd 	.word	0x0800c3dd
 800c3c8:	0800c3e5 	.word	0x0800c3e5
 800c3cc:	0800c3ed 	.word	0x0800c3ed
 800c3d0:	0800c3f5 	.word	0x0800c3f5
 800c3d4:	0800c3fd 	.word	0x0800c3fd
 800c3d8:	0800c405 	.word	0x0800c405
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3e2:	e284      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c3e4:	2304      	movs	r3, #4
 800c3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ea:	e280      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c3ec:	2308      	movs	r3, #8
 800c3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3f2:	e27c      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c3f4:	2310      	movs	r3, #16
 800c3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3fa:	e278      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c3fc:	2320      	movs	r3, #32
 800c3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c402:	e274      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c404:	2340      	movs	r3, #64	; 0x40
 800c406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c40a:	e270      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c40c:	2380      	movs	r3, #128	; 0x80
 800c40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c412:	e26c      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a1d      	ldr	r2, [pc, #116]	; (800c490 <UART_SetConfig+0x34c>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d142      	bne.n	800c4a4 <UART_SetConfig+0x360>
 800c41e:	4b18      	ldr	r3, [pc, #96]	; (800c480 <UART_SetConfig+0x33c>)
 800c420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c422:	f003 0307 	and.w	r3, r3, #7
 800c426:	2b05      	cmp	r3, #5
 800c428:	d838      	bhi.n	800c49c <UART_SetConfig+0x358>
 800c42a:	a201      	add	r2, pc, #4	; (adr r2, 800c430 <UART_SetConfig+0x2ec>)
 800c42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c430:	0800c449 	.word	0x0800c449
 800c434:	0800c451 	.word	0x0800c451
 800c438:	0800c459 	.word	0x0800c459
 800c43c:	0800c461 	.word	0x0800c461
 800c440:	0800c469 	.word	0x0800c469
 800c444:	0800c495 	.word	0x0800c495
 800c448:	2300      	movs	r3, #0
 800c44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c44e:	e24e      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c450:	2304      	movs	r3, #4
 800c452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c456:	e24a      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c458:	2308      	movs	r3, #8
 800c45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c45e:	e246      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c460:	2310      	movs	r3, #16
 800c462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c466:	e242      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c468:	2320      	movs	r3, #32
 800c46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c46e:	e23e      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c470:	cfff69f3 	.word	0xcfff69f3
 800c474:	58000c00 	.word	0x58000c00
 800c478:	11fff4ff 	.word	0x11fff4ff
 800c47c:	40011000 	.word	0x40011000
 800c480:	58024400 	.word	0x58024400
 800c484:	40004400 	.word	0x40004400
 800c488:	40004800 	.word	0x40004800
 800c48c:	40004c00 	.word	0x40004c00
 800c490:	40005000 	.word	0x40005000
 800c494:	2340      	movs	r3, #64	; 0x40
 800c496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c49a:	e228      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c49c:	2380      	movs	r3, #128	; 0x80
 800c49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4a2:	e224      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4ab1      	ldr	r2, [pc, #708]	; (800c770 <UART_SetConfig+0x62c>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d176      	bne.n	800c59c <UART_SetConfig+0x458>
 800c4ae:	4bb1      	ldr	r3, [pc, #708]	; (800c774 <UART_SetConfig+0x630>)
 800c4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4b6:	2b28      	cmp	r3, #40	; 0x28
 800c4b8:	d86c      	bhi.n	800c594 <UART_SetConfig+0x450>
 800c4ba:	a201      	add	r2, pc, #4	; (adr r2, 800c4c0 <UART_SetConfig+0x37c>)
 800c4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c0:	0800c565 	.word	0x0800c565
 800c4c4:	0800c595 	.word	0x0800c595
 800c4c8:	0800c595 	.word	0x0800c595
 800c4cc:	0800c595 	.word	0x0800c595
 800c4d0:	0800c595 	.word	0x0800c595
 800c4d4:	0800c595 	.word	0x0800c595
 800c4d8:	0800c595 	.word	0x0800c595
 800c4dc:	0800c595 	.word	0x0800c595
 800c4e0:	0800c56d 	.word	0x0800c56d
 800c4e4:	0800c595 	.word	0x0800c595
 800c4e8:	0800c595 	.word	0x0800c595
 800c4ec:	0800c595 	.word	0x0800c595
 800c4f0:	0800c595 	.word	0x0800c595
 800c4f4:	0800c595 	.word	0x0800c595
 800c4f8:	0800c595 	.word	0x0800c595
 800c4fc:	0800c595 	.word	0x0800c595
 800c500:	0800c575 	.word	0x0800c575
 800c504:	0800c595 	.word	0x0800c595
 800c508:	0800c595 	.word	0x0800c595
 800c50c:	0800c595 	.word	0x0800c595
 800c510:	0800c595 	.word	0x0800c595
 800c514:	0800c595 	.word	0x0800c595
 800c518:	0800c595 	.word	0x0800c595
 800c51c:	0800c595 	.word	0x0800c595
 800c520:	0800c57d 	.word	0x0800c57d
 800c524:	0800c595 	.word	0x0800c595
 800c528:	0800c595 	.word	0x0800c595
 800c52c:	0800c595 	.word	0x0800c595
 800c530:	0800c595 	.word	0x0800c595
 800c534:	0800c595 	.word	0x0800c595
 800c538:	0800c595 	.word	0x0800c595
 800c53c:	0800c595 	.word	0x0800c595
 800c540:	0800c585 	.word	0x0800c585
 800c544:	0800c595 	.word	0x0800c595
 800c548:	0800c595 	.word	0x0800c595
 800c54c:	0800c595 	.word	0x0800c595
 800c550:	0800c595 	.word	0x0800c595
 800c554:	0800c595 	.word	0x0800c595
 800c558:	0800c595 	.word	0x0800c595
 800c55c:	0800c595 	.word	0x0800c595
 800c560:	0800c58d 	.word	0x0800c58d
 800c564:	2301      	movs	r3, #1
 800c566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c56a:	e1c0      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c56c:	2304      	movs	r3, #4
 800c56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c572:	e1bc      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c574:	2308      	movs	r3, #8
 800c576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c57a:	e1b8      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c57c:	2310      	movs	r3, #16
 800c57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c582:	e1b4      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c584:	2320      	movs	r3, #32
 800c586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c58a:	e1b0      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c58c:	2340      	movs	r3, #64	; 0x40
 800c58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c592:	e1ac      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c594:	2380      	movs	r3, #128	; 0x80
 800c596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c59a:	e1a8      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a75      	ldr	r2, [pc, #468]	; (800c778 <UART_SetConfig+0x634>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d130      	bne.n	800c608 <UART_SetConfig+0x4c4>
 800c5a6:	4b73      	ldr	r3, [pc, #460]	; (800c774 <UART_SetConfig+0x630>)
 800c5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5aa:	f003 0307 	and.w	r3, r3, #7
 800c5ae:	2b05      	cmp	r3, #5
 800c5b0:	d826      	bhi.n	800c600 <UART_SetConfig+0x4bc>
 800c5b2:	a201      	add	r2, pc, #4	; (adr r2, 800c5b8 <UART_SetConfig+0x474>)
 800c5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b8:	0800c5d1 	.word	0x0800c5d1
 800c5bc:	0800c5d9 	.word	0x0800c5d9
 800c5c0:	0800c5e1 	.word	0x0800c5e1
 800c5c4:	0800c5e9 	.word	0x0800c5e9
 800c5c8:	0800c5f1 	.word	0x0800c5f1
 800c5cc:	0800c5f9 	.word	0x0800c5f9
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5d6:	e18a      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c5d8:	2304      	movs	r3, #4
 800c5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5de:	e186      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c5e0:	2308      	movs	r3, #8
 800c5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5e6:	e182      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c5e8:	2310      	movs	r3, #16
 800c5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ee:	e17e      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c5f0:	2320      	movs	r3, #32
 800c5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5f6:	e17a      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c5f8:	2340      	movs	r3, #64	; 0x40
 800c5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5fe:	e176      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c600:	2380      	movs	r3, #128	; 0x80
 800c602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c606:	e172      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a5b      	ldr	r2, [pc, #364]	; (800c77c <UART_SetConfig+0x638>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d130      	bne.n	800c674 <UART_SetConfig+0x530>
 800c612:	4b58      	ldr	r3, [pc, #352]	; (800c774 <UART_SetConfig+0x630>)
 800c614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c616:	f003 0307 	and.w	r3, r3, #7
 800c61a:	2b05      	cmp	r3, #5
 800c61c:	d826      	bhi.n	800c66c <UART_SetConfig+0x528>
 800c61e:	a201      	add	r2, pc, #4	; (adr r2, 800c624 <UART_SetConfig+0x4e0>)
 800c620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c624:	0800c63d 	.word	0x0800c63d
 800c628:	0800c645 	.word	0x0800c645
 800c62c:	0800c64d 	.word	0x0800c64d
 800c630:	0800c655 	.word	0x0800c655
 800c634:	0800c65d 	.word	0x0800c65d
 800c638:	0800c665 	.word	0x0800c665
 800c63c:	2300      	movs	r3, #0
 800c63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c642:	e154      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c644:	2304      	movs	r3, #4
 800c646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c64a:	e150      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c64c:	2308      	movs	r3, #8
 800c64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c652:	e14c      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c654:	2310      	movs	r3, #16
 800c656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c65a:	e148      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c65c:	2320      	movs	r3, #32
 800c65e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c662:	e144      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c664:	2340      	movs	r3, #64	; 0x40
 800c666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c66a:	e140      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c66c:	2380      	movs	r3, #128	; 0x80
 800c66e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c672:	e13c      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a41      	ldr	r2, [pc, #260]	; (800c780 <UART_SetConfig+0x63c>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	f040 8082 	bne.w	800c784 <UART_SetConfig+0x640>
 800c680:	4b3c      	ldr	r3, [pc, #240]	; (800c774 <UART_SetConfig+0x630>)
 800c682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c684:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c688:	2b28      	cmp	r3, #40	; 0x28
 800c68a:	d86d      	bhi.n	800c768 <UART_SetConfig+0x624>
 800c68c:	a201      	add	r2, pc, #4	; (adr r2, 800c694 <UART_SetConfig+0x550>)
 800c68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c692:	bf00      	nop
 800c694:	0800c739 	.word	0x0800c739
 800c698:	0800c769 	.word	0x0800c769
 800c69c:	0800c769 	.word	0x0800c769
 800c6a0:	0800c769 	.word	0x0800c769
 800c6a4:	0800c769 	.word	0x0800c769
 800c6a8:	0800c769 	.word	0x0800c769
 800c6ac:	0800c769 	.word	0x0800c769
 800c6b0:	0800c769 	.word	0x0800c769
 800c6b4:	0800c741 	.word	0x0800c741
 800c6b8:	0800c769 	.word	0x0800c769
 800c6bc:	0800c769 	.word	0x0800c769
 800c6c0:	0800c769 	.word	0x0800c769
 800c6c4:	0800c769 	.word	0x0800c769
 800c6c8:	0800c769 	.word	0x0800c769
 800c6cc:	0800c769 	.word	0x0800c769
 800c6d0:	0800c769 	.word	0x0800c769
 800c6d4:	0800c749 	.word	0x0800c749
 800c6d8:	0800c769 	.word	0x0800c769
 800c6dc:	0800c769 	.word	0x0800c769
 800c6e0:	0800c769 	.word	0x0800c769
 800c6e4:	0800c769 	.word	0x0800c769
 800c6e8:	0800c769 	.word	0x0800c769
 800c6ec:	0800c769 	.word	0x0800c769
 800c6f0:	0800c769 	.word	0x0800c769
 800c6f4:	0800c751 	.word	0x0800c751
 800c6f8:	0800c769 	.word	0x0800c769
 800c6fc:	0800c769 	.word	0x0800c769
 800c700:	0800c769 	.word	0x0800c769
 800c704:	0800c769 	.word	0x0800c769
 800c708:	0800c769 	.word	0x0800c769
 800c70c:	0800c769 	.word	0x0800c769
 800c710:	0800c769 	.word	0x0800c769
 800c714:	0800c759 	.word	0x0800c759
 800c718:	0800c769 	.word	0x0800c769
 800c71c:	0800c769 	.word	0x0800c769
 800c720:	0800c769 	.word	0x0800c769
 800c724:	0800c769 	.word	0x0800c769
 800c728:	0800c769 	.word	0x0800c769
 800c72c:	0800c769 	.word	0x0800c769
 800c730:	0800c769 	.word	0x0800c769
 800c734:	0800c761 	.word	0x0800c761
 800c738:	2301      	movs	r3, #1
 800c73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c73e:	e0d6      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c740:	2304      	movs	r3, #4
 800c742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c746:	e0d2      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c748:	2308      	movs	r3, #8
 800c74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c74e:	e0ce      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c750:	2310      	movs	r3, #16
 800c752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c756:	e0ca      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c758:	2320      	movs	r3, #32
 800c75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c75e:	e0c6      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c760:	2340      	movs	r3, #64	; 0x40
 800c762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c766:	e0c2      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c768:	2380      	movs	r3, #128	; 0x80
 800c76a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c76e:	e0be      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c770:	40011400 	.word	0x40011400
 800c774:	58024400 	.word	0x58024400
 800c778:	40007800 	.word	0x40007800
 800c77c:	40007c00 	.word	0x40007c00
 800c780:	40011800 	.word	0x40011800
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4aad      	ldr	r2, [pc, #692]	; (800ca40 <UART_SetConfig+0x8fc>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d176      	bne.n	800c87c <UART_SetConfig+0x738>
 800c78e:	4bad      	ldr	r3, [pc, #692]	; (800ca44 <UART_SetConfig+0x900>)
 800c790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c796:	2b28      	cmp	r3, #40	; 0x28
 800c798:	d86c      	bhi.n	800c874 <UART_SetConfig+0x730>
 800c79a:	a201      	add	r2, pc, #4	; (adr r2, 800c7a0 <UART_SetConfig+0x65c>)
 800c79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a0:	0800c845 	.word	0x0800c845
 800c7a4:	0800c875 	.word	0x0800c875
 800c7a8:	0800c875 	.word	0x0800c875
 800c7ac:	0800c875 	.word	0x0800c875
 800c7b0:	0800c875 	.word	0x0800c875
 800c7b4:	0800c875 	.word	0x0800c875
 800c7b8:	0800c875 	.word	0x0800c875
 800c7bc:	0800c875 	.word	0x0800c875
 800c7c0:	0800c84d 	.word	0x0800c84d
 800c7c4:	0800c875 	.word	0x0800c875
 800c7c8:	0800c875 	.word	0x0800c875
 800c7cc:	0800c875 	.word	0x0800c875
 800c7d0:	0800c875 	.word	0x0800c875
 800c7d4:	0800c875 	.word	0x0800c875
 800c7d8:	0800c875 	.word	0x0800c875
 800c7dc:	0800c875 	.word	0x0800c875
 800c7e0:	0800c855 	.word	0x0800c855
 800c7e4:	0800c875 	.word	0x0800c875
 800c7e8:	0800c875 	.word	0x0800c875
 800c7ec:	0800c875 	.word	0x0800c875
 800c7f0:	0800c875 	.word	0x0800c875
 800c7f4:	0800c875 	.word	0x0800c875
 800c7f8:	0800c875 	.word	0x0800c875
 800c7fc:	0800c875 	.word	0x0800c875
 800c800:	0800c85d 	.word	0x0800c85d
 800c804:	0800c875 	.word	0x0800c875
 800c808:	0800c875 	.word	0x0800c875
 800c80c:	0800c875 	.word	0x0800c875
 800c810:	0800c875 	.word	0x0800c875
 800c814:	0800c875 	.word	0x0800c875
 800c818:	0800c875 	.word	0x0800c875
 800c81c:	0800c875 	.word	0x0800c875
 800c820:	0800c865 	.word	0x0800c865
 800c824:	0800c875 	.word	0x0800c875
 800c828:	0800c875 	.word	0x0800c875
 800c82c:	0800c875 	.word	0x0800c875
 800c830:	0800c875 	.word	0x0800c875
 800c834:	0800c875 	.word	0x0800c875
 800c838:	0800c875 	.word	0x0800c875
 800c83c:	0800c875 	.word	0x0800c875
 800c840:	0800c86d 	.word	0x0800c86d
 800c844:	2301      	movs	r3, #1
 800c846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c84a:	e050      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c84c:	2304      	movs	r3, #4
 800c84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c852:	e04c      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c854:	2308      	movs	r3, #8
 800c856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c85a:	e048      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c85c:	2310      	movs	r3, #16
 800c85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c862:	e044      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c864:	2320      	movs	r3, #32
 800c866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c86a:	e040      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c86c:	2340      	movs	r3, #64	; 0x40
 800c86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c872:	e03c      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c874:	2380      	movs	r3, #128	; 0x80
 800c876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c87a:	e038      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a71      	ldr	r2, [pc, #452]	; (800ca48 <UART_SetConfig+0x904>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d130      	bne.n	800c8e8 <UART_SetConfig+0x7a4>
 800c886:	4b6f      	ldr	r3, [pc, #444]	; (800ca44 <UART_SetConfig+0x900>)
 800c888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c88a:	f003 0307 	and.w	r3, r3, #7
 800c88e:	2b05      	cmp	r3, #5
 800c890:	d826      	bhi.n	800c8e0 <UART_SetConfig+0x79c>
 800c892:	a201      	add	r2, pc, #4	; (adr r2, 800c898 <UART_SetConfig+0x754>)
 800c894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c898:	0800c8b1 	.word	0x0800c8b1
 800c89c:	0800c8b9 	.word	0x0800c8b9
 800c8a0:	0800c8c1 	.word	0x0800c8c1
 800c8a4:	0800c8c9 	.word	0x0800c8c9
 800c8a8:	0800c8d1 	.word	0x0800c8d1
 800c8ac:	0800c8d9 	.word	0x0800c8d9
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8b6:	e01a      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c8b8:	2304      	movs	r3, #4
 800c8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8be:	e016      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c8c0:	2308      	movs	r3, #8
 800c8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8c6:	e012      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c8c8:	2310      	movs	r3, #16
 800c8ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ce:	e00e      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c8d0:	2320      	movs	r3, #32
 800c8d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8d6:	e00a      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c8d8:	2340      	movs	r3, #64	; 0x40
 800c8da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8de:	e006      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c8e0:	2380      	movs	r3, #128	; 0x80
 800c8e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8e6:	e002      	b.n	800c8ee <UART_SetConfig+0x7aa>
 800c8e8:	2380      	movs	r3, #128	; 0x80
 800c8ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a55      	ldr	r2, [pc, #340]	; (800ca48 <UART_SetConfig+0x904>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	f040 80f0 	bne.w	800cada <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c8fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c8fe:	2b20      	cmp	r3, #32
 800c900:	dc46      	bgt.n	800c990 <UART_SetConfig+0x84c>
 800c902:	2b02      	cmp	r3, #2
 800c904:	db75      	blt.n	800c9f2 <UART_SetConfig+0x8ae>
 800c906:	3b02      	subs	r3, #2
 800c908:	2b1e      	cmp	r3, #30
 800c90a:	d872      	bhi.n	800c9f2 <UART_SetConfig+0x8ae>
 800c90c:	a201      	add	r2, pc, #4	; (adr r2, 800c914 <UART_SetConfig+0x7d0>)
 800c90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c912:	bf00      	nop
 800c914:	0800c997 	.word	0x0800c997
 800c918:	0800c9f3 	.word	0x0800c9f3
 800c91c:	0800c99f 	.word	0x0800c99f
 800c920:	0800c9f3 	.word	0x0800c9f3
 800c924:	0800c9f3 	.word	0x0800c9f3
 800c928:	0800c9f3 	.word	0x0800c9f3
 800c92c:	0800c9af 	.word	0x0800c9af
 800c930:	0800c9f3 	.word	0x0800c9f3
 800c934:	0800c9f3 	.word	0x0800c9f3
 800c938:	0800c9f3 	.word	0x0800c9f3
 800c93c:	0800c9f3 	.word	0x0800c9f3
 800c940:	0800c9f3 	.word	0x0800c9f3
 800c944:	0800c9f3 	.word	0x0800c9f3
 800c948:	0800c9f3 	.word	0x0800c9f3
 800c94c:	0800c9bf 	.word	0x0800c9bf
 800c950:	0800c9f3 	.word	0x0800c9f3
 800c954:	0800c9f3 	.word	0x0800c9f3
 800c958:	0800c9f3 	.word	0x0800c9f3
 800c95c:	0800c9f3 	.word	0x0800c9f3
 800c960:	0800c9f3 	.word	0x0800c9f3
 800c964:	0800c9f3 	.word	0x0800c9f3
 800c968:	0800c9f3 	.word	0x0800c9f3
 800c96c:	0800c9f3 	.word	0x0800c9f3
 800c970:	0800c9f3 	.word	0x0800c9f3
 800c974:	0800c9f3 	.word	0x0800c9f3
 800c978:	0800c9f3 	.word	0x0800c9f3
 800c97c:	0800c9f3 	.word	0x0800c9f3
 800c980:	0800c9f3 	.word	0x0800c9f3
 800c984:	0800c9f3 	.word	0x0800c9f3
 800c988:	0800c9f3 	.word	0x0800c9f3
 800c98c:	0800c9e5 	.word	0x0800c9e5
 800c990:	2b40      	cmp	r3, #64	; 0x40
 800c992:	d02a      	beq.n	800c9ea <UART_SetConfig+0x8a6>
 800c994:	e02d      	b.n	800c9f2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c996:	f7fd fe21 	bl	800a5dc <HAL_RCCEx_GetD3PCLK1Freq>
 800c99a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c99c:	e02f      	b.n	800c9fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c99e:	f107 0314 	add.w	r3, r7, #20
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fd fe30 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c9ac:	e027      	b.n	800c9fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9ae:	f107 0308 	add.w	r3, r7, #8
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fd ff7c 	bl	800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c9bc:	e01f      	b.n	800c9fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9be:	4b21      	ldr	r3, [pc, #132]	; (800ca44 <UART_SetConfig+0x900>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 0320 	and.w	r3, r3, #32
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d009      	beq.n	800c9de <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9ca:	4b1e      	ldr	r3, [pc, #120]	; (800ca44 <UART_SetConfig+0x900>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	08db      	lsrs	r3, r3, #3
 800c9d0:	f003 0303 	and.w	r3, r3, #3
 800c9d4:	4a1d      	ldr	r2, [pc, #116]	; (800ca4c <UART_SetConfig+0x908>)
 800c9d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c9da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9dc:	e00f      	b.n	800c9fe <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800c9de:	4b1b      	ldr	r3, [pc, #108]	; (800ca4c <UART_SetConfig+0x908>)
 800c9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c9e2:	e00c      	b.n	800c9fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9e4:	4b1a      	ldr	r3, [pc, #104]	; (800ca50 <UART_SetConfig+0x90c>)
 800c9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c9e8:	e009      	b.n	800c9fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c9f0:	e005      	b.n	800c9fe <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c9fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	f000 81e6 	beq.w	800cdd2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0a:	4a12      	ldr	r2, [pc, #72]	; (800ca54 <UART_SetConfig+0x910>)
 800ca0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca10:	461a      	mov	r2, r3
 800ca12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca14:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca18:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685a      	ldr	r2, [r3, #4]
 800ca1e:	4613      	mov	r3, r2
 800ca20:	005b      	lsls	r3, r3, #1
 800ca22:	4413      	add	r3, r2
 800ca24:	6a3a      	ldr	r2, [r7, #32]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d305      	bcc.n	800ca36 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca30:	6a3a      	ldr	r2, [r7, #32]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d910      	bls.n	800ca58 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800ca36:	2301      	movs	r3, #1
 800ca38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ca3c:	e1c9      	b.n	800cdd2 <UART_SetConfig+0xc8e>
 800ca3e:	bf00      	nop
 800ca40:	40011c00 	.word	0x40011c00
 800ca44:	58024400 	.word	0x58024400
 800ca48:	58000c00 	.word	0x58000c00
 800ca4c:	03d09000 	.word	0x03d09000
 800ca50:	003d0900 	.word	0x003d0900
 800ca54:	0800e8a0 	.word	0x0800e8a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f04f 0100 	mov.w	r1, #0
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca64:	4ac1      	ldr	r2, [pc, #772]	; (800cd6c <UART_SetConfig+0xc28>)
 800ca66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca6a:	b29a      	uxth	r2, r3
 800ca6c:	f04f 0300 	mov.w	r3, #0
 800ca70:	f7f3 fca6 	bl	80003c0 <__aeabi_uldivmod>
 800ca74:	4602      	mov	r2, r0
 800ca76:	460b      	mov	r3, r1
 800ca78:	4610      	mov	r0, r2
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	f04f 0200 	mov.w	r2, #0
 800ca80:	f04f 0300 	mov.w	r3, #0
 800ca84:	020b      	lsls	r3, r1, #8
 800ca86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca8a:	0202      	lsls	r2, r0, #8
 800ca8c:	6879      	ldr	r1, [r7, #4]
 800ca8e:	6849      	ldr	r1, [r1, #4]
 800ca90:	0849      	lsrs	r1, r1, #1
 800ca92:	4608      	mov	r0, r1
 800ca94:	f04f 0100 	mov.w	r1, #0
 800ca98:	1814      	adds	r4, r2, r0
 800ca9a:	eb43 0501 	adc.w	r5, r3, r1
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	461a      	mov	r2, r3
 800caa4:	f04f 0300 	mov.w	r3, #0
 800caa8:	4620      	mov	r0, r4
 800caaa:	4629      	mov	r1, r5
 800caac:	f7f3 fc88 	bl	80003c0 <__aeabi_uldivmod>
 800cab0:	4602      	mov	r2, r0
 800cab2:	460b      	mov	r3, r1
 800cab4:	4613      	mov	r3, r2
 800cab6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cabe:	d308      	bcc.n	800cad2 <UART_SetConfig+0x98e>
 800cac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cac6:	d204      	bcs.n	800cad2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cace:	60da      	str	r2, [r3, #12]
 800cad0:	e17f      	b.n	800cdd2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cad8:	e17b      	b.n	800cdd2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	69db      	ldr	r3, [r3, #28]
 800cade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cae2:	f040 80be 	bne.w	800cc62 <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 800cae6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800caea:	2b20      	cmp	r3, #32
 800caec:	dc48      	bgt.n	800cb80 <UART_SetConfig+0xa3c>
 800caee:	2b00      	cmp	r3, #0
 800caf0:	db7b      	blt.n	800cbea <UART_SetConfig+0xaa6>
 800caf2:	2b20      	cmp	r3, #32
 800caf4:	d879      	bhi.n	800cbea <UART_SetConfig+0xaa6>
 800caf6:	a201      	add	r2, pc, #4	; (adr r2, 800cafc <UART_SetConfig+0x9b8>)
 800caf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafc:	0800cb87 	.word	0x0800cb87
 800cb00:	0800cb8f 	.word	0x0800cb8f
 800cb04:	0800cbeb 	.word	0x0800cbeb
 800cb08:	0800cbeb 	.word	0x0800cbeb
 800cb0c:	0800cb97 	.word	0x0800cb97
 800cb10:	0800cbeb 	.word	0x0800cbeb
 800cb14:	0800cbeb 	.word	0x0800cbeb
 800cb18:	0800cbeb 	.word	0x0800cbeb
 800cb1c:	0800cba7 	.word	0x0800cba7
 800cb20:	0800cbeb 	.word	0x0800cbeb
 800cb24:	0800cbeb 	.word	0x0800cbeb
 800cb28:	0800cbeb 	.word	0x0800cbeb
 800cb2c:	0800cbeb 	.word	0x0800cbeb
 800cb30:	0800cbeb 	.word	0x0800cbeb
 800cb34:	0800cbeb 	.word	0x0800cbeb
 800cb38:	0800cbeb 	.word	0x0800cbeb
 800cb3c:	0800cbb7 	.word	0x0800cbb7
 800cb40:	0800cbeb 	.word	0x0800cbeb
 800cb44:	0800cbeb 	.word	0x0800cbeb
 800cb48:	0800cbeb 	.word	0x0800cbeb
 800cb4c:	0800cbeb 	.word	0x0800cbeb
 800cb50:	0800cbeb 	.word	0x0800cbeb
 800cb54:	0800cbeb 	.word	0x0800cbeb
 800cb58:	0800cbeb 	.word	0x0800cbeb
 800cb5c:	0800cbeb 	.word	0x0800cbeb
 800cb60:	0800cbeb 	.word	0x0800cbeb
 800cb64:	0800cbeb 	.word	0x0800cbeb
 800cb68:	0800cbeb 	.word	0x0800cbeb
 800cb6c:	0800cbeb 	.word	0x0800cbeb
 800cb70:	0800cbeb 	.word	0x0800cbeb
 800cb74:	0800cbeb 	.word	0x0800cbeb
 800cb78:	0800cbeb 	.word	0x0800cbeb
 800cb7c:	0800cbdd 	.word	0x0800cbdd
 800cb80:	2b40      	cmp	r3, #64	; 0x40
 800cb82:	d02e      	beq.n	800cbe2 <UART_SetConfig+0xa9e>
 800cb84:	e031      	b.n	800cbea <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb86:	f7fc fe03 	bl	8009790 <HAL_RCC_GetPCLK1Freq>
 800cb8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cb8c:	e033      	b.n	800cbf6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb8e:	f7fc fe15 	bl	80097bc <HAL_RCC_GetPCLK2Freq>
 800cb92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cb94:	e02f      	b.n	800cbf6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb96:	f107 0314 	add.w	r3, r7, #20
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fd fd34 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cba0:	69bb      	ldr	r3, [r7, #24]
 800cba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cba4:	e027      	b.n	800cbf6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cba6:	f107 0308 	add.w	r3, r7, #8
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fd fe80 	bl	800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbb4:	e01f      	b.n	800cbf6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbb6:	4b6e      	ldr	r3, [pc, #440]	; (800cd70 <UART_SetConfig+0xc2c>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 0320 	and.w	r3, r3, #32
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d009      	beq.n	800cbd6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbc2:	4b6b      	ldr	r3, [pc, #428]	; (800cd70 <UART_SetConfig+0xc2c>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	08db      	lsrs	r3, r3, #3
 800cbc8:	f003 0303 	and.w	r3, r3, #3
 800cbcc:	4a69      	ldr	r2, [pc, #420]	; (800cd74 <UART_SetConfig+0xc30>)
 800cbce:	fa22 f303 	lsr.w	r3, r2, r3
 800cbd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbd4:	e00f      	b.n	800cbf6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800cbd6:	4b67      	ldr	r3, [pc, #412]	; (800cd74 <UART_SetConfig+0xc30>)
 800cbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbda:	e00c      	b.n	800cbf6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbdc:	4b66      	ldr	r3, [pc, #408]	; (800cd78 <UART_SetConfig+0xc34>)
 800cbde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbe0:	e009      	b.n	800cbf6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbe8:	e005      	b.n	800cbf6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800cbea:	2300      	movs	r3, #0
 800cbec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cbf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 80ea 	beq.w	800cdd2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc02:	4a5a      	ldr	r2, [pc, #360]	; (800cd6c <UART_SetConfig+0xc28>)
 800cc04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc08:	461a      	mov	r2, r3
 800cc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc10:	005a      	lsls	r2, r3, #1
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	085b      	lsrs	r3, r3, #1
 800cc18:	441a      	add	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc28:	2b0f      	cmp	r3, #15
 800cc2a:	d916      	bls.n	800cc5a <UART_SetConfig+0xb16>
 800cc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc32:	d212      	bcs.n	800cc5a <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	f023 030f 	bic.w	r3, r3, #15
 800cc3c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc40:	085b      	lsrs	r3, r3, #1
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	f003 0307 	and.w	r3, r3, #7
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cc56:	60da      	str	r2, [r3, #12]
 800cc58:	e0bb      	b.n	800cdd2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cc60:	e0b7      	b.n	800cdd2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cc66:	2b20      	cmp	r3, #32
 800cc68:	dc4a      	bgt.n	800cd00 <UART_SetConfig+0xbbc>
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f2c0 8086 	blt.w	800cd7c <UART_SetConfig+0xc38>
 800cc70:	2b20      	cmp	r3, #32
 800cc72:	f200 8083 	bhi.w	800cd7c <UART_SetConfig+0xc38>
 800cc76:	a201      	add	r2, pc, #4	; (adr r2, 800cc7c <UART_SetConfig+0xb38>)
 800cc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc7c:	0800cd07 	.word	0x0800cd07
 800cc80:	0800cd0f 	.word	0x0800cd0f
 800cc84:	0800cd7d 	.word	0x0800cd7d
 800cc88:	0800cd7d 	.word	0x0800cd7d
 800cc8c:	0800cd17 	.word	0x0800cd17
 800cc90:	0800cd7d 	.word	0x0800cd7d
 800cc94:	0800cd7d 	.word	0x0800cd7d
 800cc98:	0800cd7d 	.word	0x0800cd7d
 800cc9c:	0800cd27 	.word	0x0800cd27
 800cca0:	0800cd7d 	.word	0x0800cd7d
 800cca4:	0800cd7d 	.word	0x0800cd7d
 800cca8:	0800cd7d 	.word	0x0800cd7d
 800ccac:	0800cd7d 	.word	0x0800cd7d
 800ccb0:	0800cd7d 	.word	0x0800cd7d
 800ccb4:	0800cd7d 	.word	0x0800cd7d
 800ccb8:	0800cd7d 	.word	0x0800cd7d
 800ccbc:	0800cd37 	.word	0x0800cd37
 800ccc0:	0800cd7d 	.word	0x0800cd7d
 800ccc4:	0800cd7d 	.word	0x0800cd7d
 800ccc8:	0800cd7d 	.word	0x0800cd7d
 800cccc:	0800cd7d 	.word	0x0800cd7d
 800ccd0:	0800cd7d 	.word	0x0800cd7d
 800ccd4:	0800cd7d 	.word	0x0800cd7d
 800ccd8:	0800cd7d 	.word	0x0800cd7d
 800ccdc:	0800cd7d 	.word	0x0800cd7d
 800cce0:	0800cd7d 	.word	0x0800cd7d
 800cce4:	0800cd7d 	.word	0x0800cd7d
 800cce8:	0800cd7d 	.word	0x0800cd7d
 800ccec:	0800cd7d 	.word	0x0800cd7d
 800ccf0:	0800cd7d 	.word	0x0800cd7d
 800ccf4:	0800cd7d 	.word	0x0800cd7d
 800ccf8:	0800cd7d 	.word	0x0800cd7d
 800ccfc:	0800cd5d 	.word	0x0800cd5d
 800cd00:	2b40      	cmp	r3, #64	; 0x40
 800cd02:	d02e      	beq.n	800cd62 <UART_SetConfig+0xc1e>
 800cd04:	e03a      	b.n	800cd7c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd06:	f7fc fd43 	bl	8009790 <HAL_RCC_GetPCLK1Freq>
 800cd0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cd0c:	e03c      	b.n	800cd88 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd0e:	f7fc fd55 	bl	80097bc <HAL_RCC_GetPCLK2Freq>
 800cd12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cd14:	e038      	b.n	800cd88 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd16:	f107 0314 	add.w	r3, r7, #20
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7fd fc74 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd20:	69bb      	ldr	r3, [r7, #24]
 800cd22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd24:	e030      	b.n	800cd88 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd26:	f107 0308 	add.w	r3, r7, #8
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fd fdc0 	bl	800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd34:	e028      	b.n	800cd88 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd36:	4b0e      	ldr	r3, [pc, #56]	; (800cd70 <UART_SetConfig+0xc2c>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f003 0320 	and.w	r3, r3, #32
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d009      	beq.n	800cd56 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd42:	4b0b      	ldr	r3, [pc, #44]	; (800cd70 <UART_SetConfig+0xc2c>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	08db      	lsrs	r3, r3, #3
 800cd48:	f003 0303 	and.w	r3, r3, #3
 800cd4c:	4a09      	ldr	r2, [pc, #36]	; (800cd74 <UART_SetConfig+0xc30>)
 800cd4e:	fa22 f303 	lsr.w	r3, r2, r3
 800cd52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd54:	e018      	b.n	800cd88 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800cd56:	4b07      	ldr	r3, [pc, #28]	; (800cd74 <UART_SetConfig+0xc30>)
 800cd58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd5a:	e015      	b.n	800cd88 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd5c:	4b06      	ldr	r3, [pc, #24]	; (800cd78 <UART_SetConfig+0xc34>)
 800cd5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd60:	e012      	b.n	800cd88 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd68:	e00e      	b.n	800cd88 <UART_SetConfig+0xc44>
 800cd6a:	bf00      	nop
 800cd6c:	0800e8a0 	.word	0x0800e8a0
 800cd70:	58024400 	.word	0x58024400
 800cd74:	03d09000 	.word	0x03d09000
 800cd78:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cd80:	2301      	movs	r3, #1
 800cd82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cd86:	bf00      	nop
    }

    if (pclk != 0U)
 800cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d021      	beq.n	800cdd2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd92:	4a1a      	ldr	r2, [pc, #104]	; (800cdfc <UART_SetConfig+0xcb8>)
 800cd94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd98:	461a      	mov	r2, r3
 800cd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9c:	fbb3 f2f2 	udiv	r2, r3, r2
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	085b      	lsrs	r3, r3, #1
 800cda6:	441a      	add	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb6:	2b0f      	cmp	r3, #15
 800cdb8:	d908      	bls.n	800cdcc <UART_SetConfig+0xc88>
 800cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdc0:	d204      	bcs.n	800cdcc <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdc8:	60da      	str	r2, [r3, #12]
 800cdca:	e002      	b.n	800cdd2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2201      	movs	r2, #1
 800cdde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2200      	movs	r2, #0
 800cde6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cdee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3738      	adds	r7, #56	; 0x38
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bdb0      	pop	{r4, r5, r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	0800e8a0 	.word	0x0800e8a0

0800ce00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce0c:	f003 0301 	and.w	r3, r3, #1
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00a      	beq.n	800ce2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	430a      	orrs	r2, r1
 800ce28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2e:	f003 0302 	and.w	r3, r3, #2
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00a      	beq.n	800ce4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	430a      	orrs	r2, r1
 800ce4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce50:	f003 0304 	and.w	r3, r3, #4
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d00a      	beq.n	800ce6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	430a      	orrs	r2, r1
 800ce6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce72:	f003 0308 	and.w	r3, r3, #8
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00a      	beq.n	800ce90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	430a      	orrs	r2, r1
 800ce8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce94:	f003 0310 	and.w	r3, r3, #16
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00a      	beq.n	800ceb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	430a      	orrs	r2, r1
 800ceb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb6:	f003 0320 	and.w	r3, r3, #32
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00a      	beq.n	800ced4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	430a      	orrs	r2, r1
 800ced2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d01a      	beq.n	800cf16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	430a      	orrs	r2, r1
 800cef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cefa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cefe:	d10a      	bne.n	800cf16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	430a      	orrs	r2, r1
 800cf14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00a      	beq.n	800cf38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	430a      	orrs	r2, r1
 800cf36:	605a      	str	r2, [r3, #4]
  }
}
 800cf38:	bf00      	nop
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b086      	sub	sp, #24
 800cf48:	af02      	add	r7, sp, #8
 800cf4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf54:	f7f5 f934 	bl	80021c0 <HAL_GetTick>
 800cf58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 0308 	and.w	r3, r3, #8
 800cf64:	2b08      	cmp	r3, #8
 800cf66:	d10e      	bne.n	800cf86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2200      	movs	r2, #0
 800cf72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 f82f 	bl	800cfda <UART_WaitOnFlagUntilTimeout>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d001      	beq.n	800cf86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf82:	2303      	movs	r3, #3
 800cf84:	e025      	b.n	800cfd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f003 0304 	and.w	r3, r3, #4
 800cf90:	2b04      	cmp	r3, #4
 800cf92:	d10e      	bne.n	800cfb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf98:	9300      	str	r3, [sp, #0]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 f819 	bl	800cfda <UART_WaitOnFlagUntilTimeout>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d001      	beq.n	800cfb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfae:	2303      	movs	r3, #3
 800cfb0:	e00f      	b.n	800cfd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2220      	movs	r2, #32
 800cfb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2220      	movs	r2, #32
 800cfbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b084      	sub	sp, #16
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	60f8      	str	r0, [r7, #12]
 800cfe2:	60b9      	str	r1, [r7, #8]
 800cfe4:	603b      	str	r3, [r7, #0]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfea:	e062      	b.n	800d0b2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff2:	d05e      	beq.n	800d0b2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cff4:	f7f5 f8e4 	bl	80021c0 <HAL_GetTick>
 800cff8:	4602      	mov	r2, r0
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	1ad3      	subs	r3, r2, r3
 800cffe:	69ba      	ldr	r2, [r7, #24]
 800d000:	429a      	cmp	r2, r3
 800d002:	d302      	bcc.n	800d00a <UART_WaitOnFlagUntilTimeout+0x30>
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d11d      	bne.n	800d046 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d018:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	689a      	ldr	r2, [r3, #8]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f022 0201 	bic.w	r2, r2, #1
 800d028:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2220      	movs	r2, #32
 800d02e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2220      	movs	r2, #32
 800d036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e045      	b.n	800d0d2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f003 0304 	and.w	r3, r3, #4
 800d050:	2b00      	cmp	r3, #0
 800d052:	d02e      	beq.n	800d0b2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	69db      	ldr	r3, [r3, #28]
 800d05a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d05e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d062:	d126      	bne.n	800d0b2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d06c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d07c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	689a      	ldr	r2, [r3, #8]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f022 0201 	bic.w	r2, r2, #1
 800d08c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2220      	movs	r2, #32
 800d092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2220      	movs	r2, #32
 800d09a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2220      	movs	r2, #32
 800d0a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	e00f      	b.n	800d0d2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	69da      	ldr	r2, [r3, #28]
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	68ba      	ldr	r2, [r7, #8]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	bf0c      	ite	eq
 800d0c2:	2301      	moveq	r3, #1
 800d0c4:	2300      	movne	r3, #0
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	79fb      	ldrb	r3, [r7, #7]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d08d      	beq.n	800cfec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b085      	sub	sp, #20
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d101      	bne.n	800d0f0 <HAL_UARTEx_DisableFifoMode+0x16>
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	e027      	b.n	800d140 <HAL_UARTEx_DisableFifoMode+0x66>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2224      	movs	r2, #36	; 0x24
 800d0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f022 0201 	bic.w	r2, r2, #1
 800d116:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d11e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2220      	movs	r2, #32
 800d132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d101      	bne.n	800d164 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d160:	2302      	movs	r3, #2
 800d162:	e02d      	b.n	800d1c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2224      	movs	r2, #36	; 0x24
 800d170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f022 0201 	bic.w	r2, r2, #1
 800d18a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	683a      	ldr	r2, [r7, #0]
 800d19c:	430a      	orrs	r2, r1
 800d19e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 f84f 	bl	800d244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2220      	movs	r2, #32
 800d1b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d1be:	2300      	movs	r3, #0
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d101      	bne.n	800d1e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d1dc:	2302      	movs	r3, #2
 800d1de:	e02d      	b.n	800d23c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2224      	movs	r2, #36	; 0x24
 800d1ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f022 0201 	bic.w	r2, r2, #1
 800d206:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	683a      	ldr	r2, [r7, #0]
 800d218:	430a      	orrs	r2, r1
 800d21a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f811 	bl	800d244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	68fa      	ldr	r2, [r7, #12]
 800d228:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2220      	movs	r2, #32
 800d22e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d250:	2b00      	cmp	r3, #0
 800d252:	d108      	bne.n	800d266 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2201      	movs	r2, #1
 800d258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2201      	movs	r2, #1
 800d260:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d264:	e031      	b.n	800d2ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d266:	2310      	movs	r3, #16
 800d268:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d26a:	2310      	movs	r3, #16
 800d26c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	689b      	ldr	r3, [r3, #8]
 800d274:	0e5b      	lsrs	r3, r3, #25
 800d276:	b2db      	uxtb	r3, r3
 800d278:	f003 0307 	and.w	r3, r3, #7
 800d27c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	0f5b      	lsrs	r3, r3, #29
 800d286:	b2db      	uxtb	r3, r3
 800d288:	f003 0307 	and.w	r3, r3, #7
 800d28c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d28e:	7bbb      	ldrb	r3, [r7, #14]
 800d290:	7b3a      	ldrb	r2, [r7, #12]
 800d292:	4911      	ldr	r1, [pc, #68]	; (800d2d8 <UARTEx_SetNbDataToProcess+0x94>)
 800d294:	5c8a      	ldrb	r2, [r1, r2]
 800d296:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d29a:	7b3a      	ldrb	r2, [r7, #12]
 800d29c:	490f      	ldr	r1, [pc, #60]	; (800d2dc <UARTEx_SetNbDataToProcess+0x98>)
 800d29e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2ac:	7bfb      	ldrb	r3, [r7, #15]
 800d2ae:	7b7a      	ldrb	r2, [r7, #13]
 800d2b0:	4909      	ldr	r1, [pc, #36]	; (800d2d8 <UARTEx_SetNbDataToProcess+0x94>)
 800d2b2:	5c8a      	ldrb	r2, [r1, r2]
 800d2b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d2b8:	7b7a      	ldrb	r2, [r7, #13]
 800d2ba:	4908      	ldr	r1, [pc, #32]	; (800d2dc <UARTEx_SetNbDataToProcess+0x98>)
 800d2bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2be:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d2ca:	bf00      	nop
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	0800e8b8 	.word	0x0800e8b8
 800d2dc:	0800e8c0 	.word	0x0800e8c0

0800d2e0 <DLYB_OCTOSPI1_Calibration>:
#include "AP6408L.h"
#include "octospi.h"
#include "LOG.h"

void DLYB_OCTOSPI1_Calibration(uint8_t phase)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b08a      	sub	sp, #40	; 0x28
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	71fb      	strb	r3, [r7, #7]
	int flag = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t LNGG = 0;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	623b      	str	r3, [r7, #32]
	uint32_t LNG[3];
	uint32_t UnitDelayNum = 0;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	617b      	str	r3, [r7, #20]
	uint32_t TimeOut = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	61fb      	str	r3, [r7, #28]

	/*校准前置 —— 复位OSPI延迟模块旁路位，设置自由运行时钟*/
	CLEAR_BIT(OCTOSPI1->DCR1,OCTOSPI_DCR1_DLYBYP);
 800d2fa:	4b5e      	ldr	r3, [pc, #376]	; (800d474 <DLYB_OCTOSPI1_Calibration+0x194>)
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	4a5d      	ldr	r2, [pc, #372]	; (800d474 <DLYB_OCTOSPI1_Calibration+0x194>)
 800d300:	f023 0308 	bic.w	r3, r3, #8
 800d304:	6093      	str	r3, [r2, #8]
	SET_BIT(OCTOSPI1->DCR1,OCTOSPI_DCR1_FRCK);
 800d306:	4b5b      	ldr	r3, [pc, #364]	; (800d474 <DLYB_OCTOSPI1_Calibration+0x194>)
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	4a5a      	ldr	r2, [pc, #360]	; (800d474 <DLYB_OCTOSPI1_Calibration+0x194>)
 800d30c:	f043 0302 	orr.w	r3, r3, #2
 800d310:	6093      	str	r3, [r2, #8]

	/*配置延迟线长度为1个完整输入时钟周期*/
	DLYB_OCTOSPI1->CR 	|= 0x03;				//使能delay block和length sampling
 800d312:	4b59      	ldr	r3, [pc, #356]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a58      	ldr	r2, [pc, #352]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d318:	f043 0303 	orr.w	r3, r3, #3
 800d31c:	6013      	str	r3, [r2, #0]
	DLYB_OCTOSPI1->CFGR &= ( ~ (0xf) );			//设置SEL为12，即使能所有的Delay Unit
 800d31e:	4b56      	ldr	r3, [pc, #344]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	4a55      	ldr	r2, [pc, #340]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d324:	f023 030f 	bic.w	r3, r3, #15
 800d328:	6053      	str	r3, [r2, #4]
	DLYB_OCTOSPI1->CFGR |= 12;
 800d32a:	4b53      	ldr	r3, [pc, #332]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	4a52      	ldr	r2, [pc, #328]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d330:	f043 030c 	orr.w	r3, r3, #12
 800d334:	6053      	str	r3, [r2, #4]

	for(uint8_t i = 0;i < 128;i ++)
 800d336:	2300      	movs	r3, #0
 800d338:	76fb      	strb	r3, [r7, #27]
 800d33a:	e054      	b.n	800d3e6 <DLYB_OCTOSPI1_Calibration+0x106>
	{
		DLYB_OCTOSPI1->CFGR &= ( ~ (0x7f<<8) ); 	//清零UNIT
 800d33c:	4b4e      	ldr	r3, [pc, #312]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	4a4d      	ldr	r2, [pc, #308]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d342:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d346:	6053      	str	r3, [r2, #4]
		DLYB_OCTOSPI1->CFGR |= (i << 8);			//设置UNIT
 800d348:	4b4b      	ldr	r3, [pc, #300]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	7efa      	ldrb	r2, [r7, #27]
 800d34e:	0212      	lsls	r2, r2, #8
 800d350:	4611      	mov	r1, r2
 800d352:	4a49      	ldr	r2, [pc, #292]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d354:	430b      	orrs	r3, r1
 800d356:	6053      	str	r3, [r2, #4]
		while( !( (DLYB_OCTOSPI1->CFGR>>31) & 0x01) )		//LNGF被置为1
 800d358:	e006      	b.n	800d368 <DLYB_OCTOSPI1_Calibration+0x88>
		{
			TimeOut ++;
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	3301      	adds	r3, #1
 800d35e:	61fb      	str	r3, [r7, #28]
			if(TimeOut > 0xffff)
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d366:	d207      	bcs.n	800d378 <DLYB_OCTOSPI1_Calibration+0x98>
		while( !( (DLYB_OCTOSPI1->CFGR>>31) & 0x01) )		//LNGF被置为1
 800d368:	4b43      	ldr	r3, [pc, #268]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	0fdb      	lsrs	r3, r3, #31
 800d36e:	f003 0301 	and.w	r3, r3, #1
 800d372:	2b00      	cmp	r3, #0
 800d374:	d0f1      	beq.n	800d35a <DLYB_OCTOSPI1_Calibration+0x7a>
 800d376:	e000      	b.n	800d37a <DLYB_OCTOSPI1_Calibration+0x9a>
			{
				break;
 800d378:	bf00      	nop
			}
		}
		if( ( (DLYB_OCTOSPI1->CFGR>>31) & 0x01) )			//LNGF被置为1
 800d37a:	4b3f      	ldr	r3, [pc, #252]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	0fdb      	lsrs	r3, r3, #31
 800d380:	f003 0301 	and.w	r3, r3, #1
 800d384:	2b00      	cmp	r3, #0
 800d386:	d001      	beq.n	800d38c <DLYB_OCTOSPI1_Calibration+0xac>
		{
			flag = 1;
 800d388:	2301      	movs	r3, #1
 800d38a:	627b      	str	r3, [r7, #36]	; 0x24
		}

		if(flag)
 800d38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d023      	beq.n	800d3da <DLYB_OCTOSPI1_Calibration+0xfa>
		{
			LNGG = (DLYB_OCTOSPI1->CFGR >> 16) & 0xfff;
 800d392:	4b39      	ldr	r3, [pc, #228]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	0c1b      	lsrs	r3, r3, #16
 800d398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d39c:	623b      	str	r3, [r7, #32]
			LNG[0] = LNGG & 0x7ff;
 800d39e:	6a3b      	ldr	r3, [r7, #32]
 800d3a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3a4:	60bb      	str	r3, [r7, #8]
			LNG[1] = (LNGG >> 10) & 0x01;
 800d3a6:	6a3b      	ldr	r3, [r7, #32]
 800d3a8:	0a9b      	lsrs	r3, r3, #10
 800d3aa:	f003 0301 	and.w	r3, r3, #1
 800d3ae:	60fb      	str	r3, [r7, #12]
			LNG[2] = (LNGG >> 11) & 0x01;
 800d3b0:	6a3b      	ldr	r3, [r7, #32]
 800d3b2:	0adb      	lsrs	r3, r3, #11
 800d3b4:	f003 0301 	and.w	r3, r3, #1
 800d3b8:	613b      	str	r3, [r7, #16]
			if( (LNG[0] > 0) && ( (LNG[1] == 0) || (LNG[2] == 0) ) )	//判断Delay Line Length是否合理
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d009      	beq.n	800d3d4 <DLYB_OCTOSPI1_Calibration+0xf4>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d002      	beq.n	800d3cc <DLYB_OCTOSPI1_Calibration+0xec>
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d103      	bne.n	800d3d4 <DLYB_OCTOSPI1_Calibration+0xf4>
			{
				LOG("The Delay Line is set one input clock period\r\n");
 800d3cc:	482b      	ldr	r0, [pc, #172]	; (800d47c <DLYB_OCTOSPI1_Calibration+0x19c>)
 800d3ce:	f000 f98f 	bl	800d6f0 <LOG>
				break;
 800d3d2:	e00c      	b.n	800d3ee <DLYB_OCTOSPI1_Calibration+0x10e>
			}
			else
			{
				flag = 0;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d3d8:	e002      	b.n	800d3e0 <DLYB_OCTOSPI1_Calibration+0x100>
			}
		}
		else	LOG("The Delay Line is set err\r\n");
 800d3da:	4829      	ldr	r0, [pc, #164]	; (800d480 <DLYB_OCTOSPI1_Calibration+0x1a0>)
 800d3dc:	f000 f988 	bl	800d6f0 <LOG>
	for(uint8_t i = 0;i < 128;i ++)
 800d3e0:	7efb      	ldrb	r3, [r7, #27]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	76fb      	strb	r3, [r7, #27]
 800d3e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	daa6      	bge.n	800d33c <DLYB_OCTOSPI1_Calibration+0x5c>
	}


	/*确定有多少个Unit Delay，跨越一个输入时钟周期*/
	for(int8_t i = 10;i >= 0;i --)
 800d3ee:	230a      	movs	r3, #10
 800d3f0:	76bb      	strb	r3, [r7, #26]
 800d3f2:	e018      	b.n	800d426 <DLYB_OCTOSPI1_Calibration+0x146>
	{
		if( (LNGG >> i) & 0x01 )
 800d3f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d3f8:	6a3a      	ldr	r2, [r7, #32]
 800d3fa:	fa22 f303 	lsr.w	r3, r2, r3
 800d3fe:	f003 0301 	and.w	r3, r3, #1
 800d402:	2b00      	cmp	r3, #0
 800d404:	d009      	beq.n	800d41a <DLYB_OCTOSPI1_Calibration+0x13a>
		{
			LOG("UnitDelayNum is %d\r\n",i);
 800d406:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d40a:	4619      	mov	r1, r3
 800d40c:	481d      	ldr	r0, [pc, #116]	; (800d484 <DLYB_OCTOSPI1_Calibration+0x1a4>)
 800d40e:	f000 f96f 	bl	800d6f0 <LOG>
			UnitDelayNum = i;
 800d412:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d416:	617b      	str	r3, [r7, #20]
			break;
 800d418:	e009      	b.n	800d42e <DLYB_OCTOSPI1_Calibration+0x14e>
	for(int8_t i = 10;i >= 0;i --)
 800d41a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	3b01      	subs	r3, #1
 800d422:	b2db      	uxtb	r3, r3
 800d424:	76bb      	strb	r3, [r7, #26]
 800d426:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	dae2      	bge.n	800d3f4 <DLYB_OCTOSPI1_Calibration+0x114>
		}
	}

	/*选择输出时钟相位*/
	DLYB_OCTOSPI1->CFGR &= ( ~ (0xf) );
 800d42e:	4b12      	ldr	r3, [pc, #72]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	4a11      	ldr	r2, [pc, #68]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d434:	f023 030f 	bic.w	r3, r3, #15
 800d438:	6053      	str	r3, [r2, #4]
	DLYB_OCTOSPI1->CFGR |= phase;
 800d43a:	4b0f      	ldr	r3, [pc, #60]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d43c:	685a      	ldr	r2, [r3, #4]
 800d43e:	79fb      	ldrb	r3, [r7, #7]
 800d440:	490d      	ldr	r1, [pc, #52]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d442:	4313      	orrs	r3, r2
 800d444:	604b      	str	r3, [r1, #4]

	//失能Sampler length enable bit
	DLYB_OCTOSPI1->CR 	&= ( ~ ( 1 << 1 ) );
 800d446:	4b0c      	ldr	r3, [pc, #48]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4a0b      	ldr	r2, [pc, #44]	; (800d478 <DLYB_OCTOSPI1_Calibration+0x198>)
 800d44c:	f023 0302 	bic.w	r3, r3, #2
 800d450:	6013      	str	r3, [r2, #0]

	/*失能自由运行时钟*/
	SET_BIT(OCTOSPI1->CR,OCTOSPI_CR_ABORT);
 800d452:	4b08      	ldr	r3, [pc, #32]	; (800d474 <DLYB_OCTOSPI1_Calibration+0x194>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4a07      	ldr	r2, [pc, #28]	; (800d474 <DLYB_OCTOSPI1_Calibration+0x194>)
 800d458:	f043 0302 	orr.w	r3, r3, #2
 800d45c:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(OCTOSPI1->DCR1,OCTOSPI_DCR1_FRCK);
 800d45e:	4b05      	ldr	r3, [pc, #20]	; (800d474 <DLYB_OCTOSPI1_Calibration+0x194>)
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	4a04      	ldr	r2, [pc, #16]	; (800d474 <DLYB_OCTOSPI1_Calibration+0x194>)
 800d464:	f023 0302 	bic.w	r3, r3, #2
 800d468:	6093      	str	r3, [r2, #8]
}
 800d46a:	bf00      	nop
 800d46c:	3728      	adds	r7, #40	; 0x28
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	52005000 	.word	0x52005000
 800d478:	52006000 	.word	0x52006000
 800d47c:	0800e7f0 	.word	0x0800e7f0
 800d480:	0800e820 	.word	0x0800e820
 800d484:	0800e83c 	.word	0x0800e83c

0800d488 <PsramRegRead>:
	  }
}


void PsramRegRead(uint8_t *reg, uint32_t addr)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b096      	sub	sp, #88	; 0x58
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
		OSPI_RegularCmdTypeDef sCommand;

		sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800d492:	2300      	movs	r3, #0
 800d494:	60bb      	str	r3, [r7, #8]
	    sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800d496:	2300      	movs	r3, #0
 800d498:	60fb      	str	r3, [r7, #12]
	    sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800d49a:	2304      	movs	r3, #4
 800d49c:	617b      	str	r3, [r7, #20]
	    sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	61bb      	str	r3, [r7, #24]
	    sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	61fb      	str	r3, [r7, #28]
	    sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800d4a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4aa:	627b      	str	r3, [r7, #36]	; 0x24
	    sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800d4ac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800d4b0:	62bb      	str	r3, [r7, #40]	; 0x28
	    sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800d4b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	637b      	str	r3, [r7, #52]	; 0x34
	    sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 800d4bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d4c0:	643b      	str	r3, [r7, #64]	; 0x40
	    sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800d4c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d4c6:	64bb      	str	r3, [r7, #72]	; 0x48
	    sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800d4c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d4cc:	653b      	str	r3, [r7, #80]	; 0x50
	    sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	657b      	str	r3, [r7, #84]	; 0x54
	    sCommand.Instruction        = READ_REG_CMD_SRAM;
 800d4d2:	2340      	movs	r3, #64	; 0x40
 800d4d4:	613b      	str	r3, [r7, #16]
	    sCommand.Address            = addr;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	623b      	str	r3, [r7, #32]
	    sCommand.NbData             = 2;
 800d4da:	2302      	movs	r3, #2
 800d4dc:	647b      	str	r3, [r7, #68]	; 0x44
	    sCommand.DummyCycles        = 5;
 800d4de:	2305      	movs	r3, #5
 800d4e0:	64fb      	str	r3, [r7, #76]	; 0x4c

	    if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800d4e2:	f107 0308 	add.w	r3, r7, #8
 800d4e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	480b      	ldr	r0, [pc, #44]	; (800d51c <PsramRegRead+0x94>)
 800d4ee:	f7fa f883 	bl	80075f8 <HAL_OSPI_Command>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d001      	beq.n	800d4fc <PsramRegRead+0x74>
	    	Error_Handler();
 800d4f8:	f7f4 f8ea 	bl	80016d0 <Error_Handler>
	    }

	    if (HAL_OSPI_Receive(&hospi1, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800d4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d500:	6879      	ldr	r1, [r7, #4]
 800d502:	4806      	ldr	r0, [pc, #24]	; (800d51c <PsramRegRead+0x94>)
 800d504:	f7fa f978 	bl	80077f8 <HAL_OSPI_Receive>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d001      	beq.n	800d512 <PsramRegRead+0x8a>
	    	Error_Handler();
 800d50e:	f7f4 f8df 	bl	80016d0 <Error_Handler>
	    }
}
 800d512:	bf00      	nop
 800d514:	3758      	adds	r7, #88	; 0x58
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	24000268 	.word	0x24000268

0800d520 <PsramRegWrite>:


void PsramRegWrite(uint8_t *reg, uint32_t addr)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b096      	sub	sp, #88	; 0x58
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
		OSPI_RegularCmdTypeDef sCommand;

		sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800d52a:	2300      	movs	r3, #0
 800d52c:	60bb      	str	r3, [r7, #8]
		sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800d52e:	2300      	movs	r3, #0
 800d530:	60fb      	str	r3, [r7, #12]
		sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800d532:	2304      	movs	r3, #4
 800d534:	617b      	str	r3, [r7, #20]
		sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800d536:	2300      	movs	r3, #0
 800d538:	61bb      	str	r3, [r7, #24]
		sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800d53a:	2300      	movs	r3, #0
 800d53c:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800d53e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d542:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800d544:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800d548:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800d54a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d54e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800d550:	2300      	movs	r3, #0
 800d552:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 800d554:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d558:	643b      	str	r3, [r7, #64]	; 0x40
		sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800d55a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d55e:	64bb      	str	r3, [r7, #72]	; 0x48
		sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800d560:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d564:	653b      	str	r3, [r7, #80]	; 0x50
		sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800d566:	2300      	movs	r3, #0
 800d568:	657b      	str	r3, [r7, #84]	; 0x54
		sCommand.Instruction        = WRITE_REG_CMD_SRAM;
 800d56a:	23c0      	movs	r3, #192	; 0xc0
 800d56c:	613b      	str	r3, [r7, #16]
		sCommand.Address            = addr;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	623b      	str	r3, [r7, #32]
		sCommand.NbData             = 2;
 800d572:	2302      	movs	r3, #2
 800d574:	647b      	str	r3, [r7, #68]	; 0x44
		sCommand.DummyCycles        = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800d57a:	f107 0308 	add.w	r3, r7, #8
 800d57e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d582:	4619      	mov	r1, r3
 800d584:	480b      	ldr	r0, [pc, #44]	; (800d5b4 <PsramRegWrite+0x94>)
 800d586:	f7fa f837 	bl	80075f8 <HAL_OSPI_Command>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d001      	beq.n	800d594 <PsramRegWrite+0x74>
		    Error_Handler();
 800d590:	f7f4 f89e 	bl	80016d0 <Error_Handler>
		  }

		if (HAL_OSPI_Transmit(&hospi1, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800d594:	f241 3288 	movw	r2, #5000	; 0x1388
 800d598:	6879      	ldr	r1, [r7, #4]
 800d59a:	4806      	ldr	r0, [pc, #24]	; (800d5b4 <PsramRegWrite+0x94>)
 800d59c:	f7fa f8b9 	bl	8007712 <HAL_OSPI_Transmit>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d001      	beq.n	800d5aa <PsramRegWrite+0x8a>
		    Error_Handler();
 800d5a6:	f7f4 f893 	bl	80016d0 <Error_Handler>
		  }
}
 800d5aa:	bf00      	nop
 800d5ac:	3758      	adds	r7, #88	; 0x58
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	24000268 	.word	0x24000268

0800d5b8 <EnableMemMapped>:

/* This function enables memory-mapped mode for Read and Write operations */
void EnableMemMapped(void)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b096      	sub	sp, #88	; 0x58
 800d5bc:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef sCommand;
	OSPI_MemoryMappedTypeDef sMemMappedCfg;
	sCommand.FlashId = HAL_OSPI_FLASH_ID_1;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_8_LINES;
 800d5c2:	2304      	movs	r3, #4
 800d5c4:	617b      	str	r3, [r7, #20]
	sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = HAL_OSPI_ADDRESS_8_LINES;
 800d5ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5d2:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AddressSize = HAL_OSPI_ADDRESS_32_BITS;
 800d5d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800d5d8:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800d5da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5de:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DataMode = HAL_OSPI_DATA_8_LINES;
 800d5e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d5e8:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DataDtrMode = HAL_OSPI_DATA_DTR_ENABLE;
 800d5ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d5ee:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.DQSMode = HAL_OSPI_DQS_ENABLE;
 800d5f0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d5f4:	653b      	str	r3, [r7, #80]	; 0x50
	sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	657b      	str	r3, [r7, #84]	; 0x54
	sCommand.Address = 0;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	623b      	str	r3, [r7, #32]
	sCommand.NbData = 1;
 800d5fe:	2301      	movs	r3, #1
 800d600:	647b      	str	r3, [r7, #68]	; 0x44

	/* Memory-mapped mode configuration for Linear burst write operations */
	sCommand.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 800d602:	2302      	movs	r3, #2
 800d604:	60bb      	str	r3, [r7, #8]
	sCommand.Instruction = WRITE_LINEAR_BURST_CMD;
 800d606:	23a0      	movs	r3, #160	; 0xa0
 800d608:	613b      	str	r3, [r7, #16]
	sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_WRITE;
 800d60a:	2304      	movs	r3, #4
 800d60c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d60e:	f107 0308 	add.w	r3, r7, #8
 800d612:	f241 3288 	movw	r2, #5000	; 0x1388
 800d616:	4619      	mov	r1, r3
 800d618:	4815      	ldr	r0, [pc, #84]	; (800d670 <EnableMemMapped+0xb8>)
 800d61a:	f7f9 ffed 	bl	80075f8 <HAL_OSPI_Command>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d001      	beq.n	800d628 <EnableMemMapped+0x70>
	{
		Error_Handler();
 800d624:	f7f4 f854 	bl	80016d0 <Error_Handler>
	}

	/* Memory-mapped mode configuration for Linear burst read operations */
	sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 800d628:	2301      	movs	r3, #1
 800d62a:	60bb      	str	r3, [r7, #8]
	sCommand.Instruction = READ_LINEAR_BURST_CMD;
 800d62c:	2320      	movs	r3, #32
 800d62e:	613b      	str	r3, [r7, #16]
	sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_READ;
 800d630:	2305      	movs	r3, #5
 800d632:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d634:	f107 0308 	add.w	r3, r7, #8
 800d638:	f241 3288 	movw	r2, #5000	; 0x1388
 800d63c:	4619      	mov	r1, r3
 800d63e:	480c      	ldr	r0, [pc, #48]	; (800d670 <EnableMemMapped+0xb8>)
 800d640:	f7f9 ffda 	bl	80075f8 <HAL_OSPI_Command>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d001      	beq.n	800d64e <EnableMemMapped+0x96>
	{
		Error_Handler();
 800d64a:	f7f4 f841 	bl	80016d0 <Error_Handler>
	}

	/*Disable timeout counter for memory mapped mode*/
	sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800d64e:	2300      	movs	r3, #0
 800d650:	603b      	str	r3, [r7, #0]
	/*Enable memory mapped mode*/
	if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK)
 800d652:	463b      	mov	r3, r7
 800d654:	4619      	mov	r1, r3
 800d656:	4806      	ldr	r0, [pc, #24]	; (800d670 <EnableMemMapped+0xb8>)
 800d658:	f7fa f972 	bl	8007940 <HAL_OSPI_MemoryMapped>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <EnableMemMapped+0xae>
	{
		Error_Handler();
 800d662:	f7f4 f835 	bl	80016d0 <Error_Handler>
	}
}
 800d666:	bf00      	nop
 800d668:	3758      	adds	r7, #88	; 0x58
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	24000268 	.word	0x24000268

0800d674 <Psram_Set_DQS>:
	    PsramMapRead_U8(p_buff, p_addr, remains);
	}
}

void Psram_Set_DQS(enum DQS_Strength_e DQS_Strength)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	4603      	mov	r3, r0
 800d67c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg[2] = {0x00,0x00};
 800d67e:	2300      	movs	r3, #0
 800d680:	81bb      	strh	r3, [r7, #12]
	uint8_t regs;
	switch (DQS_Strength)
 800d682:	79fb      	ldrb	r3, [r7, #7]
 800d684:	2b03      	cmp	r3, #3
 800d686:	d817      	bhi.n	800d6b8 <Psram_Set_DQS+0x44>
 800d688:	a201      	add	r2, pc, #4	; (adr r2, 800d690 <Psram_Set_DQS+0x1c>)
 800d68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d68e:	bf00      	nop
 800d690:	0800d6a1 	.word	0x0800d6a1
 800d694:	0800d6a7 	.word	0x0800d6a7
 800d698:	0800d6ad 	.word	0x0800d6ad
 800d69c:	0800d6b3 	.word	0x0800d6b3
	{
		case Half			: regs = 0x08; break;
 800d6a0:	2308      	movs	r3, #8
 800d6a2:	72fb      	strb	r3, [r7, #11]
 800d6a4:	e00b      	b.n	800d6be <Psram_Set_DQS+0x4a>
		case One_Fourth		: regs = 0x09; break;
 800d6a6:	2309      	movs	r3, #9
 800d6a8:	72fb      	strb	r3, [r7, #11]
 800d6aa:	e008      	b.n	800d6be <Psram_Set_DQS+0x4a>
		case One_Eighth 	: regs = 0x0A; break;
 800d6ac:	230a      	movs	r3, #10
 800d6ae:	72fb      	strb	r3, [r7, #11]
 800d6b0:	e005      	b.n	800d6be <Psram_Set_DQS+0x4a>
		case One_Sixteenth	: regs = 0x0B; break;
 800d6b2:	230b      	movs	r3, #11
 800d6b4:	72fb      	strb	r3, [r7, #11]
 800d6b6:	e002      	b.n	800d6be <Psram_Set_DQS+0x4a>
		default				: regs = 0x09; break;
 800d6b8:	2309      	movs	r3, #9
 800d6ba:	72fb      	strb	r3, [r7, #11]
 800d6bc:	bf00      	nop
	}
	while(reg[0] != regs)
 800d6be:	e00e      	b.n	800d6de <Psram_Set_DQS+0x6a>
	{
		PsramRegWrite(&regs,0);
 800d6c0:	f107 030b 	add.w	r3, r7, #11
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7ff ff2a 	bl	800d520 <PsramRegWrite>
		HAL_Delay(50);
 800d6cc:	2032      	movs	r0, #50	; 0x32
 800d6ce:	f7f4 fd83 	bl	80021d8 <HAL_Delay>
		PsramRegRead(reg,0);
 800d6d2:	f107 030c 	add.w	r3, r7, #12
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7ff fed5 	bl	800d488 <PsramRegRead>
	while(reg[0] != regs)
 800d6de:	7b3a      	ldrb	r2, [r7, #12]
 800d6e0:	7afb      	ldrb	r3, [r7, #11]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d1ec      	bne.n	800d6c0 <Psram_Set_DQS+0x4c>
	}
}
 800d6e6:	bf00      	nop
 800d6e8:	bf00      	nop
 800d6ea:	3710      	adds	r7, #16
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <LOG>:
#include "stdarg.h"
#include "usart.h"

/* UART_DEBUG */
void LOG(const char *format, ...)
{
 800d6f0:	b40f      	push	{r0, r1, r2, r3}
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800d6f8:	af00      	add	r7, sp, #0
	char print_buf[512] = { 0 };
 800d6fa:	1d3b      	adds	r3, r7, #4
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	3304      	adds	r3, #4
 800d702:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800d706:	2100      	movs	r1, #0
 800d708:	4618      	mov	r0, r3
 800d70a:	f000 fbed 	bl	800dee8 <memset>

	va_list args;
	va_start(args, format);
 800d70e:	f507 7205 	add.w	r2, r7, #532	; 0x214
 800d712:	463b      	mov	r3, r7
 800d714:	601a      	str	r2, [r3, #0]
	int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 800d716:	463b      	mov	r3, r7
 800d718:	1d38      	adds	r0, r7, #4
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800d720:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d724:	f000 fc14 	bl	800df50 <vsniprintf>
 800d728:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
	va_end(args);

	if (r > 0) {
 800d72c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800d730:	2b00      	cmp	r3, #0
 800d732:	dd0a      	ble.n	800d74a <LOG+0x5a>
	    HAL_UART_Transmit(&huart3, print_buf, strlen(print_buf), 200);
 800d734:	1d3b      	adds	r3, r7, #4
 800d736:	4618      	mov	r0, r3
 800d738:	f7f2 fdea 	bl	8000310 <strlen>
 800d73c:	4603      	mov	r3, r0
 800d73e:	b29a      	uxth	r2, r3
 800d740:	1d39      	adds	r1, r7, #4
 800d742:	23c8      	movs	r3, #200	; 0xc8
 800d744:	4805      	ldr	r0, [pc, #20]	; (800d75c <LOG+0x6c>)
 800d746:	f7fe fc67 	bl	800c018 <HAL_UART_Transmit>
	}
}
 800d74a:	bf00      	nop
 800d74c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800d750:	46bd      	mov	sp, r7
 800d752:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d756:	b004      	add	sp, #16
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	24000374 	.word	0x24000374

0800d760 <OV2640_Init>:
	0xda, 0x00,
	0xe0, 0x00,
};

void OV2640_Init(OV2640_TypeDef *OV2640)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  _OV2640 = OV2640;
 800d768:	4a10      	ldr	r2, [pc, #64]	; (800d7ac <OV2640_Init+0x4c>)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, GPIO_PIN_RESET);
 800d76e:	2200      	movs	r2, #0
 800d770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d774:	480e      	ldr	r0, [pc, #56]	; (800d7b0 <OV2640_Init+0x50>)
 800d776:	f7f8 fcf7 	bl	8006168 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800d77a:	2064      	movs	r0, #100	; 0x64
 800d77c:	f7f4 fd2c 	bl	80021d8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, GPIO_PIN_SET);
 800d780:	2201      	movs	r2, #1
 800d782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d786:	480a      	ldr	r0, [pc, #40]	; (800d7b0 <OV2640_Init+0x50>)
 800d788:	f7f8 fcee 	bl	8006168 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800d78c:	2064      	movs	r0, #100	; 0x64
 800d78e:	f7f4 fd23 	bl	80021d8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800d792:	2200      	movs	r2, #0
 800d794:	2180      	movs	r1, #128	; 0x80
 800d796:	4807      	ldr	r0, [pc, #28]	; (800d7b4 <OV2640_Init+0x54>)
 800d798:	f7f8 fce6 	bl	8006168 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800d79c:	2064      	movs	r0, #100	; 0x64
 800d79e:	f7f4 fd1b 	bl	80021d8 <HAL_Delay>
}
 800d7a2:	bf00      	nop
 800d7a4:	3708      	adds	r7, #8
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	24000020 	.word	0x24000020
 800d7b0:	58021c00 	.word	0x58021c00
 800d7b4:	58021000 	.word	0x58021000

0800d7b8 <OV2640_Reset>:
  * @brief  Resets the OV2640 camera.
  * @param  None
  * @retval None
  */
void OV2640_Reset(void)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	af00      	add	r7, sp, #0
  /*OV2640*/
  OV2640_WriteReg(OV2640_DSP_RA_DLMT, 0x01);
 800d7bc:	2101      	movs	r1, #1
 800d7be:	20ff      	movs	r0, #255	; 0xff
 800d7c0:	f000 f9ec 	bl	800db9c <OV2640_WriteReg>
  OV2640_WriteReg(OV2640_SENSOR_COM7, 0x80);
 800d7c4:	2180      	movs	r1, #128	; 0x80
 800d7c6:	2012      	movs	r0, #18
 800d7c8:	f000 f9e8 	bl	800db9c <OV2640_WriteReg>
}
 800d7cc:	bf00      	nop
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <OV2640_ReadID>:
  * @brief
  * @param  OV2640ID:
  * @retval None
  */
void OV2640_ReadID(OV2640_IDTypeDef *OV2640ID)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]

  OV2640_WriteReg(OV2640_DSP_RA_DLMT, 0x01);
 800d7d8:	2101      	movs	r1, #1
 800d7da:	20ff      	movs	r0, #255	; 0xff
 800d7dc:	f000 f9de 	bl	800db9c <OV2640_WriteReg>

  OV2640ID->Manufacturer_ID1 = OV2640_ReadReg(OV2640_SENSOR_MIDH);
 800d7e0:	201c      	movs	r0, #28
 800d7e2:	f000 fa03 	bl	800dbec <OV2640_ReadReg>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	701a      	strb	r2, [r3, #0]
  OV2640ID->Manufacturer_ID2 = OV2640_ReadReg(OV2640_SENSOR_MIDL);
 800d7ee:	201d      	movs	r0, #29
 800d7f0:	f000 f9fc 	bl	800dbec <OV2640_ReadReg>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	705a      	strb	r2, [r3, #1]
  OV2640ID->PIDH = OV2640_ReadReg(OV2640_SENSOR_PIDH);
 800d7fc:	200a      	movs	r0, #10
 800d7fe:	f000 f9f5 	bl	800dbec <OV2640_ReadReg>
 800d802:	4603      	mov	r3, r0
 800d804:	461a      	mov	r2, r3
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	709a      	strb	r2, [r3, #2]
  OV2640ID->PIDL = OV2640_ReadReg(OV2640_SENSOR_PIDL);
 800d80a:	200b      	movs	r0, #11
 800d80c:	f000 f9ee 	bl	800dbec <OV2640_ReadReg>
 800d810:	4603      	mov	r3, r0
 800d812:	461a      	mov	r2, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	70da      	strb	r2, [r3, #3]
}
 800d818:	bf00      	nop
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <OV2640_OutSize_Set>:
  * @brief
  * @param
  * @retval 0
  */
u8 OV2640_OutSize_Set(u16 width, u16 height)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	4603      	mov	r3, r0
 800d828:	460a      	mov	r2, r1
 800d82a:	80fb      	strh	r3, [r7, #6]
 800d82c:	4613      	mov	r3, r2
 800d82e:	80bb      	strh	r3, [r7, #4]
  u16 outh;
  u16 outw;
  u8 temp;
  if (width % 4)
 800d830:	88fb      	ldrh	r3, [r7, #6]
 800d832:	f003 0303 	and.w	r3, r3, #3
 800d836:	b29b      	uxth	r3, r3
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d001      	beq.n	800d840 <OV2640_OutSize_Set+0x20>
    return 1;
 800d83c:	2301      	movs	r3, #1
 800d83e:	e042      	b.n	800d8c6 <OV2640_OutSize_Set+0xa6>
  if (height % 4)
 800d840:	88bb      	ldrh	r3, [r7, #4]
 800d842:	f003 0303 	and.w	r3, r3, #3
 800d846:	b29b      	uxth	r3, r3
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d001      	beq.n	800d850 <OV2640_OutSize_Set+0x30>
    return 2;
 800d84c:	2302      	movs	r3, #2
 800d84e:	e03a      	b.n	800d8c6 <OV2640_OutSize_Set+0xa6>
  outw = width / 4;
 800d850:	88fb      	ldrh	r3, [r7, #6]
 800d852:	089b      	lsrs	r3, r3, #2
 800d854:	81fb      	strh	r3, [r7, #14]
  outh = height / 4;
 800d856:	88bb      	ldrh	r3, [r7, #4]
 800d858:	089b      	lsrs	r3, r3, #2
 800d85a:	81bb      	strh	r3, [r7, #12]
  OV2640_WriteReg(0XFF, 0X00);
 800d85c:	2100      	movs	r1, #0
 800d85e:	20ff      	movs	r0, #255	; 0xff
 800d860:	f000 f99c 	bl	800db9c <OV2640_WriteReg>
  OV2640_WriteReg(0XE0, 0X04);
 800d864:	2104      	movs	r1, #4
 800d866:	20e0      	movs	r0, #224	; 0xe0
 800d868:	f000 f998 	bl	800db9c <OV2640_WriteReg>
  OV2640_WriteReg(0X50, outw & 0X00);
 800d86c:	2100      	movs	r1, #0
 800d86e:	2050      	movs	r0, #80	; 0x50
 800d870:	f000 f994 	bl	800db9c <OV2640_WriteReg>
  OV2640_WriteReg(0X5A, outw & 0XFF);
 800d874:	89fb      	ldrh	r3, [r7, #14]
 800d876:	b2db      	uxtb	r3, r3
 800d878:	4619      	mov	r1, r3
 800d87a:	205a      	movs	r0, #90	; 0x5a
 800d87c:	f000 f98e 	bl	800db9c <OV2640_WriteReg>
  OV2640_WriteReg(0X5B, outh & 0XFF);
 800d880:	89bb      	ldrh	r3, [r7, #12]
 800d882:	b2db      	uxtb	r3, r3
 800d884:	4619      	mov	r1, r3
 800d886:	205b      	movs	r0, #91	; 0x5b
 800d888:	f000 f988 	bl	800db9c <OV2640_WriteReg>
  temp = (outw >> 8) & 0X03;
 800d88c:	89fb      	ldrh	r3, [r7, #14]
 800d88e:	0a1b      	lsrs	r3, r3, #8
 800d890:	b29b      	uxth	r3, r3
 800d892:	b2db      	uxtb	r3, r3
 800d894:	f003 0303 	and.w	r3, r3, #3
 800d898:	72fb      	strb	r3, [r7, #11]
  temp |= (outh >> 6) & 0X04;
 800d89a:	89bb      	ldrh	r3, [r7, #12]
 800d89c:	099b      	lsrs	r3, r3, #6
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	b25b      	sxtb	r3, r3
 800d8a2:	f003 0304 	and.w	r3, r3, #4
 800d8a6:	b25a      	sxtb	r2, r3
 800d8a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	b25b      	sxtb	r3, r3
 800d8b0:	72fb      	strb	r3, [r7, #11]
  OV2640_WriteReg(0X5C, temp);
 800d8b2:	7afb      	ldrb	r3, [r7, #11]
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	205c      	movs	r0, #92	; 0x5c
 800d8b8:	f000 f970 	bl	800db9c <OV2640_WriteReg>
  OV2640_WriteReg(0XE0, 0X00);
 800d8bc:	2100      	movs	r1, #0
 800d8be:	20e0      	movs	r0, #224	; 0xe0
 800d8c0:	f000 f96c 	bl	800db9c <OV2640_WriteReg>
  return 0;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
	...

0800d8d0 <OV2640_UXGAConfig>:
  * @brief
  * @param  None
  * @retval None
  */
void OV2640_UXGAConfig(void)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
  uint32_t i;

  OV2640_Reset();
 800d8d6:	f7ff ff6f 	bl	800d7b8 <OV2640_Reset>

  for (i = 0; i < (sizeof(OV2640_UXGA) / 2); i++)
 800d8da:	2300      	movs	r3, #0
 800d8dc:	607b      	str	r3, [r7, #4]
 800d8de:	e010      	b.n	800d902 <OV2640_UXGAConfig+0x32>
  {
    OV2640_WriteReg(OV2640_UXGA[i][0], OV2640_UXGA[i][1]);
 800d8e0:	4a12      	ldr	r2, [pc, #72]	; (800d92c <OV2640_UXGAConfig+0x5c>)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	4910      	ldr	r1, [pc, #64]	; (800d92c <OV2640_UXGAConfig+0x5c>)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	005b      	lsls	r3, r3, #1
 800d8f0:	440b      	add	r3, r1
 800d8f2:	785b      	ldrb	r3, [r3, #1]
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	4610      	mov	r0, r2
 800d8f8:	f000 f950 	bl	800db9c <OV2640_WriteReg>
  for (i = 0; i < (sizeof(OV2640_UXGA) / 2); i++)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	3301      	adds	r3, #1
 800d900:	607b      	str	r3, [r7, #4]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2bdd      	cmp	r3, #221	; 0xdd
 800d906:	d9eb      	bls.n	800d8e0 <OV2640_UXGAConfig+0x10>
  }

  OV2640_OutSize_Set(_OV2640->frame->width, _OV2640->frame->height);
 800d908:	4b09      	ldr	r3, [pc, #36]	; (800d930 <OV2640_UXGAConfig+0x60>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	b29a      	uxth	r2, r3
 800d912:	4b07      	ldr	r3, [pc, #28]	; (800d930 <OV2640_UXGAConfig+0x60>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	4619      	mov	r1, r3
 800d91e:	4610      	mov	r0, r2
 800d920:	f7ff ff7e 	bl	800d820 <OV2640_OutSize_Set>
}
 800d924:	bf00      	nop
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	0800e8c8 	.word	0x0800e8c8
 800d930:	24000020 	.word	0x24000020

0800d934 <OV2640_Start>:
  OV2640_WriteReg(0x7d, value2);
  OV2640_WriteReg(0x7d, 0x06);
}

void OV2640_Start(void)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	af00      	add	r7, sp, #0
	OV2640_DMA_Config(_OV2640->frame->buffer, (_OV2640->frame->length)/4);
 800d938:	4b07      	ldr	r3, [pc, #28]	; (800d958 <OV2640_Start+0x24>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	4b05      	ldr	r3, [pc, #20]	; (800d958 <OV2640_Start+0x24>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	089b      	lsrs	r3, r3, #2
 800d94a:	4619      	mov	r1, r3
 800d94c:	4610      	mov	r0, r2
 800d94e:	f000 f805 	bl	800d95c <OV2640_DMA_Config>
}
 800d952:	bf00      	nop
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	24000020 	.word	0x24000020

0800d95c <OV2640_DMA_Config>:
  * @brief
  * @param
  * @param
  */
void OV2640_DMA_Config(uint8_t *DMA_Memory0BaseAddr, uint32_t DMA_BufferSize)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]

  __HAL_RCC_DMA2_CLK_ENABLE();
 800d966:	4b3e      	ldr	r3, [pc, #248]	; (800da60 <OV2640_DMA_Config+0x104>)
 800d968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d96c:	4a3c      	ldr	r2, [pc, #240]	; (800da60 <OV2640_DMA_Config+0x104>)
 800d96e:	f043 0302 	orr.w	r3, r3, #2
 800d972:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d976:	4b3a      	ldr	r3, [pc, #232]	; (800da60 <OV2640_DMA_Config+0x104>)
 800d978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d97c:	f003 0302 	and.w	r3, r3, #2
 800d980:	60fb      	str	r3, [r7, #12]
 800d982:	68fb      	ldr	r3, [r7, #12]

  _OV2640->dma->Instance = DMA2_Stream1;
 800d984:	4b37      	ldr	r3, [pc, #220]	; (800da64 <OV2640_DMA_Config+0x108>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	4a37      	ldr	r2, [pc, #220]	; (800da68 <OV2640_DMA_Config+0x10c>)
 800d98c:	601a      	str	r2, [r3, #0]
  _OV2640->dma->Init.Request = DMA_REQUEST_DCMI;
 800d98e:	4b35      	ldr	r3, [pc, #212]	; (800da64 <OV2640_DMA_Config+0x108>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	224b      	movs	r2, #75	; 0x4b
 800d996:	605a      	str	r2, [r3, #4]
  _OV2640->dma->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d998:	4b32      	ldr	r3, [pc, #200]	; (800da64 <OV2640_DMA_Config+0x108>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	609a      	str	r2, [r3, #8]
  _OV2640->dma->Init.PeriphInc = DMA_PINC_DISABLE;
 800d9a2:	4b30      	ldr	r3, [pc, #192]	; (800da64 <OV2640_DMA_Config+0x108>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	60da      	str	r2, [r3, #12]
  _OV2640->dma->Init.MemInc = DMA_MINC_ENABLE;
 800d9ac:	4b2d      	ldr	r3, [pc, #180]	; (800da64 <OV2640_DMA_Config+0x108>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d9b6:	611a      	str	r2, [r3, #16]
  _OV2640->dma->Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d9b8:	4b2a      	ldr	r3, [pc, #168]	; (800da64 <OV2640_DMA_Config+0x108>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d9c2:	615a      	str	r2, [r3, #20]
  _OV2640->dma->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d9c4:	4b27      	ldr	r3, [pc, #156]	; (800da64 <OV2640_DMA_Config+0x108>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	619a      	str	r2, [r3, #24]
  _OV2640->dma->Init.Mode = DMA_CIRCULAR;
 800d9ce:	4b25      	ldr	r3, [pc, #148]	; (800da64 <OV2640_DMA_Config+0x108>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d9d8:	61da      	str	r2, [r3, #28]
  _OV2640->dma->Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800d9da:	4b22      	ldr	r3, [pc, #136]	; (800da64 <OV2640_DMA_Config+0x108>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d9e4:	621a      	str	r2, [r3, #32]
  _OV2640->dma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800d9e6:	4b1f      	ldr	r3, [pc, #124]	; (800da64 <OV2640_DMA_Config+0x108>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	2204      	movs	r2, #4
 800d9ee:	625a      	str	r2, [r3, #36]	; 0x24
  _OV2640->dma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800d9f0:	4b1c      	ldr	r3, [pc, #112]	; (800da64 <OV2640_DMA_Config+0x108>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	2203      	movs	r2, #3
 800d9f8:	629a      	str	r2, [r3, #40]	; 0x28
  _OV2640->dma->Init.MemBurst = DMA_MBURST_INC8;
 800d9fa:	4b1a      	ldr	r3, [pc, #104]	; (800da64 <OV2640_DMA_Config+0x108>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800da04:	62da      	str	r2, [r3, #44]	; 0x2c
  _OV2640->dma->Init.PeriphBurst = DMA_PBURST_SINGLE;
 800da06:	4b17      	ldr	r3, [pc, #92]	; (800da64 <OV2640_DMA_Config+0x108>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	631a      	str	r2, [r3, #48]	; 0x30

  __HAL_LINKDMA(_OV2640->dcmi, DMA_Handle, *(_OV2640->dma));
 800da10:	4b14      	ldr	r3, [pc, #80]	; (800da64 <OV2640_DMA_Config+0x108>)
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	4b13      	ldr	r3, [pc, #76]	; (800da64 <OV2640_DMA_Config+0x108>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	6852      	ldr	r2, [r2, #4]
 800da1c:	649a      	str	r2, [r3, #72]	; 0x48
 800da1e:	4b11      	ldr	r3, [pc, #68]	; (800da64 <OV2640_DMA_Config+0x108>)
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	4b10      	ldr	r3, [pc, #64]	; (800da64 <OV2640_DMA_Config+0x108>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	6812      	ldr	r2, [r2, #0]
 800da2a:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_DMA_Init(_OV2640->dma);
 800da2c:	4b0d      	ldr	r3, [pc, #52]	; (800da64 <OV2640_DMA_Config+0x108>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	4618      	mov	r0, r3
 800da34:	f7f5 f80c 	bl	8002a50 <HAL_DMA_Init>

  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800da38:	2200      	movs	r2, #0
 800da3a:	2100      	movs	r1, #0
 800da3c:	2039      	movs	r0, #57	; 0x39
 800da3e:	f7f4 fcca 	bl	80023d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800da42:	2039      	movs	r0, #57	; 0x39
 800da44:	f7f4 fce1 	bl	800240a <HAL_NVIC_EnableIRQ>

  HAL_DCMI_Start_DMA(_OV2640->dcmi, DCMI_MODE_SNAPSHOT, (uint32_t)DMA_Memory0BaseAddr, DMA_BufferSize);
 800da48:	4b06      	ldr	r3, [pc, #24]	; (800da64 <OV2640_DMA_Config+0x108>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	6818      	ldr	r0, [r3, #0]
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	2102      	movs	r1, #2
 800da54:	f7f4 fdea 	bl	800262c <HAL_DCMI_Start_DMA>
}
 800da58:	bf00      	nop
 800da5a:	3710      	adds	r7, #16
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	58024400 	.word	0x58024400
 800da64:	24000020 	.word	0x24000020
 800da68:	40020428 	.word	0x40020428

0800da6c <HAL_DCMI_FrameEventCallback>:
  * @retval None
  */
unsigned int tick = 0;
unsigned int num = 0;
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af02      	add	r7, sp, #8
 800da72:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(&hiwdg1);
 800da74:	4826      	ldr	r0, [pc, #152]	; (800db10 <HAL_DCMI_FrameEventCallback+0xa4>)
 800da76:	f7f9 f98f 	bl	8006d98 <HAL_IWDG_Refresh>
	LCD_ShowString_RGB565(470,445,300,32,32,"This is String Text");
 800da7a:	4b26      	ldr	r3, [pc, #152]	; (800db14 <HAL_DCMI_FrameEventCallback+0xa8>)
 800da7c:	9301      	str	r3, [sp, #4]
 800da7e:	2320      	movs	r3, #32
 800da80:	9300      	str	r3, [sp, #0]
 800da82:	2320      	movs	r3, #32
 800da84:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800da88:	f240 11bd 	movw	r1, #445	; 0x1bd
 800da8c:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 800da90:	f000 f9a4 	bl	800dddc <LCD_ShowString_RGB565>
	if(num == 0)	tick = HAL_GetTick();
 800da94:	4b20      	ldr	r3, [pc, #128]	; (800db18 <HAL_DCMI_FrameEventCallback+0xac>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d105      	bne.n	800daa8 <HAL_DCMI_FrameEventCallback+0x3c>
 800da9c:	f7f4 fb90 	bl	80021c0 <HAL_GetTick>
 800daa0:	4603      	mov	r3, r0
 800daa2:	4a1e      	ldr	r2, [pc, #120]	; (800db1c <HAL_DCMI_FrameEventCallback+0xb0>)
 800daa4:	6013      	str	r3, [r2, #0]
 800daa6:	e016      	b.n	800dad6 <HAL_DCMI_FrameEventCallback+0x6a>
	else if(num == 15)	tick = HAL_GetTick() - tick;
 800daa8:	4b1b      	ldr	r3, [pc, #108]	; (800db18 <HAL_DCMI_FrameEventCallback+0xac>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b0f      	cmp	r3, #15
 800daae:	d108      	bne.n	800dac2 <HAL_DCMI_FrameEventCallback+0x56>
 800dab0:	f7f4 fb86 	bl	80021c0 <HAL_GetTick>
 800dab4:	4602      	mov	r2, r0
 800dab6:	4b19      	ldr	r3, [pc, #100]	; (800db1c <HAL_DCMI_FrameEventCallback+0xb0>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	1ad3      	subs	r3, r2, r3
 800dabc:	4a17      	ldr	r2, [pc, #92]	; (800db1c <HAL_DCMI_FrameEventCallback+0xb0>)
 800dabe:	6013      	str	r3, [r2, #0]
 800dac0:	e009      	b.n	800dad6 <HAL_DCMI_FrameEventCallback+0x6a>
	else if(num == 16)	LOG("tick is %d\r\n",tick);
 800dac2:	4b15      	ldr	r3, [pc, #84]	; (800db18 <HAL_DCMI_FrameEventCallback+0xac>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b10      	cmp	r3, #16
 800dac8:	d105      	bne.n	800dad6 <HAL_DCMI_FrameEventCallback+0x6a>
 800daca:	4b14      	ldr	r3, [pc, #80]	; (800db1c <HAL_DCMI_FrameEventCallback+0xb0>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4619      	mov	r1, r3
 800dad0:	4813      	ldr	r0, [pc, #76]	; (800db20 <HAL_DCMI_FrameEventCallback+0xb4>)
 800dad2:	f7ff fe0d 	bl	800d6f0 <LOG>
	num ++;
 800dad6:	4b10      	ldr	r3, [pc, #64]	; (800db18 <HAL_DCMI_FrameEventCallback+0xac>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	3301      	adds	r3, #1
 800dadc:	4a0e      	ldr	r2, [pc, #56]	; (800db18 <HAL_DCMI_FrameEventCallback+0xac>)
 800dade:	6013      	str	r3, [r2, #0]
	LOG("frame : %d\r\n",num);
 800dae0:	4b0d      	ldr	r3, [pc, #52]	; (800db18 <HAL_DCMI_FrameEventCallback+0xac>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4619      	mov	r1, r3
 800dae6:	480f      	ldr	r0, [pc, #60]	; (800db24 <HAL_DCMI_FrameEventCallback+0xb8>)
 800dae8:	f7ff fe02 	bl	800d6f0 <LOG>
	OV2640_DMA_Config(_OV2640->frame->buffer, (_OV2640->frame->length)/4);
 800daec:	4b0e      	ldr	r3, [pc, #56]	; (800db28 <HAL_DCMI_FrameEventCallback+0xbc>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	4b0c      	ldr	r3, [pc, #48]	; (800db28 <HAL_DCMI_FrameEventCallback+0xbc>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	089b      	lsrs	r3, r3, #2
 800dafe:	4619      	mov	r1, r3
 800db00:	4610      	mov	r0, r2
 800db02:	f7ff ff2b 	bl	800d95c <OV2640_DMA_Config>
}
 800db06:	bf00      	nop
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	240001b0 	.word	0x240001b0
 800db14:	0800e854 	.word	0x0800e854
 800db18:	24000028 	.word	0x24000028
 800db1c:	24000024 	.word	0x24000024
 800db20:	0800e868 	.word	0x0800e868
 800db24:	0800e878 	.word	0x0800e878
 800db28:	24000020 	.word	0x24000020

0800db2c <I2Cx_Error>:
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(void)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	af00      	add	r7, sp, #0
  HAL_I2C_DeInit(_OV2640->i2c);
 800db30:	4b18      	ldr	r3, [pc, #96]	; (800db94 <I2Cx_Error+0x68>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	4618      	mov	r0, r3
 800db38:	f7f8 fbc0 	bl	80062bc <HAL_I2C_DeInit>
  if (HAL_I2C_GetState(_OV2640->i2c) == HAL_I2C_STATE_RESET)
 800db3c:	4b15      	ldr	r3, [pc, #84]	; (800db94 <I2Cx_Error+0x68>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	4618      	mov	r0, r3
 800db44:	f7f8 fe18 	bl	8006778 <HAL_I2C_GetState>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d11c      	bne.n	800db88 <I2Cx_Error+0x5c>
    {

      __HAL_RCC_I2C4_FORCE_RESET();
 800db4e:	4b12      	ldr	r3, [pc, #72]	; (800db98 <I2Cx_Error+0x6c>)
 800db50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800db54:	4a10      	ldr	r2, [pc, #64]	; (800db98 <I2Cx_Error+0x6c>)
 800db56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db5a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_I2C4_RELEASE_RESET();
 800db5e:	4b0e      	ldr	r3, [pc, #56]	; (800db98 <I2Cx_Error+0x6c>)
 800db60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800db64:	4a0c      	ldr	r2, [pc, #48]	; (800db98 <I2Cx_Error+0x6c>)
 800db66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

      HAL_I2C_Init(_OV2640->i2c);
 800db6e:	4b09      	ldr	r3, [pc, #36]	; (800db94 <I2Cx_Error+0x68>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	4618      	mov	r0, r3
 800db76:	f7f8 fb11 	bl	800619c <HAL_I2C_Init>

      HAL_I2CEx_AnalogFilter_Config(_OV2640->i2c, I2C_ANALOGFILTER_ENABLE);
 800db7a:	4b06      	ldr	r3, [pc, #24]	; (800db94 <I2Cx_Error+0x68>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	2100      	movs	r1, #0
 800db82:	4618      	mov	r0, r3
 800db84:	f7f9 f822 	bl	8006bcc <HAL_I2CEx_ConfigAnalogFilter>
    }
    HAL_Delay(100);
 800db88:	2064      	movs	r0, #100	; 0x64
 800db8a:	f7f4 fb25 	bl	80021d8 <HAL_Delay>
}
 800db8e:	bf00      	nop
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	24000020 	.word	0x24000020
 800db98:	58024400 	.word	0x58024400

0800db9c <OV2640_WriteReg>:
  * @param  ַ
  * @param
  * @retval
  */
uint8_t OV2640_WriteReg(uint16_t Addr, uint8_t Data)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b088      	sub	sp, #32
 800dba0:	af04      	add	r7, sp, #16
 800dba2:	4603      	mov	r3, r0
 800dba4:	460a      	mov	r2, r1
 800dba6:	80fb      	strh	r3, [r7, #6]
 800dba8:	4613      	mov	r3, r2
 800dbaa:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800dbac:	2300      	movs	r3, #0
 800dbae:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(_OV2640->i2c, OV2640_DEVICE_ADDRESS, (uint16_t)Addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Data, 1, 1000);
 800dbb0:	4b0d      	ldr	r3, [pc, #52]	; (800dbe8 <OV2640_WriteReg+0x4c>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	6898      	ldr	r0, [r3, #8]
 800dbb6:	88fa      	ldrh	r2, [r7, #6]
 800dbb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dbbc:	9302      	str	r3, [sp, #8]
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	9301      	str	r3, [sp, #4]
 800dbc2:	1d7b      	adds	r3, r7, #5
 800dbc4:	9300      	str	r3, [sp, #0]
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	2160      	movs	r1, #96	; 0x60
 800dbca:	f7f8 fba7 	bl	800631c <HAL_I2C_Mem_Write>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 800dbd2:	7bfb      	ldrb	r3, [r7, #15]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d001      	beq.n	800dbdc <OV2640_WriteReg+0x40>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error();
 800dbd8:	f7ff ffa8 	bl	800db2c <I2Cx_Error>
  }
  return status;
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	24000020 	.word	0x24000020

0800dbec <OV2640_ReadReg>:
/**
  * @brief
  * @param
  */
uint8_t OV2640_ReadReg(uint16_t Addr)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b088      	sub	sp, #32
 800dbf0:	af04      	add	r7, sp, #16
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	80fb      	strh	r3, [r7, #6]
  uint8_t Data = 0;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	73bb      	strb	r3, [r7, #14]

  HAL_StatusTypeDef status = HAL_OK;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(_OV2640->i2c, OV2640_DEVICE_ADDRESS, (uint16_t)Addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Data, 1, 1000);
 800dbfe:	4b0e      	ldr	r3, [pc, #56]	; (800dc38 <OV2640_ReadReg+0x4c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	6898      	ldr	r0, [r3, #8]
 800dc04:	88fa      	ldrh	r2, [r7, #6]
 800dc06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dc0a:	9302      	str	r3, [sp, #8]
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	9301      	str	r3, [sp, #4]
 800dc10:	f107 030e 	add.w	r3, r7, #14
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	2301      	movs	r3, #1
 800dc18:	2160      	movs	r1, #96	; 0x60
 800dc1a:	f7f8 fc93 	bl	8006544 <HAL_I2C_Mem_Read>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 800dc22:	7bfb      	ldrb	r3, [r7, #15]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d001      	beq.n	800dc2c <OV2640_ReadReg+0x40>
  {
    /* I2C error occurred */
    I2Cx_Error();
 800dc28:	f7ff ff80 	bl	800db2c <I2Cx_Error>
  }
  /* return the read data */
  return Data;
 800dc2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3710      	adds	r7, #16
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	24000020 	.word	0x24000020

0800dc3c <LCD_Draw_Point_RGB565>:
		}
	}
}

void LCD_Draw_Point_RGB565(uint16_t x,uint16_t y,uint16_t colour)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	4603      	mov	r3, r0
 800dc44:	80fb      	strh	r3, [r7, #6]
 800dc46:	460b      	mov	r3, r1
 800dc48:	80bb      	strh	r3, [r7, #4]
 800dc4a:	4613      	mov	r3, r2
 800dc4c:	807b      	strh	r3, [r7, #2]
	__IO uint16_t* addr = (__IO uint16_t*)(BUFFER_ADDRESS + (y*WIDTH + x)*2 );
 800dc4e:	88bb      	ldrh	r3, [r7, #4]
 800dc50:	f44f 7248 	mov.w	r2, #800	; 0x320
 800dc54:	fb02 f203 	mul.w	r2, r2, r3
 800dc58:	88fb      	ldrh	r3, [r7, #6]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	005b      	lsls	r3, r3, #1
 800dc5e:	f103 4310 	add.w	r3, r3, #2415919104	; 0x90000000
 800dc62:	60fb      	str	r3, [r7, #12]
	*addr = colour;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	887a      	ldrh	r2, [r7, #2]
 800dc68:	801a      	strh	r2, [r3, #0]
}
 800dc6a:	bf00      	nop
 800dc6c:	3714      	adds	r7, #20
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
	...

0800dc78 <LCD_Draw_Char_RGB565>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_Draw_Char_RGB565(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 800dc78:	b590      	push	{r4, r7, lr}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	4604      	mov	r4, r0
 800dc80:	4608      	mov	r0, r1
 800dc82:	4611      	mov	r1, r2
 800dc84:	461a      	mov	r2, r3
 800dc86:	4623      	mov	r3, r4
 800dc88:	80fb      	strh	r3, [r7, #6]
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	80bb      	strh	r3, [r7, #4]
 800dc8e:	460b      	mov	r3, r1
 800dc90:	70fb      	strb	r3, [r7, #3]
 800dc92:	4613      	mov	r3, r2
 800dc94:	70bb      	strb	r3, [r7, #2]
		uint8_t temp,t1,t;
		uint16_t y0=y;
 800dc96:	88bb      	ldrh	r3, [r7, #4]
 800dc98:	817b      	strh	r3, [r7, #10]
		uint8_t csize=(size/8+((size%8)?1:0))*(size/2);
 800dc9a:	78bb      	ldrb	r3, [r7, #2]
 800dc9c:	08db      	lsrs	r3, r3, #3
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	461a      	mov	r2, r3
 800dca2:	78bb      	ldrb	r3, [r7, #2]
 800dca4:	f003 0307 	and.w	r3, r3, #7
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	bf14      	ite	ne
 800dcae:	2301      	movne	r3, #1
 800dcb0:	2300      	moveq	r3, #0
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	4413      	add	r3, r2
 800dcb6:	b2da      	uxtb	r2, r3
 800dcb8:	78bb      	ldrb	r3, [r7, #2]
 800dcba:	085b      	lsrs	r3, r3, #1
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	fb12 f303 	smulbb	r3, r2, r3
 800dcc2:	727b      	strb	r3, [r7, #9]
	 	num=num-' ';
 800dcc4:	78fb      	ldrb	r3, [r7, #3]
 800dcc6:	3b20      	subs	r3, #32
 800dcc8:	70fb      	strb	r3, [r7, #3]
		for(t=0;t<csize;t++)
 800dcca:	2300      	movs	r3, #0
 800dccc:	737b      	strb	r3, [r7, #13]
 800dcce:	e072      	b.n	800ddb6 <LCD_Draw_Char_RGB565+0x13e>
		{
			if(size==12)temp=asc2_1206[num][t];
 800dcd0:	78bb      	ldrb	r3, [r7, #2]
 800dcd2:	2b0c      	cmp	r3, #12
 800dcd4:	d10b      	bne.n	800dcee <LCD_Draw_Char_RGB565+0x76>
 800dcd6:	78fa      	ldrb	r2, [r7, #3]
 800dcd8:	7b79      	ldrb	r1, [r7, #13]
 800dcda:	483c      	ldr	r0, [pc, #240]	; (800ddcc <LCD_Draw_Char_RGB565+0x154>)
 800dcdc:	4613      	mov	r3, r2
 800dcde:	005b      	lsls	r3, r3, #1
 800dce0:	4413      	add	r3, r2
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	4403      	add	r3, r0
 800dce6:	440b      	add	r3, r1
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	73fb      	strb	r3, [r7, #15]
 800dcec:	e025      	b.n	800dd3a <LCD_Draw_Char_RGB565+0xc2>
			else if(size==16)temp=asc2_1608[num][t];
 800dcee:	78bb      	ldrb	r3, [r7, #2]
 800dcf0:	2b10      	cmp	r3, #16
 800dcf2:	d108      	bne.n	800dd06 <LCD_Draw_Char_RGB565+0x8e>
 800dcf4:	78fa      	ldrb	r2, [r7, #3]
 800dcf6:	7b7b      	ldrb	r3, [r7, #13]
 800dcf8:	4935      	ldr	r1, [pc, #212]	; (800ddd0 <LCD_Draw_Char_RGB565+0x158>)
 800dcfa:	0112      	lsls	r2, r2, #4
 800dcfc:	440a      	add	r2, r1
 800dcfe:	4413      	add	r3, r2
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	73fb      	strb	r3, [r7, #15]
 800dd04:	e019      	b.n	800dd3a <LCD_Draw_Char_RGB565+0xc2>
			else if(size==24)temp=asc2_2412[num][t];
 800dd06:	78bb      	ldrb	r3, [r7, #2]
 800dd08:	2b18      	cmp	r3, #24
 800dd0a:	d10b      	bne.n	800dd24 <LCD_Draw_Char_RGB565+0xac>
 800dd0c:	78fa      	ldrb	r2, [r7, #3]
 800dd0e:	7b79      	ldrb	r1, [r7, #13]
 800dd10:	4830      	ldr	r0, [pc, #192]	; (800ddd4 <LCD_Draw_Char_RGB565+0x15c>)
 800dd12:	4613      	mov	r3, r2
 800dd14:	00db      	lsls	r3, r3, #3
 800dd16:	4413      	add	r3, r2
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4403      	add	r3, r0
 800dd1c:	440b      	add	r3, r1
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	73fb      	strb	r3, [r7, #15]
 800dd22:	e00a      	b.n	800dd3a <LCD_Draw_Char_RGB565+0xc2>
			else if(size==32)temp=asc2_3216[num][t];
 800dd24:	78bb      	ldrb	r3, [r7, #2]
 800dd26:	2b20      	cmp	r3, #32
 800dd28:	d14a      	bne.n	800ddc0 <LCD_Draw_Char_RGB565+0x148>
 800dd2a:	78fa      	ldrb	r2, [r7, #3]
 800dd2c:	7b7b      	ldrb	r3, [r7, #13]
 800dd2e:	492a      	ldr	r1, [pc, #168]	; (800ddd8 <LCD_Draw_Char_RGB565+0x160>)
 800dd30:	01d2      	lsls	r2, r2, #7
 800dd32:	440a      	add	r2, r1
 800dd34:	4413      	add	r3, r2
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	73fb      	strb	r3, [r7, #15]
			else return;
			for(t1=0;t1<8;t1++)
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	73bb      	strb	r3, [r7, #14]
 800dd3e:	e032      	b.n	800dda6 <LCD_Draw_Char_RGB565+0x12e>
			{
				if(temp&0x80)		LCD_Draw_Point_RGB565(x,y,0xffff);
 800dd40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	da07      	bge.n	800dd58 <LCD_Draw_Char_RGB565+0xe0>
 800dd48:	88b9      	ldrh	r1, [r7, #4]
 800dd4a:	88fb      	ldrh	r3, [r7, #6]
 800dd4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7ff ff73 	bl	800dc3c <LCD_Draw_Point_RGB565>
 800dd56:	e009      	b.n	800dd6c <LCD_Draw_Char_RGB565+0xf4>
				else if(mode==0) 	LCD_Draw_Point_RGB565(x,y,0x0000);
 800dd58:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d105      	bne.n	800dd6c <LCD_Draw_Char_RGB565+0xf4>
 800dd60:	88b9      	ldrh	r1, [r7, #4]
 800dd62:	88fb      	ldrh	r3, [r7, #6]
 800dd64:	2200      	movs	r2, #0
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7ff ff68 	bl	800dc3c <LCD_Draw_Point_RGB565>
				temp<<=1;
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	005b      	lsls	r3, r3, #1
 800dd70:	73fb      	strb	r3, [r7, #15]
				y++;
 800dd72:	88bb      	ldrh	r3, [r7, #4]
 800dd74:	3301      	adds	r3, #1
 800dd76:	80bb      	strh	r3, [r7, #4]
				if(y>=HEIGHT)return;
 800dd78:	88bb      	ldrh	r3, [r7, #4]
 800dd7a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800dd7e:	d221      	bcs.n	800ddc4 <LCD_Draw_Char_RGB565+0x14c>
				if((y-y0)==size)
 800dd80:	88ba      	ldrh	r2, [r7, #4]
 800dd82:	897b      	ldrh	r3, [r7, #10]
 800dd84:	1ad2      	subs	r2, r2, r3
 800dd86:	78bb      	ldrb	r3, [r7, #2]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d109      	bne.n	800dda0 <LCD_Draw_Char_RGB565+0x128>
				{
					y=y0;
 800dd8c:	897b      	ldrh	r3, [r7, #10]
 800dd8e:	80bb      	strh	r3, [r7, #4]
					x++;
 800dd90:	88fb      	ldrh	r3, [r7, #6]
 800dd92:	3301      	adds	r3, #1
 800dd94:	80fb      	strh	r3, [r7, #6]
					if(x>=WIDTH)return;
 800dd96:	88fb      	ldrh	r3, [r7, #6]
 800dd98:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800dd9c:	d307      	bcc.n	800ddae <LCD_Draw_Char_RGB565+0x136>
 800dd9e:	e012      	b.n	800ddc6 <LCD_Draw_Char_RGB565+0x14e>
			for(t1=0;t1<8;t1++)
 800dda0:	7bbb      	ldrb	r3, [r7, #14]
 800dda2:	3301      	adds	r3, #1
 800dda4:	73bb      	strb	r3, [r7, #14]
 800dda6:	7bbb      	ldrb	r3, [r7, #14]
 800dda8:	2b07      	cmp	r3, #7
 800ddaa:	d9c9      	bls.n	800dd40 <LCD_Draw_Char_RGB565+0xc8>
 800ddac:	e000      	b.n	800ddb0 <LCD_Draw_Char_RGB565+0x138>
					break;
 800ddae:	bf00      	nop
		for(t=0;t<csize;t++)
 800ddb0:	7b7b      	ldrb	r3, [r7, #13]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	737b      	strb	r3, [r7, #13]
 800ddb6:	7b7a      	ldrb	r2, [r7, #13]
 800ddb8:	7a7b      	ldrb	r3, [r7, #9]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d388      	bcc.n	800dcd0 <LCD_Draw_Char_RGB565+0x58>
 800ddbe:	e002      	b.n	800ddc6 <LCD_Draw_Char_RGB565+0x14e>
			else return;
 800ddc0:	bf00      	nop
 800ddc2:	e000      	b.n	800ddc6 <LCD_Draw_Char_RGB565+0x14e>
				if(y>=HEIGHT)return;
 800ddc4:	bf00      	nop
				}
			}
		}
}
 800ddc6:	3714      	adds	r7, #20
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd90      	pop	{r4, r7, pc}
 800ddcc:	0800ea84 	.word	0x0800ea84
 800ddd0:	0800eef8 	.word	0x0800eef8
 800ddd4:	0800f4e8 	.word	0x0800f4e8
 800ddd8:	08010244 	.word	0x08010244

0800dddc <LCD_ShowString_RGB565>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString_RGB565(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 800dddc:	b590      	push	{r4, r7, lr}
 800ddde:	b087      	sub	sp, #28
 800dde0:	af02      	add	r7, sp, #8
 800dde2:	4604      	mov	r4, r0
 800dde4:	4608      	mov	r0, r1
 800dde6:	4611      	mov	r1, r2
 800dde8:	461a      	mov	r2, r3
 800ddea:	4623      	mov	r3, r4
 800ddec:	80fb      	strh	r3, [r7, #6]
 800ddee:	4603      	mov	r3, r0
 800ddf0:	80bb      	strh	r3, [r7, #4]
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	807b      	strh	r3, [r7, #2]
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 800ddfa:	88fb      	ldrh	r3, [r7, #6]
 800ddfc:	73fb      	strb	r3, [r7, #15]
	width+=x;
 800ddfe:	887a      	ldrh	r2, [r7, #2]
 800de00:	88fb      	ldrh	r3, [r7, #6]
 800de02:	4413      	add	r3, r2
 800de04:	807b      	strh	r3, [r7, #2]
	height+=y;
 800de06:	883a      	ldrh	r2, [r7, #0]
 800de08:	88bb      	ldrh	r3, [r7, #4]
 800de0a:	4413      	add	r3, r2
 800de0c:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))
 800de0e:	e024      	b.n	800de5a <LCD_ShowString_RGB565+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 800de10:	88fa      	ldrh	r2, [r7, #6]
 800de12:	887b      	ldrh	r3, [r7, #2]
 800de14:	429a      	cmp	r2, r3
 800de16:	d307      	bcc.n	800de28 <LCD_ShowString_RGB565+0x4c>
 800de18:	7bfb      	ldrb	r3, [r7, #15]
 800de1a:	80fb      	strh	r3, [r7, #6]
 800de1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de20:	b29a      	uxth	r2, r3
 800de22:	88bb      	ldrh	r3, [r7, #4]
 800de24:	4413      	add	r3, r2
 800de26:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;
 800de28:	88ba      	ldrh	r2, [r7, #4]
 800de2a:	883b      	ldrh	r3, [r7, #0]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d21d      	bcs.n	800de6c <LCD_ShowString_RGB565+0x90>
        LCD_Draw_Char_RGB565(x,y,*p,size,0);
 800de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de32:	781a      	ldrb	r2, [r3, #0]
 800de34:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de38:	88b9      	ldrh	r1, [r7, #4]
 800de3a:	88f8      	ldrh	r0, [r7, #6]
 800de3c:	2400      	movs	r4, #0
 800de3e:	9400      	str	r4, [sp, #0]
 800de40:	f7ff ff1a 	bl	800dc78 <LCD_Draw_Char_RGB565>
        x+=size/2;
 800de44:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de48:	085b      	lsrs	r3, r3, #1
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	88fb      	ldrh	r3, [r7, #6]
 800de50:	4413      	add	r3, r2
 800de52:	80fb      	strh	r3, [r7, #6]
        p++;
 800de54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de56:	3301      	adds	r3, #1
 800de58:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))
 800de5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	2b7e      	cmp	r3, #126	; 0x7e
 800de60:	d805      	bhi.n	800de6e <LCD_ShowString_RGB565+0x92>
 800de62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	2b1f      	cmp	r3, #31
 800de68:	d8d2      	bhi.n	800de10 <LCD_ShowString_RGB565+0x34>
    }
}
 800de6a:	e000      	b.n	800de6e <LCD_ShowString_RGB565+0x92>
        if(y>=height)break;
 800de6c:	bf00      	nop
}
 800de6e:	bf00      	nop
 800de70:	3714      	adds	r7, #20
 800de72:	46bd      	mov	sp, r7
 800de74:	bd90      	pop	{r4, r7, pc}
	...

0800de78 <__errno>:
 800de78:	4b01      	ldr	r3, [pc, #4]	; (800de80 <__errno+0x8>)
 800de7a:	6818      	ldr	r0, [r3, #0]
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	2000003c 	.word	0x2000003c

0800de84 <__libc_init_array>:
 800de84:	b570      	push	{r4, r5, r6, lr}
 800de86:	4d0d      	ldr	r5, [pc, #52]	; (800debc <__libc_init_array+0x38>)
 800de88:	4c0d      	ldr	r4, [pc, #52]	; (800dec0 <__libc_init_array+0x3c>)
 800de8a:	1b64      	subs	r4, r4, r5
 800de8c:	10a4      	asrs	r4, r4, #2
 800de8e:	2600      	movs	r6, #0
 800de90:	42a6      	cmp	r6, r4
 800de92:	d109      	bne.n	800dea8 <__libc_init_array+0x24>
 800de94:	4d0b      	ldr	r5, [pc, #44]	; (800dec4 <__libc_init_array+0x40>)
 800de96:	4c0c      	ldr	r4, [pc, #48]	; (800dec8 <__libc_init_array+0x44>)
 800de98:	f000 fc68 	bl	800e76c <_init>
 800de9c:	1b64      	subs	r4, r4, r5
 800de9e:	10a4      	asrs	r4, r4, #2
 800dea0:	2600      	movs	r6, #0
 800dea2:	42a6      	cmp	r6, r4
 800dea4:	d105      	bne.n	800deb2 <__libc_init_array+0x2e>
 800dea6:	bd70      	pop	{r4, r5, r6, pc}
 800dea8:	f855 3b04 	ldr.w	r3, [r5], #4
 800deac:	4798      	blx	r3
 800deae:	3601      	adds	r6, #1
 800deb0:	e7ee      	b.n	800de90 <__libc_init_array+0xc>
 800deb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800deb6:	4798      	blx	r3
 800deb8:	3601      	adds	r6, #1
 800deba:	e7f2      	b.n	800dea2 <__libc_init_array+0x1e>
 800debc:	08013260 	.word	0x08013260
 800dec0:	08013260 	.word	0x08013260
 800dec4:	08013260 	.word	0x08013260
 800dec8:	08013264 	.word	0x08013264

0800decc <memcpy>:
 800decc:	440a      	add	r2, r1
 800dece:	4291      	cmp	r1, r2
 800ded0:	f100 33ff 	add.w	r3, r0, #4294967295
 800ded4:	d100      	bne.n	800ded8 <memcpy+0xc>
 800ded6:	4770      	bx	lr
 800ded8:	b510      	push	{r4, lr}
 800deda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dede:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dee2:	4291      	cmp	r1, r2
 800dee4:	d1f9      	bne.n	800deda <memcpy+0xe>
 800dee6:	bd10      	pop	{r4, pc}

0800dee8 <memset>:
 800dee8:	4402      	add	r2, r0
 800deea:	4603      	mov	r3, r0
 800deec:	4293      	cmp	r3, r2
 800deee:	d100      	bne.n	800def2 <memset+0xa>
 800def0:	4770      	bx	lr
 800def2:	f803 1b01 	strb.w	r1, [r3], #1
 800def6:	e7f9      	b.n	800deec <memset+0x4>

0800def8 <_vsniprintf_r>:
 800def8:	b530      	push	{r4, r5, lr}
 800defa:	1e14      	subs	r4, r2, #0
 800defc:	4605      	mov	r5, r0
 800defe:	b09b      	sub	sp, #108	; 0x6c
 800df00:	4618      	mov	r0, r3
 800df02:	da05      	bge.n	800df10 <_vsniprintf_r+0x18>
 800df04:	238b      	movs	r3, #139	; 0x8b
 800df06:	602b      	str	r3, [r5, #0]
 800df08:	f04f 30ff 	mov.w	r0, #4294967295
 800df0c:	b01b      	add	sp, #108	; 0x6c
 800df0e:	bd30      	pop	{r4, r5, pc}
 800df10:	f44f 7302 	mov.w	r3, #520	; 0x208
 800df14:	f8ad 300c 	strh.w	r3, [sp, #12]
 800df18:	bf14      	ite	ne
 800df1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800df1e:	4623      	moveq	r3, r4
 800df20:	9302      	str	r3, [sp, #8]
 800df22:	9305      	str	r3, [sp, #20]
 800df24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df28:	9100      	str	r1, [sp, #0]
 800df2a:	9104      	str	r1, [sp, #16]
 800df2c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800df30:	4602      	mov	r2, r0
 800df32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800df34:	4669      	mov	r1, sp
 800df36:	4628      	mov	r0, r5
 800df38:	f000 f8d0 	bl	800e0dc <_svfiprintf_r>
 800df3c:	1c43      	adds	r3, r0, #1
 800df3e:	bfbc      	itt	lt
 800df40:	238b      	movlt	r3, #139	; 0x8b
 800df42:	602b      	strlt	r3, [r5, #0]
 800df44:	2c00      	cmp	r4, #0
 800df46:	d0e1      	beq.n	800df0c <_vsniprintf_r+0x14>
 800df48:	9b00      	ldr	r3, [sp, #0]
 800df4a:	2200      	movs	r2, #0
 800df4c:	701a      	strb	r2, [r3, #0]
 800df4e:	e7dd      	b.n	800df0c <_vsniprintf_r+0x14>

0800df50 <vsniprintf>:
 800df50:	b507      	push	{r0, r1, r2, lr}
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	4613      	mov	r3, r2
 800df56:	460a      	mov	r2, r1
 800df58:	4601      	mov	r1, r0
 800df5a:	4803      	ldr	r0, [pc, #12]	; (800df68 <vsniprintf+0x18>)
 800df5c:	6800      	ldr	r0, [r0, #0]
 800df5e:	f7ff ffcb 	bl	800def8 <_vsniprintf_r>
 800df62:	b003      	add	sp, #12
 800df64:	f85d fb04 	ldr.w	pc, [sp], #4
 800df68:	2000003c 	.word	0x2000003c

0800df6c <__retarget_lock_acquire_recursive>:
 800df6c:	4770      	bx	lr

0800df6e <__retarget_lock_release_recursive>:
 800df6e:	4770      	bx	lr

0800df70 <_malloc_r>:
 800df70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df72:	1ccd      	adds	r5, r1, #3
 800df74:	f025 0503 	bic.w	r5, r5, #3
 800df78:	3508      	adds	r5, #8
 800df7a:	2d0c      	cmp	r5, #12
 800df7c:	bf38      	it	cc
 800df7e:	250c      	movcc	r5, #12
 800df80:	2d00      	cmp	r5, #0
 800df82:	4606      	mov	r6, r0
 800df84:	db01      	blt.n	800df8a <_malloc_r+0x1a>
 800df86:	42a9      	cmp	r1, r5
 800df88:	d903      	bls.n	800df92 <_malloc_r+0x22>
 800df8a:	230c      	movs	r3, #12
 800df8c:	6033      	str	r3, [r6, #0]
 800df8e:	2000      	movs	r0, #0
 800df90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df92:	f000 fb61 	bl	800e658 <__malloc_lock>
 800df96:	4921      	ldr	r1, [pc, #132]	; (800e01c <_malloc_r+0xac>)
 800df98:	680a      	ldr	r2, [r1, #0]
 800df9a:	4614      	mov	r4, r2
 800df9c:	b99c      	cbnz	r4, 800dfc6 <_malloc_r+0x56>
 800df9e:	4f20      	ldr	r7, [pc, #128]	; (800e020 <_malloc_r+0xb0>)
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	b923      	cbnz	r3, 800dfae <_malloc_r+0x3e>
 800dfa4:	4621      	mov	r1, r4
 800dfa6:	4630      	mov	r0, r6
 800dfa8:	f000 fb2c 	bl	800e604 <_sbrk_r>
 800dfac:	6038      	str	r0, [r7, #0]
 800dfae:	4629      	mov	r1, r5
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	f000 fb27 	bl	800e604 <_sbrk_r>
 800dfb6:	1c43      	adds	r3, r0, #1
 800dfb8:	d123      	bne.n	800e002 <_malloc_r+0x92>
 800dfba:	230c      	movs	r3, #12
 800dfbc:	6033      	str	r3, [r6, #0]
 800dfbe:	4630      	mov	r0, r6
 800dfc0:	f000 fb50 	bl	800e664 <__malloc_unlock>
 800dfc4:	e7e3      	b.n	800df8e <_malloc_r+0x1e>
 800dfc6:	6823      	ldr	r3, [r4, #0]
 800dfc8:	1b5b      	subs	r3, r3, r5
 800dfca:	d417      	bmi.n	800dffc <_malloc_r+0x8c>
 800dfcc:	2b0b      	cmp	r3, #11
 800dfce:	d903      	bls.n	800dfd8 <_malloc_r+0x68>
 800dfd0:	6023      	str	r3, [r4, #0]
 800dfd2:	441c      	add	r4, r3
 800dfd4:	6025      	str	r5, [r4, #0]
 800dfd6:	e004      	b.n	800dfe2 <_malloc_r+0x72>
 800dfd8:	6863      	ldr	r3, [r4, #4]
 800dfda:	42a2      	cmp	r2, r4
 800dfdc:	bf0c      	ite	eq
 800dfde:	600b      	streq	r3, [r1, #0]
 800dfe0:	6053      	strne	r3, [r2, #4]
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f000 fb3e 	bl	800e664 <__malloc_unlock>
 800dfe8:	f104 000b 	add.w	r0, r4, #11
 800dfec:	1d23      	adds	r3, r4, #4
 800dfee:	f020 0007 	bic.w	r0, r0, #7
 800dff2:	1ac2      	subs	r2, r0, r3
 800dff4:	d0cc      	beq.n	800df90 <_malloc_r+0x20>
 800dff6:	1a1b      	subs	r3, r3, r0
 800dff8:	50a3      	str	r3, [r4, r2]
 800dffa:	e7c9      	b.n	800df90 <_malloc_r+0x20>
 800dffc:	4622      	mov	r2, r4
 800dffe:	6864      	ldr	r4, [r4, #4]
 800e000:	e7cc      	b.n	800df9c <_malloc_r+0x2c>
 800e002:	1cc4      	adds	r4, r0, #3
 800e004:	f024 0403 	bic.w	r4, r4, #3
 800e008:	42a0      	cmp	r0, r4
 800e00a:	d0e3      	beq.n	800dfd4 <_malloc_r+0x64>
 800e00c:	1a21      	subs	r1, r4, r0
 800e00e:	4630      	mov	r0, r6
 800e010:	f000 faf8 	bl	800e604 <_sbrk_r>
 800e014:	3001      	adds	r0, #1
 800e016:	d1dd      	bne.n	800dfd4 <_malloc_r+0x64>
 800e018:	e7cf      	b.n	800dfba <_malloc_r+0x4a>
 800e01a:	bf00      	nop
 800e01c:	2400002c 	.word	0x2400002c
 800e020:	24000030 	.word	0x24000030

0800e024 <__ssputs_r>:
 800e024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e028:	688e      	ldr	r6, [r1, #8]
 800e02a:	429e      	cmp	r6, r3
 800e02c:	4682      	mov	sl, r0
 800e02e:	460c      	mov	r4, r1
 800e030:	4690      	mov	r8, r2
 800e032:	461f      	mov	r7, r3
 800e034:	d838      	bhi.n	800e0a8 <__ssputs_r+0x84>
 800e036:	898a      	ldrh	r2, [r1, #12]
 800e038:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e03c:	d032      	beq.n	800e0a4 <__ssputs_r+0x80>
 800e03e:	6825      	ldr	r5, [r4, #0]
 800e040:	6909      	ldr	r1, [r1, #16]
 800e042:	eba5 0901 	sub.w	r9, r5, r1
 800e046:	6965      	ldr	r5, [r4, #20]
 800e048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e04c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e050:	3301      	adds	r3, #1
 800e052:	444b      	add	r3, r9
 800e054:	106d      	asrs	r5, r5, #1
 800e056:	429d      	cmp	r5, r3
 800e058:	bf38      	it	cc
 800e05a:	461d      	movcc	r5, r3
 800e05c:	0553      	lsls	r3, r2, #21
 800e05e:	d531      	bpl.n	800e0c4 <__ssputs_r+0xa0>
 800e060:	4629      	mov	r1, r5
 800e062:	f7ff ff85 	bl	800df70 <_malloc_r>
 800e066:	4606      	mov	r6, r0
 800e068:	b950      	cbnz	r0, 800e080 <__ssputs_r+0x5c>
 800e06a:	230c      	movs	r3, #12
 800e06c:	f8ca 3000 	str.w	r3, [sl]
 800e070:	89a3      	ldrh	r3, [r4, #12]
 800e072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e076:	81a3      	strh	r3, [r4, #12]
 800e078:	f04f 30ff 	mov.w	r0, #4294967295
 800e07c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e080:	6921      	ldr	r1, [r4, #16]
 800e082:	464a      	mov	r2, r9
 800e084:	f7ff ff22 	bl	800decc <memcpy>
 800e088:	89a3      	ldrh	r3, [r4, #12]
 800e08a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e08e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e092:	81a3      	strh	r3, [r4, #12]
 800e094:	6126      	str	r6, [r4, #16]
 800e096:	6165      	str	r5, [r4, #20]
 800e098:	444e      	add	r6, r9
 800e09a:	eba5 0509 	sub.w	r5, r5, r9
 800e09e:	6026      	str	r6, [r4, #0]
 800e0a0:	60a5      	str	r5, [r4, #8]
 800e0a2:	463e      	mov	r6, r7
 800e0a4:	42be      	cmp	r6, r7
 800e0a6:	d900      	bls.n	800e0aa <__ssputs_r+0x86>
 800e0a8:	463e      	mov	r6, r7
 800e0aa:	4632      	mov	r2, r6
 800e0ac:	6820      	ldr	r0, [r4, #0]
 800e0ae:	4641      	mov	r1, r8
 800e0b0:	f000 fab8 	bl	800e624 <memmove>
 800e0b4:	68a3      	ldr	r3, [r4, #8]
 800e0b6:	6822      	ldr	r2, [r4, #0]
 800e0b8:	1b9b      	subs	r3, r3, r6
 800e0ba:	4432      	add	r2, r6
 800e0bc:	60a3      	str	r3, [r4, #8]
 800e0be:	6022      	str	r2, [r4, #0]
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	e7db      	b.n	800e07c <__ssputs_r+0x58>
 800e0c4:	462a      	mov	r2, r5
 800e0c6:	f000 fb23 	bl	800e710 <_realloc_r>
 800e0ca:	4606      	mov	r6, r0
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d1e1      	bne.n	800e094 <__ssputs_r+0x70>
 800e0d0:	6921      	ldr	r1, [r4, #16]
 800e0d2:	4650      	mov	r0, sl
 800e0d4:	f000 facc 	bl	800e670 <_free_r>
 800e0d8:	e7c7      	b.n	800e06a <__ssputs_r+0x46>
	...

0800e0dc <_svfiprintf_r>:
 800e0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e0:	4698      	mov	r8, r3
 800e0e2:	898b      	ldrh	r3, [r1, #12]
 800e0e4:	061b      	lsls	r3, r3, #24
 800e0e6:	b09d      	sub	sp, #116	; 0x74
 800e0e8:	4607      	mov	r7, r0
 800e0ea:	460d      	mov	r5, r1
 800e0ec:	4614      	mov	r4, r2
 800e0ee:	d50e      	bpl.n	800e10e <_svfiprintf_r+0x32>
 800e0f0:	690b      	ldr	r3, [r1, #16]
 800e0f2:	b963      	cbnz	r3, 800e10e <_svfiprintf_r+0x32>
 800e0f4:	2140      	movs	r1, #64	; 0x40
 800e0f6:	f7ff ff3b 	bl	800df70 <_malloc_r>
 800e0fa:	6028      	str	r0, [r5, #0]
 800e0fc:	6128      	str	r0, [r5, #16]
 800e0fe:	b920      	cbnz	r0, 800e10a <_svfiprintf_r+0x2e>
 800e100:	230c      	movs	r3, #12
 800e102:	603b      	str	r3, [r7, #0]
 800e104:	f04f 30ff 	mov.w	r0, #4294967295
 800e108:	e0d1      	b.n	800e2ae <_svfiprintf_r+0x1d2>
 800e10a:	2340      	movs	r3, #64	; 0x40
 800e10c:	616b      	str	r3, [r5, #20]
 800e10e:	2300      	movs	r3, #0
 800e110:	9309      	str	r3, [sp, #36]	; 0x24
 800e112:	2320      	movs	r3, #32
 800e114:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e118:	f8cd 800c 	str.w	r8, [sp, #12]
 800e11c:	2330      	movs	r3, #48	; 0x30
 800e11e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e2c8 <_svfiprintf_r+0x1ec>
 800e122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e126:	f04f 0901 	mov.w	r9, #1
 800e12a:	4623      	mov	r3, r4
 800e12c:	469a      	mov	sl, r3
 800e12e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e132:	b10a      	cbz	r2, 800e138 <_svfiprintf_r+0x5c>
 800e134:	2a25      	cmp	r2, #37	; 0x25
 800e136:	d1f9      	bne.n	800e12c <_svfiprintf_r+0x50>
 800e138:	ebba 0b04 	subs.w	fp, sl, r4
 800e13c:	d00b      	beq.n	800e156 <_svfiprintf_r+0x7a>
 800e13e:	465b      	mov	r3, fp
 800e140:	4622      	mov	r2, r4
 800e142:	4629      	mov	r1, r5
 800e144:	4638      	mov	r0, r7
 800e146:	f7ff ff6d 	bl	800e024 <__ssputs_r>
 800e14a:	3001      	adds	r0, #1
 800e14c:	f000 80aa 	beq.w	800e2a4 <_svfiprintf_r+0x1c8>
 800e150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e152:	445a      	add	r2, fp
 800e154:	9209      	str	r2, [sp, #36]	; 0x24
 800e156:	f89a 3000 	ldrb.w	r3, [sl]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 80a2 	beq.w	800e2a4 <_svfiprintf_r+0x1c8>
 800e160:	2300      	movs	r3, #0
 800e162:	f04f 32ff 	mov.w	r2, #4294967295
 800e166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e16a:	f10a 0a01 	add.w	sl, sl, #1
 800e16e:	9304      	str	r3, [sp, #16]
 800e170:	9307      	str	r3, [sp, #28]
 800e172:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e176:	931a      	str	r3, [sp, #104]	; 0x68
 800e178:	4654      	mov	r4, sl
 800e17a:	2205      	movs	r2, #5
 800e17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e180:	4851      	ldr	r0, [pc, #324]	; (800e2c8 <_svfiprintf_r+0x1ec>)
 800e182:	f7f2 f8cd 	bl	8000320 <memchr>
 800e186:	9a04      	ldr	r2, [sp, #16]
 800e188:	b9d8      	cbnz	r0, 800e1c2 <_svfiprintf_r+0xe6>
 800e18a:	06d0      	lsls	r0, r2, #27
 800e18c:	bf44      	itt	mi
 800e18e:	2320      	movmi	r3, #32
 800e190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e194:	0711      	lsls	r1, r2, #28
 800e196:	bf44      	itt	mi
 800e198:	232b      	movmi	r3, #43	; 0x2b
 800e19a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e19e:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a2:	2b2a      	cmp	r3, #42	; 0x2a
 800e1a4:	d015      	beq.n	800e1d2 <_svfiprintf_r+0xf6>
 800e1a6:	9a07      	ldr	r2, [sp, #28]
 800e1a8:	4654      	mov	r4, sl
 800e1aa:	2000      	movs	r0, #0
 800e1ac:	f04f 0c0a 	mov.w	ip, #10
 800e1b0:	4621      	mov	r1, r4
 800e1b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1b6:	3b30      	subs	r3, #48	; 0x30
 800e1b8:	2b09      	cmp	r3, #9
 800e1ba:	d94e      	bls.n	800e25a <_svfiprintf_r+0x17e>
 800e1bc:	b1b0      	cbz	r0, 800e1ec <_svfiprintf_r+0x110>
 800e1be:	9207      	str	r2, [sp, #28]
 800e1c0:	e014      	b.n	800e1ec <_svfiprintf_r+0x110>
 800e1c2:	eba0 0308 	sub.w	r3, r0, r8
 800e1c6:	fa09 f303 	lsl.w	r3, r9, r3
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	9304      	str	r3, [sp, #16]
 800e1ce:	46a2      	mov	sl, r4
 800e1d0:	e7d2      	b.n	800e178 <_svfiprintf_r+0x9c>
 800e1d2:	9b03      	ldr	r3, [sp, #12]
 800e1d4:	1d19      	adds	r1, r3, #4
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	9103      	str	r1, [sp, #12]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	bfbb      	ittet	lt
 800e1de:	425b      	neglt	r3, r3
 800e1e0:	f042 0202 	orrlt.w	r2, r2, #2
 800e1e4:	9307      	strge	r3, [sp, #28]
 800e1e6:	9307      	strlt	r3, [sp, #28]
 800e1e8:	bfb8      	it	lt
 800e1ea:	9204      	strlt	r2, [sp, #16]
 800e1ec:	7823      	ldrb	r3, [r4, #0]
 800e1ee:	2b2e      	cmp	r3, #46	; 0x2e
 800e1f0:	d10c      	bne.n	800e20c <_svfiprintf_r+0x130>
 800e1f2:	7863      	ldrb	r3, [r4, #1]
 800e1f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e1f6:	d135      	bne.n	800e264 <_svfiprintf_r+0x188>
 800e1f8:	9b03      	ldr	r3, [sp, #12]
 800e1fa:	1d1a      	adds	r2, r3, #4
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	9203      	str	r2, [sp, #12]
 800e200:	2b00      	cmp	r3, #0
 800e202:	bfb8      	it	lt
 800e204:	f04f 33ff 	movlt.w	r3, #4294967295
 800e208:	3402      	adds	r4, #2
 800e20a:	9305      	str	r3, [sp, #20]
 800e20c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e2d8 <_svfiprintf_r+0x1fc>
 800e210:	7821      	ldrb	r1, [r4, #0]
 800e212:	2203      	movs	r2, #3
 800e214:	4650      	mov	r0, sl
 800e216:	f7f2 f883 	bl	8000320 <memchr>
 800e21a:	b140      	cbz	r0, 800e22e <_svfiprintf_r+0x152>
 800e21c:	2340      	movs	r3, #64	; 0x40
 800e21e:	eba0 000a 	sub.w	r0, r0, sl
 800e222:	fa03 f000 	lsl.w	r0, r3, r0
 800e226:	9b04      	ldr	r3, [sp, #16]
 800e228:	4303      	orrs	r3, r0
 800e22a:	3401      	adds	r4, #1
 800e22c:	9304      	str	r3, [sp, #16]
 800e22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e232:	4826      	ldr	r0, [pc, #152]	; (800e2cc <_svfiprintf_r+0x1f0>)
 800e234:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e238:	2206      	movs	r2, #6
 800e23a:	f7f2 f871 	bl	8000320 <memchr>
 800e23e:	2800      	cmp	r0, #0
 800e240:	d038      	beq.n	800e2b4 <_svfiprintf_r+0x1d8>
 800e242:	4b23      	ldr	r3, [pc, #140]	; (800e2d0 <_svfiprintf_r+0x1f4>)
 800e244:	bb1b      	cbnz	r3, 800e28e <_svfiprintf_r+0x1b2>
 800e246:	9b03      	ldr	r3, [sp, #12]
 800e248:	3307      	adds	r3, #7
 800e24a:	f023 0307 	bic.w	r3, r3, #7
 800e24e:	3308      	adds	r3, #8
 800e250:	9303      	str	r3, [sp, #12]
 800e252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e254:	4433      	add	r3, r6
 800e256:	9309      	str	r3, [sp, #36]	; 0x24
 800e258:	e767      	b.n	800e12a <_svfiprintf_r+0x4e>
 800e25a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e25e:	460c      	mov	r4, r1
 800e260:	2001      	movs	r0, #1
 800e262:	e7a5      	b.n	800e1b0 <_svfiprintf_r+0xd4>
 800e264:	2300      	movs	r3, #0
 800e266:	3401      	adds	r4, #1
 800e268:	9305      	str	r3, [sp, #20]
 800e26a:	4619      	mov	r1, r3
 800e26c:	f04f 0c0a 	mov.w	ip, #10
 800e270:	4620      	mov	r0, r4
 800e272:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e276:	3a30      	subs	r2, #48	; 0x30
 800e278:	2a09      	cmp	r2, #9
 800e27a:	d903      	bls.n	800e284 <_svfiprintf_r+0x1a8>
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d0c5      	beq.n	800e20c <_svfiprintf_r+0x130>
 800e280:	9105      	str	r1, [sp, #20]
 800e282:	e7c3      	b.n	800e20c <_svfiprintf_r+0x130>
 800e284:	fb0c 2101 	mla	r1, ip, r1, r2
 800e288:	4604      	mov	r4, r0
 800e28a:	2301      	movs	r3, #1
 800e28c:	e7f0      	b.n	800e270 <_svfiprintf_r+0x194>
 800e28e:	ab03      	add	r3, sp, #12
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	462a      	mov	r2, r5
 800e294:	4b0f      	ldr	r3, [pc, #60]	; (800e2d4 <_svfiprintf_r+0x1f8>)
 800e296:	a904      	add	r1, sp, #16
 800e298:	4638      	mov	r0, r7
 800e29a:	f3af 8000 	nop.w
 800e29e:	1c42      	adds	r2, r0, #1
 800e2a0:	4606      	mov	r6, r0
 800e2a2:	d1d6      	bne.n	800e252 <_svfiprintf_r+0x176>
 800e2a4:	89ab      	ldrh	r3, [r5, #12]
 800e2a6:	065b      	lsls	r3, r3, #25
 800e2a8:	f53f af2c 	bmi.w	800e104 <_svfiprintf_r+0x28>
 800e2ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2ae:	b01d      	add	sp, #116	; 0x74
 800e2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2b4:	ab03      	add	r3, sp, #12
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	462a      	mov	r2, r5
 800e2ba:	4b06      	ldr	r3, [pc, #24]	; (800e2d4 <_svfiprintf_r+0x1f8>)
 800e2bc:	a904      	add	r1, sp, #16
 800e2be:	4638      	mov	r0, r7
 800e2c0:	f000 f87a 	bl	800e3b8 <_printf_i>
 800e2c4:	e7eb      	b.n	800e29e <_svfiprintf_r+0x1c2>
 800e2c6:	bf00      	nop
 800e2c8:	08013224 	.word	0x08013224
 800e2cc:	0801322e 	.word	0x0801322e
 800e2d0:	00000000 	.word	0x00000000
 800e2d4:	0800e025 	.word	0x0800e025
 800e2d8:	0801322a 	.word	0x0801322a

0800e2dc <_printf_common>:
 800e2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e0:	4616      	mov	r6, r2
 800e2e2:	4699      	mov	r9, r3
 800e2e4:	688a      	ldr	r2, [r1, #8]
 800e2e6:	690b      	ldr	r3, [r1, #16]
 800e2e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	bfb8      	it	lt
 800e2f0:	4613      	movlt	r3, r2
 800e2f2:	6033      	str	r3, [r6, #0]
 800e2f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e2f8:	4607      	mov	r7, r0
 800e2fa:	460c      	mov	r4, r1
 800e2fc:	b10a      	cbz	r2, 800e302 <_printf_common+0x26>
 800e2fe:	3301      	adds	r3, #1
 800e300:	6033      	str	r3, [r6, #0]
 800e302:	6823      	ldr	r3, [r4, #0]
 800e304:	0699      	lsls	r1, r3, #26
 800e306:	bf42      	ittt	mi
 800e308:	6833      	ldrmi	r3, [r6, #0]
 800e30a:	3302      	addmi	r3, #2
 800e30c:	6033      	strmi	r3, [r6, #0]
 800e30e:	6825      	ldr	r5, [r4, #0]
 800e310:	f015 0506 	ands.w	r5, r5, #6
 800e314:	d106      	bne.n	800e324 <_printf_common+0x48>
 800e316:	f104 0a19 	add.w	sl, r4, #25
 800e31a:	68e3      	ldr	r3, [r4, #12]
 800e31c:	6832      	ldr	r2, [r6, #0]
 800e31e:	1a9b      	subs	r3, r3, r2
 800e320:	42ab      	cmp	r3, r5
 800e322:	dc26      	bgt.n	800e372 <_printf_common+0x96>
 800e324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e328:	1e13      	subs	r3, r2, #0
 800e32a:	6822      	ldr	r2, [r4, #0]
 800e32c:	bf18      	it	ne
 800e32e:	2301      	movne	r3, #1
 800e330:	0692      	lsls	r2, r2, #26
 800e332:	d42b      	bmi.n	800e38c <_printf_common+0xb0>
 800e334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e338:	4649      	mov	r1, r9
 800e33a:	4638      	mov	r0, r7
 800e33c:	47c0      	blx	r8
 800e33e:	3001      	adds	r0, #1
 800e340:	d01e      	beq.n	800e380 <_printf_common+0xa4>
 800e342:	6823      	ldr	r3, [r4, #0]
 800e344:	68e5      	ldr	r5, [r4, #12]
 800e346:	6832      	ldr	r2, [r6, #0]
 800e348:	f003 0306 	and.w	r3, r3, #6
 800e34c:	2b04      	cmp	r3, #4
 800e34e:	bf08      	it	eq
 800e350:	1aad      	subeq	r5, r5, r2
 800e352:	68a3      	ldr	r3, [r4, #8]
 800e354:	6922      	ldr	r2, [r4, #16]
 800e356:	bf0c      	ite	eq
 800e358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e35c:	2500      	movne	r5, #0
 800e35e:	4293      	cmp	r3, r2
 800e360:	bfc4      	itt	gt
 800e362:	1a9b      	subgt	r3, r3, r2
 800e364:	18ed      	addgt	r5, r5, r3
 800e366:	2600      	movs	r6, #0
 800e368:	341a      	adds	r4, #26
 800e36a:	42b5      	cmp	r5, r6
 800e36c:	d11a      	bne.n	800e3a4 <_printf_common+0xc8>
 800e36e:	2000      	movs	r0, #0
 800e370:	e008      	b.n	800e384 <_printf_common+0xa8>
 800e372:	2301      	movs	r3, #1
 800e374:	4652      	mov	r2, sl
 800e376:	4649      	mov	r1, r9
 800e378:	4638      	mov	r0, r7
 800e37a:	47c0      	blx	r8
 800e37c:	3001      	adds	r0, #1
 800e37e:	d103      	bne.n	800e388 <_printf_common+0xac>
 800e380:	f04f 30ff 	mov.w	r0, #4294967295
 800e384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e388:	3501      	adds	r5, #1
 800e38a:	e7c6      	b.n	800e31a <_printf_common+0x3e>
 800e38c:	18e1      	adds	r1, r4, r3
 800e38e:	1c5a      	adds	r2, r3, #1
 800e390:	2030      	movs	r0, #48	; 0x30
 800e392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e396:	4422      	add	r2, r4
 800e398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e39c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e3a0:	3302      	adds	r3, #2
 800e3a2:	e7c7      	b.n	800e334 <_printf_common+0x58>
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	4622      	mov	r2, r4
 800e3a8:	4649      	mov	r1, r9
 800e3aa:	4638      	mov	r0, r7
 800e3ac:	47c0      	blx	r8
 800e3ae:	3001      	adds	r0, #1
 800e3b0:	d0e6      	beq.n	800e380 <_printf_common+0xa4>
 800e3b2:	3601      	adds	r6, #1
 800e3b4:	e7d9      	b.n	800e36a <_printf_common+0x8e>
	...

0800e3b8 <_printf_i>:
 800e3b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3bc:	460c      	mov	r4, r1
 800e3be:	4691      	mov	r9, r2
 800e3c0:	7e27      	ldrb	r7, [r4, #24]
 800e3c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e3c4:	2f78      	cmp	r7, #120	; 0x78
 800e3c6:	4680      	mov	r8, r0
 800e3c8:	469a      	mov	sl, r3
 800e3ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3ce:	d807      	bhi.n	800e3e0 <_printf_i+0x28>
 800e3d0:	2f62      	cmp	r7, #98	; 0x62
 800e3d2:	d80a      	bhi.n	800e3ea <_printf_i+0x32>
 800e3d4:	2f00      	cmp	r7, #0
 800e3d6:	f000 80d8 	beq.w	800e58a <_printf_i+0x1d2>
 800e3da:	2f58      	cmp	r7, #88	; 0x58
 800e3dc:	f000 80a3 	beq.w	800e526 <_printf_i+0x16e>
 800e3e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e3e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e3e8:	e03a      	b.n	800e460 <_printf_i+0xa8>
 800e3ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e3ee:	2b15      	cmp	r3, #21
 800e3f0:	d8f6      	bhi.n	800e3e0 <_printf_i+0x28>
 800e3f2:	a001      	add	r0, pc, #4	; (adr r0, 800e3f8 <_printf_i+0x40>)
 800e3f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e3f8:	0800e451 	.word	0x0800e451
 800e3fc:	0800e465 	.word	0x0800e465
 800e400:	0800e3e1 	.word	0x0800e3e1
 800e404:	0800e3e1 	.word	0x0800e3e1
 800e408:	0800e3e1 	.word	0x0800e3e1
 800e40c:	0800e3e1 	.word	0x0800e3e1
 800e410:	0800e465 	.word	0x0800e465
 800e414:	0800e3e1 	.word	0x0800e3e1
 800e418:	0800e3e1 	.word	0x0800e3e1
 800e41c:	0800e3e1 	.word	0x0800e3e1
 800e420:	0800e3e1 	.word	0x0800e3e1
 800e424:	0800e571 	.word	0x0800e571
 800e428:	0800e495 	.word	0x0800e495
 800e42c:	0800e553 	.word	0x0800e553
 800e430:	0800e3e1 	.word	0x0800e3e1
 800e434:	0800e3e1 	.word	0x0800e3e1
 800e438:	0800e593 	.word	0x0800e593
 800e43c:	0800e3e1 	.word	0x0800e3e1
 800e440:	0800e495 	.word	0x0800e495
 800e444:	0800e3e1 	.word	0x0800e3e1
 800e448:	0800e3e1 	.word	0x0800e3e1
 800e44c:	0800e55b 	.word	0x0800e55b
 800e450:	680b      	ldr	r3, [r1, #0]
 800e452:	1d1a      	adds	r2, r3, #4
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	600a      	str	r2, [r1, #0]
 800e458:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e45c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e460:	2301      	movs	r3, #1
 800e462:	e0a3      	b.n	800e5ac <_printf_i+0x1f4>
 800e464:	6825      	ldr	r5, [r4, #0]
 800e466:	6808      	ldr	r0, [r1, #0]
 800e468:	062e      	lsls	r6, r5, #24
 800e46a:	f100 0304 	add.w	r3, r0, #4
 800e46e:	d50a      	bpl.n	800e486 <_printf_i+0xce>
 800e470:	6805      	ldr	r5, [r0, #0]
 800e472:	600b      	str	r3, [r1, #0]
 800e474:	2d00      	cmp	r5, #0
 800e476:	da03      	bge.n	800e480 <_printf_i+0xc8>
 800e478:	232d      	movs	r3, #45	; 0x2d
 800e47a:	426d      	negs	r5, r5
 800e47c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e480:	485e      	ldr	r0, [pc, #376]	; (800e5fc <_printf_i+0x244>)
 800e482:	230a      	movs	r3, #10
 800e484:	e019      	b.n	800e4ba <_printf_i+0x102>
 800e486:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e48a:	6805      	ldr	r5, [r0, #0]
 800e48c:	600b      	str	r3, [r1, #0]
 800e48e:	bf18      	it	ne
 800e490:	b22d      	sxthne	r5, r5
 800e492:	e7ef      	b.n	800e474 <_printf_i+0xbc>
 800e494:	680b      	ldr	r3, [r1, #0]
 800e496:	6825      	ldr	r5, [r4, #0]
 800e498:	1d18      	adds	r0, r3, #4
 800e49a:	6008      	str	r0, [r1, #0]
 800e49c:	0628      	lsls	r0, r5, #24
 800e49e:	d501      	bpl.n	800e4a4 <_printf_i+0xec>
 800e4a0:	681d      	ldr	r5, [r3, #0]
 800e4a2:	e002      	b.n	800e4aa <_printf_i+0xf2>
 800e4a4:	0669      	lsls	r1, r5, #25
 800e4a6:	d5fb      	bpl.n	800e4a0 <_printf_i+0xe8>
 800e4a8:	881d      	ldrh	r5, [r3, #0]
 800e4aa:	4854      	ldr	r0, [pc, #336]	; (800e5fc <_printf_i+0x244>)
 800e4ac:	2f6f      	cmp	r7, #111	; 0x6f
 800e4ae:	bf0c      	ite	eq
 800e4b0:	2308      	moveq	r3, #8
 800e4b2:	230a      	movne	r3, #10
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e4ba:	6866      	ldr	r6, [r4, #4]
 800e4bc:	60a6      	str	r6, [r4, #8]
 800e4be:	2e00      	cmp	r6, #0
 800e4c0:	bfa2      	ittt	ge
 800e4c2:	6821      	ldrge	r1, [r4, #0]
 800e4c4:	f021 0104 	bicge.w	r1, r1, #4
 800e4c8:	6021      	strge	r1, [r4, #0]
 800e4ca:	b90d      	cbnz	r5, 800e4d0 <_printf_i+0x118>
 800e4cc:	2e00      	cmp	r6, #0
 800e4ce:	d04d      	beq.n	800e56c <_printf_i+0x1b4>
 800e4d0:	4616      	mov	r6, r2
 800e4d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e4d6:	fb03 5711 	mls	r7, r3, r1, r5
 800e4da:	5dc7      	ldrb	r7, [r0, r7]
 800e4dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e4e0:	462f      	mov	r7, r5
 800e4e2:	42bb      	cmp	r3, r7
 800e4e4:	460d      	mov	r5, r1
 800e4e6:	d9f4      	bls.n	800e4d2 <_printf_i+0x11a>
 800e4e8:	2b08      	cmp	r3, #8
 800e4ea:	d10b      	bne.n	800e504 <_printf_i+0x14c>
 800e4ec:	6823      	ldr	r3, [r4, #0]
 800e4ee:	07df      	lsls	r7, r3, #31
 800e4f0:	d508      	bpl.n	800e504 <_printf_i+0x14c>
 800e4f2:	6923      	ldr	r3, [r4, #16]
 800e4f4:	6861      	ldr	r1, [r4, #4]
 800e4f6:	4299      	cmp	r1, r3
 800e4f8:	bfde      	ittt	le
 800e4fa:	2330      	movle	r3, #48	; 0x30
 800e4fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e500:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e504:	1b92      	subs	r2, r2, r6
 800e506:	6122      	str	r2, [r4, #16]
 800e508:	f8cd a000 	str.w	sl, [sp]
 800e50c:	464b      	mov	r3, r9
 800e50e:	aa03      	add	r2, sp, #12
 800e510:	4621      	mov	r1, r4
 800e512:	4640      	mov	r0, r8
 800e514:	f7ff fee2 	bl	800e2dc <_printf_common>
 800e518:	3001      	adds	r0, #1
 800e51a:	d14c      	bne.n	800e5b6 <_printf_i+0x1fe>
 800e51c:	f04f 30ff 	mov.w	r0, #4294967295
 800e520:	b004      	add	sp, #16
 800e522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e526:	4835      	ldr	r0, [pc, #212]	; (800e5fc <_printf_i+0x244>)
 800e528:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e52c:	6823      	ldr	r3, [r4, #0]
 800e52e:	680e      	ldr	r6, [r1, #0]
 800e530:	061f      	lsls	r7, r3, #24
 800e532:	f856 5b04 	ldr.w	r5, [r6], #4
 800e536:	600e      	str	r6, [r1, #0]
 800e538:	d514      	bpl.n	800e564 <_printf_i+0x1ac>
 800e53a:	07d9      	lsls	r1, r3, #31
 800e53c:	bf44      	itt	mi
 800e53e:	f043 0320 	orrmi.w	r3, r3, #32
 800e542:	6023      	strmi	r3, [r4, #0]
 800e544:	b91d      	cbnz	r5, 800e54e <_printf_i+0x196>
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	f023 0320 	bic.w	r3, r3, #32
 800e54c:	6023      	str	r3, [r4, #0]
 800e54e:	2310      	movs	r3, #16
 800e550:	e7b0      	b.n	800e4b4 <_printf_i+0xfc>
 800e552:	6823      	ldr	r3, [r4, #0]
 800e554:	f043 0320 	orr.w	r3, r3, #32
 800e558:	6023      	str	r3, [r4, #0]
 800e55a:	2378      	movs	r3, #120	; 0x78
 800e55c:	4828      	ldr	r0, [pc, #160]	; (800e600 <_printf_i+0x248>)
 800e55e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e562:	e7e3      	b.n	800e52c <_printf_i+0x174>
 800e564:	065e      	lsls	r6, r3, #25
 800e566:	bf48      	it	mi
 800e568:	b2ad      	uxthmi	r5, r5
 800e56a:	e7e6      	b.n	800e53a <_printf_i+0x182>
 800e56c:	4616      	mov	r6, r2
 800e56e:	e7bb      	b.n	800e4e8 <_printf_i+0x130>
 800e570:	680b      	ldr	r3, [r1, #0]
 800e572:	6826      	ldr	r6, [r4, #0]
 800e574:	6960      	ldr	r0, [r4, #20]
 800e576:	1d1d      	adds	r5, r3, #4
 800e578:	600d      	str	r5, [r1, #0]
 800e57a:	0635      	lsls	r5, r6, #24
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	d501      	bpl.n	800e584 <_printf_i+0x1cc>
 800e580:	6018      	str	r0, [r3, #0]
 800e582:	e002      	b.n	800e58a <_printf_i+0x1d2>
 800e584:	0671      	lsls	r1, r6, #25
 800e586:	d5fb      	bpl.n	800e580 <_printf_i+0x1c8>
 800e588:	8018      	strh	r0, [r3, #0]
 800e58a:	2300      	movs	r3, #0
 800e58c:	6123      	str	r3, [r4, #16]
 800e58e:	4616      	mov	r6, r2
 800e590:	e7ba      	b.n	800e508 <_printf_i+0x150>
 800e592:	680b      	ldr	r3, [r1, #0]
 800e594:	1d1a      	adds	r2, r3, #4
 800e596:	600a      	str	r2, [r1, #0]
 800e598:	681e      	ldr	r6, [r3, #0]
 800e59a:	6862      	ldr	r2, [r4, #4]
 800e59c:	2100      	movs	r1, #0
 800e59e:	4630      	mov	r0, r6
 800e5a0:	f7f1 febe 	bl	8000320 <memchr>
 800e5a4:	b108      	cbz	r0, 800e5aa <_printf_i+0x1f2>
 800e5a6:	1b80      	subs	r0, r0, r6
 800e5a8:	6060      	str	r0, [r4, #4]
 800e5aa:	6863      	ldr	r3, [r4, #4]
 800e5ac:	6123      	str	r3, [r4, #16]
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5b4:	e7a8      	b.n	800e508 <_printf_i+0x150>
 800e5b6:	6923      	ldr	r3, [r4, #16]
 800e5b8:	4632      	mov	r2, r6
 800e5ba:	4649      	mov	r1, r9
 800e5bc:	4640      	mov	r0, r8
 800e5be:	47d0      	blx	sl
 800e5c0:	3001      	adds	r0, #1
 800e5c2:	d0ab      	beq.n	800e51c <_printf_i+0x164>
 800e5c4:	6823      	ldr	r3, [r4, #0]
 800e5c6:	079b      	lsls	r3, r3, #30
 800e5c8:	d413      	bmi.n	800e5f2 <_printf_i+0x23a>
 800e5ca:	68e0      	ldr	r0, [r4, #12]
 800e5cc:	9b03      	ldr	r3, [sp, #12]
 800e5ce:	4298      	cmp	r0, r3
 800e5d0:	bfb8      	it	lt
 800e5d2:	4618      	movlt	r0, r3
 800e5d4:	e7a4      	b.n	800e520 <_printf_i+0x168>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	4632      	mov	r2, r6
 800e5da:	4649      	mov	r1, r9
 800e5dc:	4640      	mov	r0, r8
 800e5de:	47d0      	blx	sl
 800e5e0:	3001      	adds	r0, #1
 800e5e2:	d09b      	beq.n	800e51c <_printf_i+0x164>
 800e5e4:	3501      	adds	r5, #1
 800e5e6:	68e3      	ldr	r3, [r4, #12]
 800e5e8:	9903      	ldr	r1, [sp, #12]
 800e5ea:	1a5b      	subs	r3, r3, r1
 800e5ec:	42ab      	cmp	r3, r5
 800e5ee:	dcf2      	bgt.n	800e5d6 <_printf_i+0x21e>
 800e5f0:	e7eb      	b.n	800e5ca <_printf_i+0x212>
 800e5f2:	2500      	movs	r5, #0
 800e5f4:	f104 0619 	add.w	r6, r4, #25
 800e5f8:	e7f5      	b.n	800e5e6 <_printf_i+0x22e>
 800e5fa:	bf00      	nop
 800e5fc:	08013235 	.word	0x08013235
 800e600:	08013246 	.word	0x08013246

0800e604 <_sbrk_r>:
 800e604:	b538      	push	{r3, r4, r5, lr}
 800e606:	4d06      	ldr	r5, [pc, #24]	; (800e620 <_sbrk_r+0x1c>)
 800e608:	2300      	movs	r3, #0
 800e60a:	4604      	mov	r4, r0
 800e60c:	4608      	mov	r0, r1
 800e60e:	602b      	str	r3, [r5, #0]
 800e610:	f7f3 faf4 	bl	8001bfc <_sbrk>
 800e614:	1c43      	adds	r3, r0, #1
 800e616:	d102      	bne.n	800e61e <_sbrk_r+0x1a>
 800e618:	682b      	ldr	r3, [r5, #0]
 800e61a:	b103      	cbz	r3, 800e61e <_sbrk_r+0x1a>
 800e61c:	6023      	str	r3, [r4, #0]
 800e61e:	bd38      	pop	{r3, r4, r5, pc}
 800e620:	24000414 	.word	0x24000414

0800e624 <memmove>:
 800e624:	4288      	cmp	r0, r1
 800e626:	b510      	push	{r4, lr}
 800e628:	eb01 0402 	add.w	r4, r1, r2
 800e62c:	d902      	bls.n	800e634 <memmove+0x10>
 800e62e:	4284      	cmp	r4, r0
 800e630:	4623      	mov	r3, r4
 800e632:	d807      	bhi.n	800e644 <memmove+0x20>
 800e634:	1e43      	subs	r3, r0, #1
 800e636:	42a1      	cmp	r1, r4
 800e638:	d008      	beq.n	800e64c <memmove+0x28>
 800e63a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e63e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e642:	e7f8      	b.n	800e636 <memmove+0x12>
 800e644:	4402      	add	r2, r0
 800e646:	4601      	mov	r1, r0
 800e648:	428a      	cmp	r2, r1
 800e64a:	d100      	bne.n	800e64e <memmove+0x2a>
 800e64c:	bd10      	pop	{r4, pc}
 800e64e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e656:	e7f7      	b.n	800e648 <memmove+0x24>

0800e658 <__malloc_lock>:
 800e658:	4801      	ldr	r0, [pc, #4]	; (800e660 <__malloc_lock+0x8>)
 800e65a:	f7ff bc87 	b.w	800df6c <__retarget_lock_acquire_recursive>
 800e65e:	bf00      	nop
 800e660:	2400040c 	.word	0x2400040c

0800e664 <__malloc_unlock>:
 800e664:	4801      	ldr	r0, [pc, #4]	; (800e66c <__malloc_unlock+0x8>)
 800e666:	f7ff bc82 	b.w	800df6e <__retarget_lock_release_recursive>
 800e66a:	bf00      	nop
 800e66c:	2400040c 	.word	0x2400040c

0800e670 <_free_r>:
 800e670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e672:	2900      	cmp	r1, #0
 800e674:	d048      	beq.n	800e708 <_free_r+0x98>
 800e676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e67a:	9001      	str	r0, [sp, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	f1a1 0404 	sub.w	r4, r1, #4
 800e682:	bfb8      	it	lt
 800e684:	18e4      	addlt	r4, r4, r3
 800e686:	f7ff ffe7 	bl	800e658 <__malloc_lock>
 800e68a:	4a20      	ldr	r2, [pc, #128]	; (800e70c <_free_r+0x9c>)
 800e68c:	9801      	ldr	r0, [sp, #4]
 800e68e:	6813      	ldr	r3, [r2, #0]
 800e690:	4615      	mov	r5, r2
 800e692:	b933      	cbnz	r3, 800e6a2 <_free_r+0x32>
 800e694:	6063      	str	r3, [r4, #4]
 800e696:	6014      	str	r4, [r2, #0]
 800e698:	b003      	add	sp, #12
 800e69a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e69e:	f7ff bfe1 	b.w	800e664 <__malloc_unlock>
 800e6a2:	42a3      	cmp	r3, r4
 800e6a4:	d90b      	bls.n	800e6be <_free_r+0x4e>
 800e6a6:	6821      	ldr	r1, [r4, #0]
 800e6a8:	1862      	adds	r2, r4, r1
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	bf04      	itt	eq
 800e6ae:	681a      	ldreq	r2, [r3, #0]
 800e6b0:	685b      	ldreq	r3, [r3, #4]
 800e6b2:	6063      	str	r3, [r4, #4]
 800e6b4:	bf04      	itt	eq
 800e6b6:	1852      	addeq	r2, r2, r1
 800e6b8:	6022      	streq	r2, [r4, #0]
 800e6ba:	602c      	str	r4, [r5, #0]
 800e6bc:	e7ec      	b.n	800e698 <_free_r+0x28>
 800e6be:	461a      	mov	r2, r3
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	b10b      	cbz	r3, 800e6c8 <_free_r+0x58>
 800e6c4:	42a3      	cmp	r3, r4
 800e6c6:	d9fa      	bls.n	800e6be <_free_r+0x4e>
 800e6c8:	6811      	ldr	r1, [r2, #0]
 800e6ca:	1855      	adds	r5, r2, r1
 800e6cc:	42a5      	cmp	r5, r4
 800e6ce:	d10b      	bne.n	800e6e8 <_free_r+0x78>
 800e6d0:	6824      	ldr	r4, [r4, #0]
 800e6d2:	4421      	add	r1, r4
 800e6d4:	1854      	adds	r4, r2, r1
 800e6d6:	42a3      	cmp	r3, r4
 800e6d8:	6011      	str	r1, [r2, #0]
 800e6da:	d1dd      	bne.n	800e698 <_free_r+0x28>
 800e6dc:	681c      	ldr	r4, [r3, #0]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	6053      	str	r3, [r2, #4]
 800e6e2:	4421      	add	r1, r4
 800e6e4:	6011      	str	r1, [r2, #0]
 800e6e6:	e7d7      	b.n	800e698 <_free_r+0x28>
 800e6e8:	d902      	bls.n	800e6f0 <_free_r+0x80>
 800e6ea:	230c      	movs	r3, #12
 800e6ec:	6003      	str	r3, [r0, #0]
 800e6ee:	e7d3      	b.n	800e698 <_free_r+0x28>
 800e6f0:	6825      	ldr	r5, [r4, #0]
 800e6f2:	1961      	adds	r1, r4, r5
 800e6f4:	428b      	cmp	r3, r1
 800e6f6:	bf04      	itt	eq
 800e6f8:	6819      	ldreq	r1, [r3, #0]
 800e6fa:	685b      	ldreq	r3, [r3, #4]
 800e6fc:	6063      	str	r3, [r4, #4]
 800e6fe:	bf04      	itt	eq
 800e700:	1949      	addeq	r1, r1, r5
 800e702:	6021      	streq	r1, [r4, #0]
 800e704:	6054      	str	r4, [r2, #4]
 800e706:	e7c7      	b.n	800e698 <_free_r+0x28>
 800e708:	b003      	add	sp, #12
 800e70a:	bd30      	pop	{r4, r5, pc}
 800e70c:	2400002c 	.word	0x2400002c

0800e710 <_realloc_r>:
 800e710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e712:	4607      	mov	r7, r0
 800e714:	4614      	mov	r4, r2
 800e716:	460e      	mov	r6, r1
 800e718:	b921      	cbnz	r1, 800e724 <_realloc_r+0x14>
 800e71a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e71e:	4611      	mov	r1, r2
 800e720:	f7ff bc26 	b.w	800df70 <_malloc_r>
 800e724:	b922      	cbnz	r2, 800e730 <_realloc_r+0x20>
 800e726:	f7ff ffa3 	bl	800e670 <_free_r>
 800e72a:	4625      	mov	r5, r4
 800e72c:	4628      	mov	r0, r5
 800e72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e730:	f000 f814 	bl	800e75c <_malloc_usable_size_r>
 800e734:	42a0      	cmp	r0, r4
 800e736:	d20f      	bcs.n	800e758 <_realloc_r+0x48>
 800e738:	4621      	mov	r1, r4
 800e73a:	4638      	mov	r0, r7
 800e73c:	f7ff fc18 	bl	800df70 <_malloc_r>
 800e740:	4605      	mov	r5, r0
 800e742:	2800      	cmp	r0, #0
 800e744:	d0f2      	beq.n	800e72c <_realloc_r+0x1c>
 800e746:	4631      	mov	r1, r6
 800e748:	4622      	mov	r2, r4
 800e74a:	f7ff fbbf 	bl	800decc <memcpy>
 800e74e:	4631      	mov	r1, r6
 800e750:	4638      	mov	r0, r7
 800e752:	f7ff ff8d 	bl	800e670 <_free_r>
 800e756:	e7e9      	b.n	800e72c <_realloc_r+0x1c>
 800e758:	4635      	mov	r5, r6
 800e75a:	e7e7      	b.n	800e72c <_realloc_r+0x1c>

0800e75c <_malloc_usable_size_r>:
 800e75c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e760:	1f18      	subs	r0, r3, #4
 800e762:	2b00      	cmp	r3, #0
 800e764:	bfbc      	itt	lt
 800e766:	580b      	ldrlt	r3, [r1, r0]
 800e768:	18c0      	addlt	r0, r0, r3
 800e76a:	4770      	bx	lr

0800e76c <_init>:
 800e76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76e:	bf00      	nop
 800e770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e772:	bc08      	pop	{r3}
 800e774:	469e      	mov	lr, r3
 800e776:	4770      	bx	lr

0800e778 <_fini>:
 800e778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e77a:	bf00      	nop
 800e77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e77e:	bc08      	pop	{r3}
 800e780:	469e      	mov	lr, r3
 800e782:	4770      	bx	lr
